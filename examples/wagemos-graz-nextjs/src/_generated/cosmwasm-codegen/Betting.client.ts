/**
* This file was automatically generated by @abstract-money/ts-codegen@0.35.4.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @abstract-money/ts-codegen generate command to regenerate this file.
*/

import { CamelCasedProperties } from "type-fest";
import { SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { AbstractQueryClient, AbstractAccountQueryClient, AbstractAccountClient, AppExecuteMsg, AppExecuteMsgFactory, AbstractClient, AbstractAccountId } from "@abstract-money/core";
import { StdFee } from "@cosmjs/amino";
import { AssetEntry, Decimal, InstantiateMsg, ExecuteMsg, AccountTrace, ChainName, Uint128, AccountOdds, AccountId, Bet, AnsAsset, QueryMsg, MigrateMsg, Addr, BetsResponse, ConfigResponse, ListOddsResponse, OddsResponse, RoundStatus, RoundResponse, Coin } from "./Betting.types";
import { BettingQueryMsgBuilder, BettingExecuteMsgBuilder } from "./Betting.message-builder";
export interface IBettingAppQueryClient {
  moduleId: string;
  accountQueryClient: AbstractAccountQueryClient;
  _moduleAddress: string | undefined;
  round: () => Promise<RoundResponse>;
  odds: (params: CamelCasedProperties<Extract<QueryMsg, {
    odds: unknown;
  }>["odds"]>) => Promise<OddsResponse>;
  listOdds: () => Promise<ListOddsResponse>;
  config: () => Promise<ConfigResponse>;
  bets: () => Promise<BetsResponse>;
  connectSigningClient: (signingClient: SigningCosmWasmClient, address: string) => BettingAppClient;
  getAddress: () => Promise<string>;
}
export class BettingAppQueryClient implements IBettingAppQueryClient {
  accountQueryClient: AbstractAccountQueryClient;
  moduleId: string;
  _moduleAddress: string | undefined;

  constructor({
    abstractQueryClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractQueryClient: AbstractQueryClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    this.accountQueryClient = new AbstractAccountQueryClient({
      abstract: abstractQueryClient,
      accountId,
      managerAddress,
      proxyAddress
    });
    this.moduleId = moduleId;
    this.round = this.round.bind(this);
    this.odds = this.odds.bind(this);
    this.listOdds = this.listOdds.bind(this);
    this.config = this.config.bind(this);
    this.bets = this.bets.bind(this);
  }

  round = async (): Promise<RoundResponse> => {
    return this._query(BettingQueryMsgBuilder.round());
  };
  odds = async (params: CamelCasedProperties<Extract<QueryMsg, {
    odds: unknown;
  }>["odds"]>): Promise<OddsResponse> => {
    return this._query(BettingQueryMsgBuilder.odds(params));
  };
  listOdds = async (): Promise<ListOddsResponse> => {
    return this._query(BettingQueryMsgBuilder.listOdds());
  };
  config = async (): Promise<ConfigResponse> => {
    return this._query(BettingQueryMsgBuilder.config());
  };
  bets = async (): Promise<BetsResponse> => {
    return this._query(BettingQueryMsgBuilder.bets());
  };
  getAddress = async (): Promise<string> => {
    if (!this._moduleAddress) {
      const address = await this.accountQueryClient.getModuleAddress(this.moduleId);

      if (address === null) {
        throw new Error(`Module ${this.moduleId} not installed`);
      }

      this._moduleAddress = address;
    }

    return this._moduleAddress!;
  };
  connectSigningClient = (signingClient: SigningCosmWasmClient, address: string): BettingAppClient => {
    return new BettingAppClient({
      accountId: this.accountQueryClient.accountId,
      managerAddress: this.accountQueryClient.managerAddress,
      proxyAddress: this.accountQueryClient.proxyAddress,
      moduleId: this.moduleId,
      abstractClient: this.accountQueryClient.abstract.connectSigningClient(signingClient, address)
    });
  };
  _query = async (queryMsg: QueryMsg): Promise<any> => {
    return this.accountQueryClient.queryModule({
      moduleId: this.moduleId,
      moduleType: "app",
      queryMsg
    });
  };
}
export interface IBettingAppClient extends IBettingAppQueryClient {
  accountClient: AbstractAccountClient;
  register: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateAccounts: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_accounts: unknown;
  }>["update_accounts"]>, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  placeBet: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    place_bet: unknown;
  }>["place_bet"]>, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  distributeWinnings: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  closeRound: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    close_round: unknown;
  }>["close_round"]>, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>["update_config"]>, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class BettingAppClient extends BettingAppQueryClient implements IBettingAppClient {
  accountClient: AbstractAccountClient;

  constructor({
    abstractClient,
    accountId,
    managerAddress,
    proxyAddress,
    moduleId
  }: {
    abstractClient: AbstractClient;
    accountId: AbstractAccountId;
    managerAddress: string;
    proxyAddress: string;
    moduleId: string;
  }) {
    super({
      abstractQueryClient: abstractClient,
      accountId,
      managerAddress,
      proxyAddress,
      moduleId
    });
    this.accountClient = AbstractAccountClient.fromQueryClient(this.accountQueryClient, abstractClient);
    this.register = this.register.bind(this);
    this.updateAccounts = this.updateAccounts.bind(this);
    this.placeBet = this.placeBet.bind(this);
    this.distributeWinnings = this.distributeWinnings.bind(this);
    this.closeRound = this.closeRound.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
  }

  register = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.register(), fee, memo, _funds);
  };
  updateAccounts = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_accounts: unknown;
  }>["update_accounts"]>, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.updateAccounts(params), fee, memo, _funds);
  };
  placeBet = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    place_bet: unknown;
  }>["place_bet"]>, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.placeBet(params), fee, memo, _funds);
  };
  distributeWinnings = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.distributeWinnings(), fee, memo, _funds);
  };
  closeRound = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    close_round: unknown;
  }>["close_round"]>, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.closeRound(params), fee, memo, _funds);
  };
  updateConfig = async (params: CamelCasedProperties<Extract<ExecuteMsg, {
    update_config: unknown;
  }>["update_config"]>, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return this._execute(BettingExecuteMsgBuilder.updateConfig(params), fee, memo, _funds);
  };
  _execute = async (msg: ExecuteMsg, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    const moduleMsg: AppExecuteMsg<ExecuteMsg> = AppExecuteMsgFactory.executeApp(msg);
    return await this.accountClient.abstract.client.execute(this.accountClient.sender, await this.getAddress(), moduleMsg, fee, memo, _funds);
  };
}