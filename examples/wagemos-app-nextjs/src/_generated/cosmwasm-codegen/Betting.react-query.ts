/**
 * This file was automatically generated by @abstract-money/ts-codegen@0.35.4.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @abstract-money/ts-codegen generate command to regenerate this file.
 */

import { StdFee } from '@cosmjs/amino'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import {
  UseMutationOptions,
  UseQueryOptions,
  useMutation,
  useQuery,
} from '@tanstack/react-query'
import { BettingAppClient, BettingAppQueryClient } from './Betting.client'
import {
  AccountId,
  AccountOdds,
  AccountTrace,
  Addr,
  AnsAsset,
  AssetEntry,
  Bet,
  BetsResponse,
  ChainName,
  Coin,
  ConfigResponse,
  Decimal,
  ExecuteMsg,
  InstantiateMsg,
  ListOddsResponse,
  MigrateMsg,
  OddsResponse,
  QueryMsg,
  RoundResponse,
  RoundStatus,
  Uint128,
} from './Betting.types'
export const bettingQueryKeys = {
  contract: [
    {
      contract: 'betting',
    },
  ] as const,
  address: (contractAddress: string) =>
    [{ ...bettingQueryKeys.contract[0], address: contractAddress }] as const,
  round: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...bettingQueryKeys.address(contractAddress)[0],
        method: 'round',
        args,
      },
    ] as const,
  odds: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      { ...bettingQueryKeys.address(contractAddress)[0], method: 'odds', args },
    ] as const,
  listOdds: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...bettingQueryKeys.address(contractAddress)[0],
        method: 'list_odds',
        args,
      },
    ] as const,
  config: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      {
        ...bettingQueryKeys.address(contractAddress)[0],
        method: 'config',
        args,
      },
    ] as const,
  bets: (contractAddress: string, args?: Record<string, unknown>) =>
    [
      { ...bettingQueryKeys.address(contractAddress)[0], method: 'bets', args },
    ] as const,
}
export const bettingQueries = {
  round: <TData = RoundResponse,>({
    client,
    options,
  }: BettingRoundQuery<TData>): UseQueryOptions<
    RoundResponse,
    Error,
    TData
  > => ({
    queryKey: bettingQueryKeys.round(client?.moduleId),
    queryFn: () => client.round(),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  odds: <TData = OddsResponse,>({
    client,
    args,
    options,
  }: BettingOddsQuery<TData>): UseQueryOptions<OddsResponse, Error, TData> => ({
    queryKey: bettingQueryKeys.odds(client?.moduleId, args),
    queryFn: () =>
      client.odds({
        teamId: args.teamId,
      }),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  listOdds: <TData = ListOddsResponse,>({
    client,
    options,
  }: BettingListOddsQuery<TData>): UseQueryOptions<
    ListOddsResponse,
    Error,
    TData
  > => ({
    queryKey: bettingQueryKeys.listOdds(client?.moduleId),
    queryFn: () => client.listOdds(),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  config: <TData = ConfigResponse,>({
    client,
    options,
  }: BettingConfigQuery<TData>): UseQueryOptions<
    ConfigResponse,
    Error,
    TData
  > => ({
    queryKey: bettingQueryKeys.config(client?.moduleId),
    queryFn: () => client.config(),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  bets: <TData = BetsResponse,>({
    client,
    options,
  }: BettingBetsQuery<TData>): UseQueryOptions<BetsResponse, Error, TData> => ({
    queryKey: bettingQueryKeys.bets(client?.moduleId),
    queryFn: () => client.bets(),
    ...options,
    enabled:
      !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
}
export interface BettingReactQuery<TResponse, TData = TResponse> {
  client: BettingAppQueryClient
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export type BettingBetsQuery<TData> = BettingReactQuery<BetsResponse, TData>
export function useBettingBetsQuery<TData = BetsResponse>({
  client,
  options,
}: BettingBetsQuery<TData>) {
  return useQuery<BetsResponse, Error, TData>(
    bettingQueryKeys.bets(client.moduleId),
    () => client.bets(),
    options,
  )
}
export type BettingConfigQuery<TData> = BettingReactQuery<ConfigResponse, TData>
export function useBettingConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: BettingConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    bettingQueryKeys.config(client.moduleId),
    () => client.config(),
    options,
  )
}
export type BettingListOddsQuery<TData> = BettingReactQuery<
  ListOddsResponse,
  TData
>
export function useBettingListOddsQuery<TData = ListOddsResponse>({
  client,
  options,
}: BettingListOddsQuery<TData>) {
  return useQuery<ListOddsResponse, Error, TData>(
    bettingQueryKeys.listOdds(client.moduleId),
    () => client.listOdds(),
    options,
  )
}
export interface BettingOddsQuery<TData>
  extends BettingReactQuery<OddsResponse, TData> {
  args: {
    teamId: AccountId
  }
}
export function useBettingOddsQuery<TData = OddsResponse>({
  client,
  args,
  options,
}: BettingOddsQuery<TData>) {
  return useQuery<OddsResponse, Error, TData>(
    bettingQueryKeys.odds(client.moduleId, args),
    () =>
      client.odds({
        teamId: args.teamId,
      }),
    options,
  )
}
export type BettingRoundQuery<TData> = BettingReactQuery<RoundResponse, TData>
export function useBettingRoundQuery<TData = RoundResponse>({
  client,
  options,
}: BettingRoundQuery<TData>) {
  return useQuery<RoundResponse, Error, TData>(
    bettingQueryKeys.round(client.moduleId),
    () => client.round(),
    options,
  )
}
export interface BettingUpdateConfigMutation {
  client: BettingAppClient
  msg: {
    rake?: Decimal
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useBettingUpdateConfigMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, BettingUpdateConfigMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, BettingUpdateConfigMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateConfig(msg, fee, memo, funds),
    options,
  )
}
export interface BettingCloseRoundMutation {
  client: BettingAppClient
  msg: {
    winner?: AccountId
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useBettingCloseRoundMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, BettingCloseRoundMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, BettingCloseRoundMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.closeRound(msg, fee, memo, funds),
    options,
  )
}
export interface BettingDistributeWinningsMutation {
  client: BettingAppClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useBettingDistributeWinningsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, BettingDistributeWinningsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, BettingDistributeWinningsMutation>(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.distributeWinnings(fee, memo, funds),
    options,
  )
}
export interface BettingPlaceBetMutation {
  client: BettingAppClient
  msg: {
    bet: Bet
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useBettingPlaceBetMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, BettingPlaceBetMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, BettingPlaceBetMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.placeBet(msg, fee, memo, funds),
    options,
  )
}
export interface BettingUpdateAccountsMutation {
  client: BettingAppClient
  msg: {
    toAdd: AccountOdds[]
    toRemove: AccountId[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useBettingUpdateAccountsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, BettingUpdateAccountsMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, BettingUpdateAccountsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateAccounts(msg, fee, memo, funds),
    options,
  )
}
export interface BettingRegisterMutation {
  client: BettingAppClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useBettingRegisterMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, BettingRegisterMutation>,
    'mutationFn'
  >,
) {
  return useMutation<ExecuteResult, Error, BettingRegisterMutation>(
    ({ client, args: { fee, memo, funds } = {} }) =>
      client.register(fee, memo, funds),
    options,
  )
}
