"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAnsUpdateContractAddressesMutation = exports.useAnsUpdateAssetAddressesMutation = exports.useAnsUpdateChannelsMutation = exports.useAnsUpdateDexesMutation = exports.useAnsUpdatePoolsMutation = exports.useAnsSetAdminMutation = exports.useAnsAssetsQuery = exports.useAnsAssetListQuery = exports.useAnsContractsQuery = exports.useAnsContractListQuery = exports.useAnsChannelsQuery = exports.useAnsChannelListQuery = exports.useAnsRegisteredDexesQuery = exports.useAnsPoolsQuery = exports.useAnsPoolListQuery = exports.useAnsPoolMetadatasQuery = exports.useAnsPoolMetadataListQuery = exports.ansQueryKeys = void 0;
var tslib_1 = require("tslib");
var react_query_1 = require("@tanstack/react-query");
exports.ansQueryKeys = {
    contract: [
        {
            contract: 'ans',
        },
    ],
    address: function (contractAddress) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.contract[0]), { address: contractAddress })];
    },
    assets: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'assets', args: args })];
    },
    assetList: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'asset_list', args: args })];
    },
    contracts: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'contracts', args: args })];
    },
    contractList: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'contract_list', args: args })];
    },
    channels: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'channels', args: args })];
    },
    channelList: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'channel_list', args: args })];
    },
    registeredDexes: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'registered_dexes', args: args })];
    },
    pools: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'pools', args: args })];
    },
    poolList: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'pool_list', args: args })];
    },
    poolMetadatas: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'pool_metadatas', args: args })];
    },
    poolMetadataList: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'pool_metadata_list', args: args })];
    },
};
function useAnsPoolMetadataListQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.poolMetadataList(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.poolMetadataList({
                filter: args.filter,
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsPoolMetadataListQuery = useAnsPoolMetadataListQuery;
function useAnsPoolMetadatasQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.poolMetadatas(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.poolMetadatas({
                keys: args.keys,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsPoolMetadatasQuery = useAnsPoolMetadatasQuery;
function useAnsPoolListQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.poolList(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.poolList({
                filter: args.filter,
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsPoolListQuery = useAnsPoolListQuery;
function useAnsPoolsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.pools(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.pools({
                keys: args.keys,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsPoolsQuery = useAnsPoolsQuery;
function useAnsRegisteredDexesQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.registeredDexes(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.registeredDexes() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsRegisteredDexesQuery = useAnsRegisteredDexesQuery;
function useAnsChannelListQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.channelList(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.channelList({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsChannelListQuery = useAnsChannelListQuery;
function useAnsChannelsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.channels(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.channels({
                names: args.names,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsChannelsQuery = useAnsChannelsQuery;
function useAnsContractListQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.contractList(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.contractList({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsContractListQuery = useAnsContractListQuery;
function useAnsContractsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.contracts(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.contracts({
                names: args.names,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsContractsQuery = useAnsContractsQuery;
function useAnsAssetListQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.assetList(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.assetList({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsAssetListQuery = useAnsAssetListQuery;
function useAnsAssetsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.assets(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.assets({
                names: args.names,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsAssetsQuery = useAnsAssetsQuery;
function useAnsSetAdminMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.setAdmin(msg, fee, memo, funds);
    }, options);
}
exports.useAnsSetAdminMutation = useAnsSetAdminMutation;
function useAnsUpdatePoolsMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updatePools(msg, fee, memo, funds);
    }, options);
}
exports.useAnsUpdatePoolsMutation = useAnsUpdatePoolsMutation;
function useAnsUpdateDexesMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateDexes(msg, fee, memo, funds);
    }, options);
}
exports.useAnsUpdateDexesMutation = useAnsUpdateDexesMutation;
function useAnsUpdateChannelsMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateChannels(msg, fee, memo, funds);
    }, options);
}
exports.useAnsUpdateChannelsMutation = useAnsUpdateChannelsMutation;
function useAnsUpdateAssetAddressesMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateAssetAddresses(msg, fee, memo, funds);
    }, options);
}
exports.useAnsUpdateAssetAddressesMutation = useAnsUpdateAssetAddressesMutation;
function useAnsUpdateContractAddressesMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateContractAddresses(msg, fee, memo, funds);
    }, options);
}
exports.useAnsUpdateContractAddressesMutation = useAnsUpdateContractAddressesMutation;
