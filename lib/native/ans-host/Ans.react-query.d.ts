/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee, Coin } from '@cosmjs/amino';
import { PoolIdBaseForString, UniquePoolId, UncheckedContractEntry, UncheckedChannelEntry, DexAssetPairing, ContractEntry, ChannelEntry, AssetPairingFilter, PoolMetadataFilter, AssetListResponse, AssetsResponse, ChannelListResponse, ChannelsResponse, ContractListResponse, ContractsResponse, PoolIdListResponse, PoolMetadataListResponse, PoolMetadatasResponse, PoolsResponse, RegisteredDexesResponse } from './Ans.types';
import { AnsQueryClient, AnsClient } from './Ans.client';
export declare const ansQueryKeys: {
    contract: readonly [{
        readonly contract: "ans";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    assets: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "assets";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    assetList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "asset_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    contracts: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "contracts";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    contractList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "contract_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    channels: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "channels";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    channelList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "channel_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    registeredDexes: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "registered_dexes";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    pools: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pools";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    poolList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pool_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    poolMetadatas: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pool_metadatas";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
    poolMetadataList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "pool_metadata_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "ans";
    }];
};
export interface AnsReactQuery<TResponse, TData = TResponse> {
    client: AnsQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface AnsPoolMetadataListQuery<TData> extends AnsReactQuery<PoolMetadataListResponse, TData> {
    args: {
        filter?: PoolMetadataFilter;
        pageSize?: number;
        pageToken?: UniquePoolId;
    };
}
export declare function useAnsPoolMetadataListQuery<TData = PoolMetadataListResponse>({ client, args, options, }: AnsPoolMetadataListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsPoolMetadatasQuery<TData> extends AnsReactQuery<PoolMetadatasResponse, TData> {
    args: {
        keys: UniquePoolId[];
    };
}
export declare function useAnsPoolMetadatasQuery<TData = PoolMetadatasResponse>({ client, args, options, }: AnsPoolMetadatasQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsPoolListQuery<TData> extends AnsReactQuery<PoolIdListResponse, TData> {
    args: {
        filter?: AssetPairingFilter;
        pageSize?: number;
        pageToken?: DexAssetPairing;
    };
}
export declare function useAnsPoolListQuery<TData = PoolIdListResponse>({ client, args, options, }: AnsPoolListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsPoolsQuery<TData> extends AnsReactQuery<PoolsResponse, TData> {
    args: {
        keys: DexAssetPairing[];
    };
}
export declare function useAnsPoolsQuery<TData = PoolsResponse>({ client, args, options, }: AnsPoolsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsRegisteredDexesQuery<TData> extends AnsReactQuery<RegisteredDexesResponse, TData> {
}
export declare function useAnsRegisteredDexesQuery<TData = RegisteredDexesResponse>({ client, options, }: AnsRegisteredDexesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsChannelListQuery<TData> extends AnsReactQuery<ChannelListResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: ChannelEntry;
    };
}
export declare function useAnsChannelListQuery<TData = ChannelListResponse>({ client, args, options, }: AnsChannelListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsChannelsQuery<TData> extends AnsReactQuery<ChannelsResponse, TData> {
    args: {
        names: ChannelEntry[];
    };
}
export declare function useAnsChannelsQuery<TData = ChannelsResponse>({ client, args, options, }: AnsChannelsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsContractListQuery<TData> extends AnsReactQuery<ContractListResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: ContractEntry;
    };
}
export declare function useAnsContractListQuery<TData = ContractListResponse>({ client, args, options, }: AnsContractListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsContractsQuery<TData> extends AnsReactQuery<ContractsResponse, TData> {
    args: {
        names: ContractEntry[];
    };
}
export declare function useAnsContractsQuery<TData = ContractsResponse>({ client, args, options, }: AnsContractsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsAssetListQuery<TData> extends AnsReactQuery<AssetListResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: string;
    };
}
export declare function useAnsAssetListQuery<TData = AssetListResponse>({ client, args, options, }: AnsAssetListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsAssetsQuery<TData> extends AnsReactQuery<AssetsResponse, TData> {
    args: {
        names: string[];
    };
}
export declare function useAnsAssetsQuery<TData = AssetsResponse>({ client, args, options, }: AnsAssetsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface AnsSetAdminMutation {
    client: AnsClient;
    msg: {
        admin: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAnsSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsSetAdminMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AnsSetAdminMutation, unknown>;
export interface AnsUpdatePoolsMutation {
    client: AnsClient;
    msg: {
        toAdd: PoolIdBaseForString[][];
        toRemove: UniquePoolId[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAnsUpdatePoolsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdatePoolsMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AnsUpdatePoolsMutation, unknown>;
export interface AnsUpdateDexesMutation {
    client: AnsClient;
    msg: {
        toAdd: string[];
        toRemove: string[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAnsUpdateDexesMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdateDexesMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AnsUpdateDexesMutation, unknown>;
export interface AnsUpdateChannelsMutation {
    client: AnsClient;
    msg: {
        toAdd: UncheckedChannelEntry[][];
        toRemove: UncheckedChannelEntry[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAnsUpdateChannelsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdateChannelsMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AnsUpdateChannelsMutation, unknown>;
export interface AnsUpdateAssetAddressesMutation {
    client: AnsClient;
    msg: {
        toAdd: string[][];
        toRemove: string[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAnsUpdateAssetAddressesMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdateAssetAddressesMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AnsUpdateAssetAddressesMutation, unknown>;
export interface AnsUpdateContractAddressesMutation {
    client: AnsClient;
    msg: {
        toAdd: UncheckedContractEntry[][];
        toRemove: UncheckedContractEntry[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useAnsUpdateContractAddressesMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdateContractAddressesMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, AnsUpdateContractAddressesMutation, unknown>;
