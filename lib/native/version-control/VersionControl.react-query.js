"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useVersionControlRemoveModuleMutation = exports.useVersionControlAddModulesMutation = exports.useVersionControlAddOsMutation = exports.useVersionControlSetAdminMutation = exports.useVersionControlSetFactoryMutation = exports.useVersionControlOsCoreQuery = exports.useVersionControlModuleQuery = exports.useVersionControlConfigQuery = exports.useVersionControlModulesQuery = exports.versionControlQueryKeys = void 0;
var tslib_1 = require("tslib");
var react_query_1 = require("@tanstack/react-query");
exports.versionControlQueryKeys = {
    contract: [
        {
            contract: 'versionControl',
        },
    ],
    address: function (contractAddress) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.versionControlQueryKeys.contract[0]), { address: contractAddress })];
    },
    osCore: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'os_core', args: args })];
    },
    module: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'module', args: args })];
    },
    config: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'config', args: args })];
    },
    modules: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'modules', args: args })];
    },
};
function useVersionControlModulesQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.modules(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.modules({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlModulesQuery = useVersionControlModulesQuery;
function useVersionControlConfigQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.config() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlConfigQuery = useVersionControlConfigQuery;
function useVersionControlModuleQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.module(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.module({
                module: args.module,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlModuleQuery = useVersionControlModuleQuery;
function useVersionControlOsCoreQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.osCore(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.osCore({
                osId: args.osId,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlOsCoreQuery = useVersionControlOsCoreQuery;
function useVersionControlSetFactoryMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.setFactory(msg, fee, memo, funds);
    }, options);
}
exports.useVersionControlSetFactoryMutation = useVersionControlSetFactoryMutation;
function useVersionControlSetAdminMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.setAdmin(msg, fee, memo, funds);
    }, options);
}
exports.useVersionControlSetAdminMutation = useVersionControlSetAdminMutation;
function useVersionControlAddOsMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.addOs(msg, fee, memo, funds);
    }, options);
}
exports.useVersionControlAddOsMutation = useVersionControlAddOsMutation;
function useVersionControlAddModulesMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.addModules(msg, fee, memo, funds);
    }, options);
}
exports.useVersionControlAddModulesMutation = useVersionControlAddModulesMutation;
function useVersionControlRemoveModuleMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.removeModule(msg, fee, memo, funds);
    }, options);
}
exports.useVersionControlRemoveModuleMutation = useVersionControlRemoveModuleMutation;
