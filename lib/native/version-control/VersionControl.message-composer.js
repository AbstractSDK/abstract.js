"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VersionControlMessageComposer = void 0;
var tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var encoding_1 = require("@cosmjs/encoding");
var VersionControlMessageComposer = /** @class */ (function () {
    function VersionControlMessageComposer(sender, contractAddress) {
        var _this = this;
        this.removeModule = function (_a, funds) {
            var module = _a.module;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        remove_module: {
                            module: module,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.addModules = function (_a, funds) {
            var modules = _a.modules;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        add_modules: {
                            modules: modules,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.addOs = function (_a, funds) {
            var core = _a.core, osId = _a.osId;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        add_os: {
                            core: core,
                            os_id: osId,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.setAdmin = function (_a, funds) {
            var newAdmin = _a.newAdmin;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        set_admin: {
                            new_admin: newAdmin,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.setFactory = function (_a, funds) {
            var newFactory = _a.newFactory;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        set_factory: {
                            new_factory: newFactory,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.removeModule = this.removeModule.bind(this);
        this.addModules = this.addModules.bind(this);
        this.addOs = this.addOs.bind(this);
        this.setAdmin = this.setAdmin.bind(this);
        this.setFactory = this.setFactory.bind(this);
    }
    return VersionControlMessageComposer;
}());
exports.VersionControlMessageComposer = VersionControlMessageComposer;
