"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCw3FlexMultisigProposeMutation = exports.useCw3FlexMultisigVoteMutation = exports.useCw3FlexMultisigExecuteMutation = exports.useCw3FlexMultisigCloseMutation = exports.useCw3FlexMultisigMemberChangedHookMutation = exports.useCw3FlexMultisigThresholdQuery = exports.useCw3FlexMultisigProposalQuery = exports.useCw3FlexMultisigListProposalsQuery = exports.useCw3FlexMultisigReverseProposalsQuery = exports.useCw3FlexMultisigVoteQuery = exports.useCw3FlexMultisigListVotesQuery = exports.useCw3FlexMultisigVoterQuery = exports.useCw3FlexMultisigListVotersQuery = exports.cw3FlexMultisigQueries = exports.cw3FlexMultisigQueryKeys = void 0;
var tslib_1 = require("tslib");
var react_query_1 = require("@tanstack/react-query");
exports.cw3FlexMultisigQueryKeys = {
    contract: [
        {
            contract: 'cw3FlexMultisig',
        },
    ],
    address: function (contractAddress) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.contract[0]), { address: contractAddress })];
    },
    threshold: function (contractAddress, args) {
        return [
            tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'threshold', args: args }),
        ];
    },
    proposal: function (contractAddress, args) {
        return [
            tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'proposal', args: args }),
        ];
    },
    listProposals: function (contractAddress, args) {
        return [
            tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'list_proposals', args: args }),
        ];
    },
    reverseProposals: function (contractAddress, args) {
        return [
            tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'reverse_proposals', args: args }),
        ];
    },
    vote: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'vote', args: args })];
    },
    listVotes: function (contractAddress, args) {
        return [
            tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'list_votes', args: args }),
        ];
    },
    voter: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'voter', args: args })];
    },
    listVoters: function (contractAddress, args) {
        return [
            tslib_1.__assign(tslib_1.__assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'list_voters', args: args }),
        ];
    },
};
exports.cw3FlexMultisigQueries = {
    threshold: function (_a) {
        var client = _a.client, options = _a.options;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.threshold(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: function () { return (client ? client.threshold() : Promise.reject(new Error('Invalid client'))); } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
    proposal: function (_a) {
        var client = _a.client, options = _a.options, args = _a.args;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.proposal(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: function () {
                return client
                    ? client.proposal({
                        proposalId: args.proposalId,
                    })
                    : Promise.reject(new Error('Invalid client'));
            } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
    listProposals: function (_a) {
        var client = _a.client, options = _a.options, args = _a.args;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.listProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: function () {
                return client
                    ? client.listProposals({
                        limit: args.limit,
                        startAfter: args.startAfter,
                    })
                    : Promise.reject(new Error('Invalid client'));
            } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
    reverseProposals: function (_a) {
        var client = _a.client, options = _a.options, args = _a.args;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.reverseProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: function () {
                return client
                    ? client.reverseProposals({
                        limit: args.limit,
                        startBefore: args.startBefore,
                    })
                    : Promise.reject(new Error('Invalid client'));
            } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
    vote: function (_a) {
        var client = _a.client, options = _a.options, args = _a.args;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.vote(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: function () {
                return client
                    ? client.queryVote({
                        proposalId: args.proposalId,
                        voter: args.voter,
                    })
                    : Promise.reject(new Error('Invalid client'));
            } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
    listVotes: function (_a) {
        var client = _a.client, options = _a.options, args = _a.args;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.listVotes(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: function () {
                return client
                    ? client.listVotes({
                        limit: args.limit,
                        proposalId: args.proposalId,
                        startAfter: args.startAfter,
                    })
                    : Promise.reject(new Error('Invalid client'));
            } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
    voter: function (_a) {
        var client = _a.client, options = _a.options, args = _a.args;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.voter(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: function () {
                return client
                    ? client.voter({
                        address: args.address,
                    })
                    : Promise.reject(new Error('Invalid client'));
            } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
    listVoters: function (_a) {
        var client = _a.client, options = _a.options, args = _a.args;
        return (tslib_1.__assign(tslib_1.__assign({ queryKey: exports.cw3FlexMultisigQueryKeys.listVoters(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: function () {
                return client
                    ? client.listVoters({
                        limit: args.limit,
                        startAfter: args.startAfter,
                    })
                    : Promise.reject(new Error('Invalid client'));
            } }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
    },
};
function useCw3FlexMultisigListVotersQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.listVoters(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.listVoters({
                limit: args.limit,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigListVotersQuery = useCw3FlexMultisigListVotersQuery;
function useCw3FlexMultisigVoterQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.voter(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.voter({
                address: args.address,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigVoterQuery = useCw3FlexMultisigVoterQuery;
function useCw3FlexMultisigListVotesQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.listVotes(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.listVotes({
                limit: args.limit,
                proposalId: args.proposalId,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigListVotesQuery = useCw3FlexMultisigListVotesQuery;
function useCw3FlexMultisigVoteQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.vote(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.queryVote({
                proposalId: args.proposalId,
                voter: args.voter,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigVoteQuery = useCw3FlexMultisigVoteQuery;
function useCw3FlexMultisigReverseProposalsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.reverseProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.reverseProposals({
                limit: args.limit,
                startBefore: args.startBefore,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigReverseProposalsQuery = useCw3FlexMultisigReverseProposalsQuery;
function useCw3FlexMultisigListProposalsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.listProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.listProposals({
                limit: args.limit,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigListProposalsQuery = useCw3FlexMultisigListProposalsQuery;
function useCw3FlexMultisigProposalQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.proposal(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.proposal({
                proposalId: args.proposalId,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigProposalQuery = useCw3FlexMultisigProposalQuery;
function useCw3FlexMultisigThresholdQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.threshold(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.threshold() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigThresholdQuery = useCw3FlexMultisigThresholdQuery;
function useCw3FlexMultisigMemberChangedHookMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.memberChangedHook(msg, fee, memo, funds);
    }, options);
}
exports.useCw3FlexMultisigMemberChangedHookMutation = useCw3FlexMultisigMemberChangedHookMutation;
function useCw3FlexMultisigCloseMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.close(msg, fee, memo, funds);
    }, options);
}
exports.useCw3FlexMultisigCloseMutation = useCw3FlexMultisigCloseMutation;
function useCw3FlexMultisigExecuteMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.execute(msg, fee, memo, funds);
    }, options);
}
exports.useCw3FlexMultisigExecuteMutation = useCw3FlexMultisigExecuteMutation;
function useCw3FlexMultisigVoteMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.vote(msg, fee, memo, funds);
    }, options);
}
exports.useCw3FlexMultisigVoteMutation = useCw3FlexMultisigVoteMutation;
function useCw3FlexMultisigProposeMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.propose(msg, fee, memo, funds);
    }, options);
}
exports.useCw3FlexMultisigProposeMutation = useCw3FlexMultisigProposeMutation;
