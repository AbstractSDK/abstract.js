"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useManagerExecOnModuleMutation = exports.useManagerUpdateModuleAddressesMutation = exports.useManagerInstallModuleMutation = exports.useManagerRegisterModuleMutation = exports.useManagerRemoveModuleMutation = exports.useManagerUpgradeMutation = exports.useManagerUpdateInfoMutation = exports.useManagerSetRootMutation = exports.useManagerSuspendOsMutation = exports.useManagerEnableIBCMutation = exports.useManagerModuleVersionsQuery = exports.useManagerModuleAddressesQuery = exports.useManagerModuleInfosQuery = exports.useManagerConfigQuery = exports.useManagerInfoQuery = exports.managerQueryKeys = void 0;
var tslib_1 = require("tslib");
var react_query_1 = require("@tanstack/react-query");
exports.managerQueryKeys = {
    contract: [
        {
            contract: 'manager',
        },
    ],
    address: function (contractAddress) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.managerQueryKeys.contract[0]), { address: contractAddress })];
    },
    moduleVersions: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.managerQueryKeys.address(contractAddress)[0]), { method: 'module_versions', args: args })];
    },
    moduleAddresses: function (contractAddress, args) {
        return [
            tslib_1.__assign(tslib_1.__assign({}, exports.managerQueryKeys.address(contractAddress)[0]), { method: 'module_addresses', args: args }),
        ];
    },
    moduleInfos: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.managerQueryKeys.address(contractAddress)[0]), { method: 'module_infos', args: args })];
    },
    config: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.managerQueryKeys.address(contractAddress)[0]), { method: 'config', args: args })];
    },
    info: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.managerQueryKeys.address(contractAddress)[0]), { method: 'info', args: args })];
    },
};
function useManagerInfoQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.managerQueryKeys.info(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.info() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerInfoQuery = useManagerInfoQuery;
function useManagerConfigQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.managerQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.config() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerConfigQuery = useManagerConfigQuery;
function useManagerModuleInfosQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.managerQueryKeys.moduleInfos(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.moduleInfos({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerModuleInfosQuery = useManagerModuleInfosQuery;
function useManagerModuleAddressesQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.managerQueryKeys.moduleAddresses(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.moduleAddresses({
                ids: args.ids,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerModuleAddressesQuery = useManagerModuleAddressesQuery;
function useManagerModuleVersionsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.managerQueryKeys.moduleVersions(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.moduleVersions({
                ids: args.ids,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerModuleVersionsQuery = useManagerModuleVersionsQuery;
function useManagerEnableIBCMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.enableIBC(msg, fee, memo, funds);
    }, options);
}
exports.useManagerEnableIBCMutation = useManagerEnableIBCMutation;
function useManagerSuspendOsMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.suspendOs(msg, fee, memo, funds);
    }, options);
}
exports.useManagerSuspendOsMutation = useManagerSuspendOsMutation;
function useManagerSetRootMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.setRoot(msg, fee, memo, funds);
    }, options);
}
exports.useManagerSetRootMutation = useManagerSetRootMutation;
function useManagerUpdateInfoMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateInfo(msg, fee, memo, funds);
    }, options);
}
exports.useManagerUpdateInfoMutation = useManagerUpdateInfoMutation;
function useManagerUpgradeMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.upgrade(msg, fee, memo, funds);
    }, options);
}
exports.useManagerUpgradeMutation = useManagerUpgradeMutation;
function useManagerRemoveModuleMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.removeModule(msg, fee, memo, funds);
    }, options);
}
exports.useManagerRemoveModuleMutation = useManagerRemoveModuleMutation;
function useManagerRegisterModuleMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.registerModule(msg, fee, memo, funds);
    }, options);
}
exports.useManagerRegisterModuleMutation = useManagerRegisterModuleMutation;
function useManagerInstallModuleMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.installModule(msg, fee, memo, funds);
    }, options);
}
exports.useManagerInstallModuleMutation = useManagerInstallModuleMutation;
function useManagerUpdateModuleAddressesMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateModuleAddresses(msg, fee, memo, funds);
    }, options);
}
exports.useManagerUpdateModuleAddressesMutation = useManagerUpdateModuleAddressesMutation;
function useManagerExecOnModuleMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.execOnModule(msg, fee, memo, funds);
    }, options);
}
exports.useManagerExecOnModuleMutation = useManagerExecOnModuleMutation;
