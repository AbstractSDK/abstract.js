"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProxyMessageComposer = void 0;
var tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
var encoding_1 = require("@cosmjs/encoding");
var ProxyMessageComposer = /** @class */ (function () {
    function ProxyMessageComposer(sender, contractAddress) {
        var _this = this;
        this.setAdmin = function (_a, funds) {
            var admin = _a.admin;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        set_admin: {
                            admin: admin,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.moduleAction = function (_a, funds) {
            var msgs = _a.msgs;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        module_action: {
                            msgs: msgs,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.ibcAction = function (_a, funds) {
            var msgs = _a.msgs;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        ibc_action: {
                            msgs: msgs,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.addModule = function (_a, funds) {
            var module = _a.module;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        add_module: {
                            module: module,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.removeModule = function (_a, funds) {
            var module = _a.module;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        remove_module: {
                            module: module,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.updateAssets = function (_a, funds) {
            var toAdd = _a.toAdd, toRemove = _a.toRemove;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: tx_1.MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: (0, encoding_1.toUtf8)(JSON.stringify({
                        update_assets: {
                            to_add: toAdd,
                            to_remove: toRemove,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.setAdmin = this.setAdmin.bind(this);
        this.moduleAction = this.moduleAction.bind(this);
        this.ibcAction = this.ibcAction.bind(this);
        this.addModule = this.addModule.bind(this);
        this.removeModule = this.removeModule.bind(this);
        this.updateAssets = this.updateAssets.bind(this);
    }
    return ProxyMessageComposer;
}());
exports.ProxyMessageComposer = ProxyMessageComposer;
