"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useProxySetAdminMutation = exports.useProxyModuleActionMutation = exports.useProxyIbcActionMutation = exports.useProxyAddModuleMutation = exports.useProxyRemoveModuleMutation = exports.useProxyUpdateAssetsMutation = exports.useProxyConfigQuery = exports.useProxyTotalValueQuery = exports.useProxyTokenValueQuery = exports.useProxyHoldingValueQuery = exports.useProxyHoldingAmountQuery = exports.useProxyAssetConfigQuery = exports.useProxyAssetsQuery = exports.useProxyCheckValidityQuery = exports.useProxyBaseAssetQuery = exports.proxyQueryKeys = void 0;
var tslib_1 = require("tslib");
var react_query_1 = require("@tanstack/react-query");
exports.proxyQueryKeys = {
    contract: [
        {
            contract: 'proxy',
        },
    ],
    address: function (contractAddress) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.contract[0]), { address: contractAddress })];
    },
    config: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'config', args: args })];
    },
    totalValue: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'total_value', args: args })];
    },
    tokenValue: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'token_value', args: args })];
    },
    holdingValue: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'holding_value', args: args })];
    },
    holdingAmount: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'holding_amount', args: args })];
    },
    assetConfig: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'asset_config', args: args })];
    },
    assets: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'assets', args: args })];
    },
    checkValidity: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'check_validity', args: args })];
    },
    baseAsset: function (contractAddress, args) {
        return [tslib_1.__assign(tslib_1.__assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: 'base_asset', args: args })];
    },
};
function useProxyBaseAssetQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.baseAsset(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.baseAsset() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyBaseAssetQuery = useProxyBaseAssetQuery;
function useProxyCheckValidityQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.checkValidity(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.checkValidity() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyCheckValidityQuery = useProxyCheckValidityQuery;
function useProxyAssetsQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.assets(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.assets({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyAssetsQuery = useProxyAssetsQuery;
function useProxyAssetConfigQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.assetConfig(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.assetConfig({
                identifier: args.identifier,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyAssetConfigQuery = useProxyAssetConfigQuery;
function useProxyHoldingAmountQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.holdingAmount(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.holdingAmount({
                identifier: args.identifier,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyHoldingAmountQuery = useProxyHoldingAmountQuery;
function useProxyHoldingValueQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.holdingValue(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.holdingValue({
                identifier: args.identifier,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyHoldingValueQuery = useProxyHoldingValueQuery;
function useProxyTokenValueQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.tokenValue(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.tokenValue({
                amount: args.amount,
                identifier: args.identifier,
            })
            : Promise.reject(new Error('Invalid client'));
    }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyTokenValueQuery = useProxyTokenValueQuery;
function useProxyTotalValueQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.totalValue(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.totalValue() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyTotalValueQuery = useProxyTotalValueQuery;
function useProxyConfigQuery(_a) {
    var client = _a.client, options = _a.options;
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.config() : Promise.reject(new Error('Invalid client'))); }, tslib_1.__assign(tslib_1.__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyConfigQuery = useProxyConfigQuery;
function useProxyUpdateAssetsMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateAssets(msg, fee, memo, funds);
    }, options);
}
exports.useProxyUpdateAssetsMutation = useProxyUpdateAssetsMutation;
function useProxyRemoveModuleMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.removeModule(msg, fee, memo, funds);
    }, options);
}
exports.useProxyRemoveModuleMutation = useProxyRemoveModuleMutation;
function useProxyAddModuleMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.addModule(msg, fee, memo, funds);
    }, options);
}
exports.useProxyAddModuleMutation = useProxyAddModuleMutation;
function useProxyIbcActionMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.ibcAction(msg, fee, memo, funds);
    }, options);
}
exports.useProxyIbcActionMutation = useProxyIbcActionMutation;
function useProxyModuleActionMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.moduleAction(msg, fee, memo, funds);
    }, options);
}
exports.useProxyModuleActionMutation = useProxyModuleActionMutation;
function useProxySetAdminMutation(options) {
    return (0, react_query_1.useMutation)(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.setAdmin(msg, fee, memo, funds);
    }, options);
}
exports.useProxySetAdminMutation = useProxySetAdminMutation;
