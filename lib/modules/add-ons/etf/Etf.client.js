"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EtfClient = exports.EtfQueryClient = void 0;
var tslib_1 = require("tslib");
var EtfQueryClient = /** @class */ (function () {
    function EtfQueryClient(client, contractAddress) {
        var _this = this;
        this.state = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.client.queryContractSmart(this.contractAddress, {
                        state: {},
                    })];
            });
        }); };
        this.configValidity = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.client.queryContractSmart(this.contractAddress, {
                        config_validity: {},
                    })];
            });
        }); };
        this.client = client;
        this.contractAddress = contractAddress;
        this.state = this.state.bind(this);
        this.configValidity = this.configValidity.bind(this);
    }
    return EtfQueryClient;
}());
exports.EtfQueryClient = EtfQueryClient;
var EtfClient = /** @class */ (function (_super) {
    tslib_1.__extends(EtfClient, _super);
    function EtfClient(client, sender, contractAddress) {
        var _this = _super.call(this, client, contractAddress) || this;
        _this.base = function (execMsg, fee, memo, funds) {
            if (fee === void 0) { fee = 'auto'; }
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.client.execute(this.sender, this.contractAddress, {
                                base: execMsg,
                            }, fee, memo, funds)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        _this.receive = function (_a, fee, memo, funds) {
            var amount = _a.amount, msg = _a.msg, sender = _a.sender;
            if (fee === void 0) { fee = 'auto'; }
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.client.execute(this.sender, this.contractAddress, {
                                receive: {
                                    amount: amount,
                                    msg: msg,
                                    sender: sender,
                                },
                            }, fee, memo, funds)];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        _this.provideLiquidity = function (_a, fee, memo, funds) {
            var asset = _a.asset;
            if (fee === void 0) { fee = 'auto'; }
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.client.execute(this.sender, this.contractAddress, {
                                provide_liquidity: {
                                    asset: asset,
                                },
                            }, fee, memo, funds)];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        _this.updatePool = function (_a, fee, memo, funds) {
            var assetsToAdd = _a.assetsToAdd, assetsToRemove = _a.assetsToRemove, depositAsset = _a.depositAsset;
            if (fee === void 0) { fee = 'auto'; }
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.client.execute(this.sender, this.contractAddress, {
                                update_pool: {
                                    assets_to_add: assetsToAdd,
                                    assets_to_remove: assetsToRemove,
                                    deposit_asset: depositAsset,
                                },
                            }, fee, memo, funds)];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        _this.import = function (fee, memo, funds) {
            if (fee === void 0) { fee = 'auto'; }
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.client.execute(this.sender, this.contractAddress, {
                                import: {},
                            }, fee, memo, funds)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        _this.setFee = function (_a, fee, memo, funds) {
            var newFee = _a.newFee;
            if (fee === void 0) { fee = 'auto'; }
            return tslib_1.__awaiter(_this, void 0, void 0, function () {
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.client.execute(this.sender, this.contractAddress, {
                                set_fee: {
                                    newFee: newFee,
                                },
                            }, fee, memo, funds)];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        _this.client = client;
        _this.sender = sender;
        _this.contractAddress = contractAddress;
        _this.base = _this.base.bind(_this);
        _this.receive = _this.receive.bind(_this);
        _this.provideLiquidity = _this.provideLiquidity.bind(_this);
        _this.updatePool = _this.updatePool.bind(_this);
        _this.import = _this.import.bind(_this);
        _this.setFee = _this.setFee.bind(_this);
        return _this;
    }
    return EtfClient;
}(EtfQueryClient));
exports.EtfClient = EtfClient;
