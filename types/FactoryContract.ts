/**
 * This file was automatically generated by cosmwasm-typescript-gen.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export interface ConfigResponse {
  creation_fee: number;
  memory_contract: string;
  module_factory_address: string;
  next_os_id: number;
  owner: string;
  version_control_contract: string;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  creation_fee: number;
  memory_address: string;
  module_factory_address: string;
  version_control_address: string;
  [k: string]: unknown;
}
export interface FactoryReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
}
export class FactoryQueryClient implements FactoryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateConfig: ({
    admin,
    creationFee,
    memoryContract,
    moduleFactoryAddress,
    versionControlContract
  }: {
    admin?: string;
    creationFee?: number;
    memoryContract?: string;
    moduleFactoryAddress?: string;
    versionControlContract?: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  createOs: ({
    governance
  }: {
    governance: GovernanceDetails;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class FactoryClient extends FactoryQueryClient implements FactoryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateConfig = this.updateConfig.bind(this);
    this.createOs = this.createOs.bind(this);
  }

  updateConfig = async ({
    admin,
    creationFee,
    memoryContract,
    moduleFactoryAddress,
    versionControlContract
  }: {
    admin?: string;
    creationFee?: number;
    memoryContract?: string;
    moduleFactoryAddress?: string;
    versionControlContract?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        creation_fee: creationFee,
        memory_contract: memoryContract,
        module_factory_address: moduleFactoryAddress,
        version_control_contract: versionControlContract
      }
    }, fee, memo, funds);
  };
  createOs = async ({
    governance
  }: {
    governance: GovernanceDetails;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_os: {
        governance
      }
    }, fee, memo, funds);
  };
}