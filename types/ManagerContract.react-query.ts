/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.14.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { useQuery, UseQueryOptions } from "react-query";
import { AssetInfoBase_for_Addr, Addr, ConfigResponse, Config, CosmosMsg_for_Empty, BankMsg, Uint128, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Coin, Empty, IbcTimeout, IbcTimeoutBlock, HoldingAmountResponse, HoldingValueResponse, InstantiateMsg, ValueRef, Decimal, ProxyAsset, AssetBase_for_Addr, TotalValueResponse, VaultAssetConfigResponse } from "./ManagerContract";
import { ManagerQueryClient } from "./ManagerContract";
export interface ManagerVaultAssetConfigQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<VaultAssetConfigResponse, Error, VaultAssetConfigResponse, (string | undefined)[]>;
  args: {
    identifier: string;
  };
}
export function useManagerVaultAssetConfigQuery({
  client,
  args,
  options
}: ManagerVaultAssetConfigQuery) {
  return useQuery<VaultAssetConfigResponse, Error, VaultAssetConfigResponse, (string | undefined)[]>(["managerVaultAssetConfig", client.contractAddress], () => client.vaultAssetConfig({
    identifier: args.identifier
  }), options);
}
export interface ManagerHoldingAmountQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<HoldingAmountResponse, Error, HoldingAmountResponse, (string | undefined)[]>;
  args: {
    identifier: string;
  };
}
export function useManagerHoldingAmountQuery({
  client,
  args,
  options
}: ManagerHoldingAmountQuery) {
  return useQuery<HoldingAmountResponse, Error, HoldingAmountResponse, (string | undefined)[]>(["managerHoldingAmount", client.contractAddress], () => client.holdingAmount({
    identifier: args.identifier
  }), options);
}
export interface ManagerHoldingValueQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<HoldingValueResponse, Error, HoldingValueResponse, (string | undefined)[]>;
  args: {
    identifier: string;
  };
}
export function useManagerHoldingValueQuery({
  client,
  args,
  options
}: ManagerHoldingValueQuery) {
  return useQuery<HoldingValueResponse, Error, HoldingValueResponse, (string | undefined)[]>(["managerHoldingValue", client.contractAddress], () => client.holdingValue({
    identifier: args.identifier
  }), options);
}
export interface ManagerTotalValueQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<TotalValueResponse, Error, TotalValueResponse, (string | undefined)[]>;
}
export function useManagerTotalValueQuery({
  client,
  options
}: ManagerTotalValueQuery) {
  return useQuery<TotalValueResponse, Error, TotalValueResponse, (string | undefined)[]>(["managerTotalValue", client.contractAddress], () => client.totalValue(), options);
}
export interface ManagerConfigQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>;
}
export function useManagerConfigQuery({
  client,
  options
}: ManagerConfigQuery) {
  return useQuery<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>(["managerConfig", client.contractAddress], () => client.config(), options);
}