/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.14.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export type Addr = string;
export interface Config {
  module_factory_address: Addr;
  subscription_address: Addr;
  version_control_address: Addr;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  os_id: number;
  [k: string]: unknown;
}
export interface ManagerReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  totalValue: () => Promise<TotalValueResponse>;
  holdingValue: ({
    identifier
  }: {
    identifier: string;
  }) => Promise<HoldingValueResponse>;
  holdingAmount: ({
    identifier
  }: {
    identifier: string;
  }) => Promise<HoldingAmountResponse>;
  vaultAssetConfig: ({
    identifier
  }: {
    identifier: string;
  }) => Promise<VaultAssetConfigResponse>;
}
export class ManagerQueryClient implements ManagerReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.totalValue = this.totalValue.bind(this);
    this.holdingValue = this.holdingValue.bind(this);
    this.holdingAmount = this.holdingAmount.bind(this);
    this.vaultAssetConfig = this.vaultAssetConfig.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  totalValue = async (): Promise<TotalValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_value: {}
    });
  };
  holdingValue = async ({
    identifier
  }: {
    identifier: string;
  }): Promise<HoldingValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      holding_value: {
        identifier
      }
    });
  };
  holdingAmount = async ({
    identifier
  }: {
    identifier: string;
  }): Promise<HoldingAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      holding_amount: {
        identifier
      }
    });
  };
  vaultAssetConfig = async ({
    identifier
  }: {
    identifier: string;
  }): Promise<VaultAssetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      vault_asset_config: {
        identifier
      }
    });
  };
}
export interface ManagerInterface extends ManagerReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setAdmin: ({
    admin
  }: {
    admin: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  dAppAction: ({
    msgs
  }: {
    msgs: CosmosMsg_for_Empty[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  addDApp: ({
    dapp
  }: {
    dapp: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  removeDApp: ({
    dapp
  }: {
    dapp: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
  updateAssets: ({
    toAdd,
    toRemove
  }: {
    toAdd: ProxyAsset[];
    toRemove: AssetInfoBase_for_Addr[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export class ManagerClient extends ManagerQueryClient implements ManagerInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAdmin = this.setAdmin.bind(this);
    this.dAppAction = this.dAppAction.bind(this);
    this.addDApp = this.addDApp.bind(this);
    this.removeDApp = this.removeDApp.bind(this);
    this.updateAssets = this.updateAssets.bind(this);
  }

  setAdmin = async ({
    admin
  }: {
    admin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_admin: {
        admin
      }
    }, fee, memo, funds);
  };
  dAppAction = async ({
    msgs
  }: {
    msgs: CosmosMsg_for_Empty[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      d_app_action: {
        msgs
      }
    }, fee, memo, funds);
  };
  addDApp = async ({
    dapp
  }: {
    dapp: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_d_app: {
        dapp
      }
    }, fee, memo, funds);
  };
  removeDApp = async ({
    dapp
  }: {
    dapp: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_d_app: {
        dapp
      }
    }, fee, memo, funds);
  };
  updateAssets = async ({
    toAdd,
    toRemove
  }: {
    toAdd: ProxyAsset[];
    toRemove: AssetInfoBase_for_Addr[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: readonly Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_assets: {
        to_add: toAdd,
        to_remove: toRemove
      }
    }, fee, memo, funds);
  };
}