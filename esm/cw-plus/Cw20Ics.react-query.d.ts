/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee } from '@cosmjs/amino';
import { AdminResponse, AllowedResponse, ChannelResponse, Coin, ConfigResponse, Cw20ReceiveMsg, TransferMsg, AllowMsg, ListAllowedResponse, ListChannelsResponse, PortResponse } from './Cw20Ics.types';
import { Cw20IcsQueryClient, Cw20IcsClient } from './Cw20Ics.client';
export declare const cw20IcsQueryKeys: {
    contract: readonly [{
        readonly contract: "cw20Ics";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
    port: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "port";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
    listChannels: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "list_channels";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
    channel: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "channel";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
    admin: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "admin";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
    allowed: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "allowed";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
    listAllowed: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "list_allowed";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20Ics";
    }];
};
export interface Cw20IcsReactQuery<TResponse, TData = TResponse> {
    client: Cw20IcsQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Cw20IcsListAllowedQuery<TData> extends Cw20IcsReactQuery<ListAllowedResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw20IcsListAllowedQuery<TData = ListAllowedResponse>({ client, args, options, }: Cw20IcsListAllowedQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20IcsAllowedQuery<TData> extends Cw20IcsReactQuery<AllowedResponse, TData> {
    args: {
        contract: string;
    };
}
export declare function useCw20IcsAllowedQuery<TData = AllowedResponse>({ client, args, options, }: Cw20IcsAllowedQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20IcsAdminQuery<TData> extends Cw20IcsReactQuery<AdminResponse, TData> {
}
export declare function useCw20IcsAdminQuery<TData = AdminResponse>({ client, options, }: Cw20IcsAdminQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20IcsConfigQuery<TData> extends Cw20IcsReactQuery<ConfigResponse, TData> {
}
export declare function useCw20IcsConfigQuery<TData = ConfigResponse>({ client, options, }: Cw20IcsConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20IcsChannelQuery<TData> extends Cw20IcsReactQuery<ChannelResponse, TData> {
    args: {
        id: string;
    };
}
export declare function useCw20IcsChannelQuery<TData = ChannelResponse>({ client, args, options, }: Cw20IcsChannelQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20IcsListChannelsQuery<TData> extends Cw20IcsReactQuery<ListChannelsResponse, TData> {
}
export declare function useCw20IcsListChannelsQuery<TData = ListChannelsResponse>({ client, options, }: Cw20IcsListChannelsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20IcsPortQuery<TData> extends Cw20IcsReactQuery<PortResponse, TData> {
}
export declare function useCw20IcsPortQuery<TData = PortResponse>({ client, options, }: Cw20IcsPortQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20IcsUpdateAdminMutation {
    client: Cw20IcsClient;
    msg: {
        admin: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20IcsUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsUpdateAdminMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20IcsUpdateAdminMutation, unknown>;
export interface Cw20IcsAllowMutation {
    client: Cw20IcsClient;
    msg: AllowMsg;
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20IcsAllowMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsAllowMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20IcsAllowMutation, unknown>;
export interface Cw20IcsTransferMutation {
    client: Cw20IcsClient;
    msg: TransferMsg;
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20IcsTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsTransferMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20IcsTransferMutation, unknown>;
export interface Cw20IcsReceiveMutation {
    client: Cw20IcsClient;
    msg: Cw20ReceiveMsg;
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20IcsReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsReceiveMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20IcsReceiveMutation, unknown>;
