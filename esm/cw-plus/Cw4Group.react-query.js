/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { __assign } from "tslib";
import { useQuery, useMutation } from '@tanstack/react-query';
export var cw4GroupQueryKeys = {
    contract: [
        {
            contract: 'cw4Group',
        },
    ],
    address: function (contractAddress) {
        return [__assign(__assign({}, cw4GroupQueryKeys.contract[0]), { address: contractAddress })];
    },
    admin: function (contractAddress, args) {
        return [__assign(__assign({}, cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'admin', args: args })];
    },
    totalWeight: function (contractAddress, args) {
        return [__assign(__assign({}, cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'total_weight', args: args })];
    },
    listMembers: function (contractAddress, args) {
        return [__assign(__assign({}, cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'list_members', args: args })];
    },
    member: function (contractAddress, args) {
        return [__assign(__assign({}, cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'member', args: args })];
    },
    hooks: function (contractAddress, args) {
        return [__assign(__assign({}, cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'hooks', args: args })];
    },
};
export function useCw4GroupHooksQuery(_a) {
    var client = _a.client, options = _a.options;
    return useQuery(cw4GroupQueryKeys.hooks(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.hooks() : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw4GroupMemberQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return useQuery(cw4GroupQueryKeys.member(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.member({
                addr: args.addr,
                atHeight: args.atHeight,
            })
            : Promise.reject(new Error('Invalid client'));
    }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw4GroupListMembersQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return useQuery(cw4GroupQueryKeys.listMembers(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.listMembers({
                limit: args.limit,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client'));
    }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw4GroupTotalWeightQuery(_a) {
    var client = _a.client, options = _a.options;
    return useQuery(cw4GroupQueryKeys.totalWeight(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.totalWeight() : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw4GroupAdminQuery(_a) {
    var client = _a.client, options = _a.options;
    return useQuery(cw4GroupQueryKeys.admin(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.admin() : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw4GroupRemoveHookMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.removeHook(msg, fee, memo, funds);
    }, options);
}
export function useCw4GroupAddHookMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.addHook(msg, fee, memo, funds);
    }, options);
}
export function useCw4GroupUpdateMembersMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateMembers(msg, fee, memo, funds);
    }, options);
}
export function useCw4GroupUpdateAdminMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateAdmin(msg, fee, memo, funds);
    }, options);
}
