/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { __assign } from "tslib";
import { useQuery, useMutation } from '@tanstack/react-query';
export var cw20IcsQueryKeys = {
    contract: [
        {
            contract: 'cw20Ics',
        },
    ],
    address: function (contractAddress) {
        return [__assign(__assign({}, cw20IcsQueryKeys.contract[0]), { address: contractAddress })];
    },
    port: function (contractAddress, args) {
        return [__assign(__assign({}, cw20IcsQueryKeys.address(contractAddress)[0]), { method: 'port', args: args })];
    },
    listChannels: function (contractAddress, args) {
        return [__assign(__assign({}, cw20IcsQueryKeys.address(contractAddress)[0]), { method: 'list_channels', args: args })];
    },
    channel: function (contractAddress, args) {
        return [__assign(__assign({}, cw20IcsQueryKeys.address(contractAddress)[0]), { method: 'channel', args: args })];
    },
    config: function (contractAddress, args) {
        return [__assign(__assign({}, cw20IcsQueryKeys.address(contractAddress)[0]), { method: 'config', args: args })];
    },
    admin: function (contractAddress, args) {
        return [__assign(__assign({}, cw20IcsQueryKeys.address(contractAddress)[0]), { method: 'admin', args: args })];
    },
    allowed: function (contractAddress, args) {
        return [__assign(__assign({}, cw20IcsQueryKeys.address(contractAddress)[0]), { method: 'allowed', args: args })];
    },
    listAllowed: function (contractAddress, args) {
        return [__assign(__assign({}, cw20IcsQueryKeys.address(contractAddress)[0]), { method: 'list_allowed', args: args })];
    },
};
export function useCw20IcsListAllowedQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return useQuery(cw20IcsQueryKeys.listAllowed(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.listAllowed({
                limit: args.limit,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client'));
    }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw20IcsAllowedQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return useQuery(cw20IcsQueryKeys.allowed(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.allowed({
                contract: args.contract,
            })
            : Promise.reject(new Error('Invalid client'));
    }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw20IcsAdminQuery(_a) {
    var client = _a.client, options = _a.options;
    return useQuery(cw20IcsQueryKeys.admin(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.admin() : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw20IcsConfigQuery(_a) {
    var client = _a.client, options = _a.options;
    return useQuery(cw20IcsQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.config() : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw20IcsChannelQuery(_a) {
    var client = _a.client, args = _a.args, options = _a.options;
    return useQuery(cw20IcsQueryKeys.channel(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
        return client
            ? client.channel({
                id: args.id,
            })
            : Promise.reject(new Error('Invalid client'));
    }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw20IcsListChannelsQuery(_a) {
    var client = _a.client, options = _a.options;
    return useQuery(cw20IcsQueryKeys.listChannels(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.listChannels() : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw20IcsPortQuery(_a) {
    var client = _a.client, options = _a.options;
    return useQuery(cw20IcsQueryKeys.port(client === null || client === void 0 ? void 0 : client.contractAddress), function () { return (client ? client.port() : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useCw20IcsUpdateAdminMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.updateAdmin(msg, fee, memo, funds);
    }, options);
}
export function useCw20IcsAllowMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.allow(msg, fee, memo, funds);
    }, options);
}
export function useCw20IcsTransferMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.transfer(msg, fee, memo, funds);
    }, options);
}
export function useCw20IcsReceiveMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.receive(msg, fee, memo, funds);
    }, options);
}
