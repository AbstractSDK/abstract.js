/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx';
import { toUtf8 } from '@cosmjs/encoding';
var EtfMessageComposer = /** @class */ (function () {
    function EtfMessageComposer(sender, contractAddress) {
        var _this = this;
        this.base = function (funds) {
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        base: {},
                    })),
                    funds: funds,
                }),
            };
        };
        this.receive = function (_a, funds) {
            var amount = _a.amount, msg = _a.msg, sender = _a.sender;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        receive: {
                            amount: amount,
                            msg: msg,
                            sender: sender,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.provideLiquidity = function (_a, funds) {
            var asset = _a.asset;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        provide_liquidity: {
                            asset: asset,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.updatePool = function (_a, funds) {
            var assetsToAdd = _a.assetsToAdd, assetsToRemove = _a.assetsToRemove, depositAsset = _a.depositAsset;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        update_pool: {
                            assets_to_add: assetsToAdd,
                            assets_to_remove: assetsToRemove,
                            deposit_asset: depositAsset,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.import = function (funds) {
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        import: {},
                    })),
                    funds: funds,
                }),
            };
        };
        this.setFee = function (_a, funds) {
            var fee = _a.fee;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        set_fee: {
                            fee: fee,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.base = this.base.bind(this);
        this.receive = this.receive.bind(this);
        this.provideLiquidity = this.provideLiquidity.bind(this);
        this.updatePool = this.updatePool.bind(this);
        this.import = this.import.bind(this);
        this.setFee = this.setFee.bind(this);
    }
    return EtfMessageComposer;
}());
export { EtfMessageComposer };
