/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { __assign } from "tslib";
import { useQuery, useMutation } from '@tanstack/react-query';
export var dexQueryKeys = {
    contract: [
        {
            contract: 'dex',
        },
    ],
    address: function (contractAddress) {
        return [__assign(__assign({}, dexQueryKeys.contract[0]), { address: contractAddress })];
    },
    api: function (contractAddress, args) {
        return [__assign(__assign({}, dexQueryKeys.address(contractAddress)[0]), { method: 'api', args: args })];
    },
    base: function (contractAddress, args) {
        return [__assign(__assign({}, dexQueryKeys.address(contractAddress)[0]), { method: 'base', args: args })];
    },
};
export function useDexApiQuery(_a) {
    var client = _a.client, options = _a.options, args = _a.args;
    return useQuery(dexQueryKeys.api(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () { return (client ? client.api(args) : Promise.reject(new Error('Invalid client'))); }, __assign(__assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
export function useDexConfigureMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.configure(msg, fee, memo, funds);
    }, options);
}
export function useDexRequestMutation(options) {
    return useMutation(function (_a) {
        var client = _a.client, msg = _a.msg, _b = _a.args, _c = _b === void 0 ? {} : _b, fee = _c.fee, memo = _c.memo, funds = _c.funds;
        return client.request(msg, fee, memo, funds);
    }, options);
}
