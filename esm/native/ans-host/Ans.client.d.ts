/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import { PoolIdBaseForString, UniquePoolId, UncheckedContractEntry, UncheckedChannelEntry, DexAssetPairing, ContractEntry, ChannelEntry, AssetPairingFilter, PoolMetadataFilter, AssetListResponse, AssetsResponse, ChannelListResponse, ChannelsResponse, ContractListResponse, ContractsResponse, PoolIdListResponse, PoolMetadataListResponse, PoolMetadatasResponse, PoolsResponse, RegisteredDexesResponse } from './Ans.types';
export interface AnsReadOnlyInterface {
    contractAddress: string;
    assets: ({ names }: {
        names: string[];
    }) => Promise<AssetsResponse>;
    assetList: ({ pageSize, pageToken, }: {
        pageSize?: number;
        pageToken?: string;
    }) => Promise<AssetListResponse>;
    contracts: ({ names }: {
        names: ContractEntry[];
    }) => Promise<ContractsResponse>;
    contractList: ({ pageSize, pageToken, }: {
        pageSize?: number;
        pageToken?: ContractEntry;
    }) => Promise<ContractListResponse>;
    channels: ({ names }: {
        names: ChannelEntry[];
    }) => Promise<ChannelsResponse>;
    channelList: ({ pageSize, pageToken, }: {
        pageSize?: number;
        pageToken?: ChannelEntry;
    }) => Promise<ChannelListResponse>;
    registeredDexes: () => Promise<RegisteredDexesResponse>;
    pools: ({ keys }: {
        keys: DexAssetPairing[];
    }) => Promise<PoolsResponse>;
    poolList: ({ filter, pageSize, pageToken, }: {
        filter?: AssetPairingFilter;
        pageSize?: number;
        pageToken?: DexAssetPairing;
    }) => Promise<PoolIdListResponse>;
    poolMetadatas: ({ keys }: {
        keys: UniquePoolId[];
    }) => Promise<PoolMetadatasResponse>;
    poolMetadataList: ({ filter, pageSize, pageToken, }: {
        filter?: PoolMetadataFilter;
        pageSize?: number;
        pageToken?: UniquePoolId;
    }) => Promise<PoolMetadataListResponse>;
}
export declare class AnsQueryClient implements AnsReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    assets: ({ names }: {
        names: string[];
    }) => Promise<AssetsResponse>;
    assetList: ({ pageSize, pageToken, }: {
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    }) => Promise<AssetListResponse>;
    contracts: ({ names }: {
        names: ContractEntry[];
    }) => Promise<ContractsResponse>;
    contractList: ({ pageSize, pageToken, }: {
        pageSize?: number | undefined;
        pageToken?: ContractEntry | undefined;
    }) => Promise<ContractListResponse>;
    channels: ({ names }: {
        names: ChannelEntry[];
    }) => Promise<ChannelsResponse>;
    channelList: ({ pageSize, pageToken, }: {
        pageSize?: number | undefined;
        pageToken?: ChannelEntry | undefined;
    }) => Promise<ChannelListResponse>;
    registeredDexes: () => Promise<RegisteredDexesResponse>;
    pools: ({ keys }: {
        keys: DexAssetPairing[];
    }) => Promise<PoolsResponse>;
    poolList: ({ filter, pageSize, pageToken, }: {
        filter?: AssetPairingFilter | undefined;
        pageSize?: number | undefined;
        pageToken?: DexAssetPairing | undefined;
    }) => Promise<PoolIdListResponse>;
    poolMetadatas: ({ keys }: {
        keys: UniquePoolId[];
    }) => Promise<PoolMetadatasResponse>;
    poolMetadataList: ({ filter, pageSize, pageToken, }: {
        filter?: PoolMetadataFilter | undefined;
        pageSize?: number | undefined;
        pageToken?: number | undefined;
    }) => Promise<PoolMetadataListResponse>;
}
export interface AnsInterface extends AnsReadOnlyInterface {
    contractAddress: string;
    sender: string;
    updateContractAddresses: ({ toAdd, toRemove, }: {
        toAdd: UncheckedContractEntry[][];
        toRemove: UncheckedContractEntry[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateAssetAddresses: ({ toAdd, toRemove, }: {
        toAdd: string[][];
        toRemove: string[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateChannels: ({ toAdd, toRemove, }: {
        toAdd: UncheckedChannelEntry[][];
        toRemove: UncheckedChannelEntry[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateDexes: ({ toAdd, toRemove, }: {
        toAdd: string[];
        toRemove: string[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updatePools: ({ toAdd, toRemove, }: {
        toAdd: PoolIdBaseForString[][];
        toRemove: UniquePoolId[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setAdmin: ({ admin, }: {
        admin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class AnsClient extends AnsQueryClient implements AnsInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    updateContractAddresses: ({ toAdd, toRemove, }: {
        toAdd: UncheckedContractEntry[][];
        toRemove: UncheckedContractEntry[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateAssetAddresses: ({ toAdd, toRemove, }: {
        toAdd: string[][];
        toRemove: string[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateChannels: ({ toAdd, toRemove, }: {
        toAdd: UncheckedChannelEntry[][];
        toRemove: UncheckedChannelEntry[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateDexes: ({ toAdd, toRemove, }: {
        toAdd: string[];
        toRemove: string[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updatePools: ({ toAdd, toRemove, }: {
        toAdd: PoolIdBaseForString[][];
        toRemove: UniquePoolId[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setAdmin: ({ admin, }: {
        admin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
