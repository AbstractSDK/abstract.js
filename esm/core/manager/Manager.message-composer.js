/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx';
import { toUtf8 } from '@cosmjs/encoding';
var ManagerMessageComposer = /** @class */ (function () {
    function ManagerMessageComposer(sender, contractAddress) {
        var _this = this;
        this.execOnModule = function (_a, funds) {
            var execMsg = _a.execMsg, moduleId = _a.moduleId;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        exec_on_module: {
                            exec_msg: execMsg,
                            module_id: moduleId,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.updateModuleAddresses = function (_a, funds) {
            var toAdd = _a.toAdd, toRemove = _a.toRemove;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        update_module_addresses: {
                            to_add: toAdd,
                            to_remove: toRemove,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.installModule = function (_a, funds) {
            var initMsg = _a.initMsg, module = _a.module;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        install_module: {
                            init_msg: initMsg,
                            module: module,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.registerModule = function (_a, funds) {
            var module = _a.module, moduleAddr = _a.moduleAddr;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        register_module: {
                            module: module,
                            module_addr: moduleAddr,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.removeModule = function (_a, funds) {
            var moduleId = _a.moduleId;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        remove_module: {
                            module_id: moduleId,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.upgrade = function (_a, funds) {
            var modules = _a.modules;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        upgrade: {
                            modules: modules,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.updateInfo = function (_a, funds) {
            var description = _a.description, link = _a.link, name = _a.name;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        update_info: {
                            description: description,
                            link: link,
                            name: name,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.setRoot = function (_a, funds) {
            var governanceType = _a.governanceType, root = _a.root;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        set_root: {
                            governance_type: governanceType,
                            root: root,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.suspendOs = function (_a, funds) {
            var newStatus = _a.newStatus;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        suspend_os: {
                            new_status: newStatus,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.enableIBC = function (_a, funds) {
            var newStatus = _a.newStatus;
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        enable_i_b_c: {
                            new_status: newStatus,
                        },
                    })),
                    funds: funds,
                }),
            };
        };
        this.callback = function (funds) {
            return {
                typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                value: MsgExecuteContract.fromPartial({
                    sender: _this.sender,
                    contract: _this.contractAddress,
                    msg: toUtf8(JSON.stringify({
                        callback: {},
                    })),
                    funds: funds,
                }),
            };
        };
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.execOnModule = this.execOnModule.bind(this);
        this.updateModuleAddresses = this.updateModuleAddresses.bind(this);
        this.installModule = this.installModule.bind(this);
        this.registerModule = this.registerModule.bind(this);
        this.removeModule = this.removeModule.bind(this);
        this.upgrade = this.upgrade.bind(this);
        this.updateInfo = this.updateInfo.bind(this);
        this.setRoot = this.setRoot.bind(this);
        this.suspendOs = this.suspendOs.bind(this);
        this.enableIBC = this.enableIBC.bind(this);
        this.callback = this.callback.bind(this);
    }
    return ManagerMessageComposer;
}());
export { ManagerMessageComposer };
