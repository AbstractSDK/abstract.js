/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from '@cosmjs/amino'
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { toUtf8 } from '@cosmjs/encoding'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import {
  Action,
  AssetEntry,
  GovernanceDetailsForString,
  ModuleInstallConfig,
} from './Factory.types'

export interface FactoryMessage {
  contractAddress: string
  sender: string
  updateConfig: (
    {
      ansHostContract,
      moduleFactoryAddress,
      versionControlContract,
    }: {
      ansHostContract?: string
      moduleFactoryAddress?: string
      versionControlContract?: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  createAccount: (
    {
      baseAsset,
      description,
      governance,
      installModules,
      link,
      name,
      namespace,
    }: {
      baseAsset?: AssetEntry
      description?: string
      governance: GovernanceDetailsForString
      installModules: ModuleInstallConfig[]
      link?: string
      name: string
      namespace?: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateOwnership: (
    action: Action,
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
}
export class FactoryMessageComposer implements FactoryMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateConfig = this.updateConfig.bind(this)
    this.createAccount = this.createAccount.bind(this)
    this.updateOwnership = this.updateOwnership.bind(this)
  }

  updateConfig = (
    {
      ansHostContract,
      moduleFactoryAddress,
      versionControlContract,
    }: {
      ansHostContract?: string
      moduleFactoryAddress?: string
      versionControlContract?: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_config: {
        ans_host_contract: ansHostContract,
        module_factory_address: moduleFactoryAddress,
        version_control_contract: versionControlContract,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  createAccount = (
    {
      baseAsset,
      description,
      governance,
      installModules,
      link,
      name,
      namespace,
    }: {
      baseAsset?: AssetEntry
      description?: string
      governance: GovernanceDetailsForString
      installModules: ModuleInstallConfig[]
      link?: string
      name: string
      namespace?: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      create_account: {
        base_asset: baseAsset,
        description,
        governance,
        install_modules: installModules,
        link,
        name,
        namespace,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateOwnership = (
    action: Action,
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_ownership: action,
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
}
