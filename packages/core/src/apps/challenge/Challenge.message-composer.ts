/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from '@cosmjs/amino'
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'

import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import { AppExecuteMsg, AppExecuteMsgFactory } from '../..'
import {
  Threshold,
  Decimal,
  Uint64,
  InstantiateMsg,
  VoteConfig,
  ExecuteMsg,
  FriendForString,
  AccountTrace,
  ChainName,
  AssetEntry,
  StrikeStrategy,
  Uint128,
  UpdateFriendsOpKind,
  ChallengeRequest,
  FriendByAddrForString,
  AccountId,
  ChallengeEntryUpdate,
  Vote,
  QueryMsg,
  Addr,
  MigrateMsg,
  Timestamp,
  ProposalStatus,
  ProposalOutcome,
  ChallengeResponse,
  ChallengeEntryResponse,
  ProposalInfo,
  AdminStrikes,
  ChallengesResponse,
  FriendForAddr,
  FriendsResponse,
  FriendByAddrForAddr,
  ProposalsResponse,
  VoteResponse,
  VotesResponse,
} from './Challenge.types'
export interface ChallengeMessage {
  contractAddress: string
  sender: string
  updateConfig: (
    {
      newVoteConfig,
    }: {
      newVoteConfig: VoteConfig
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  createChallenge: (
    {
      challengeReq,
    }: {
      challengeReq: ChallengeRequest
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateChallenge: (
    {
      challenge,
      challengeId,
    }: {
      challenge: ChallengeEntryUpdate
      challengeId: number
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  cancelChallenge: (
    {
      challengeId,
    }: {
      challengeId: number
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateFriendsForChallenge: (
    {
      challengeId,
      friends,
      opKind,
    }: {
      challengeId: number
      friends: FriendForString[]
      opKind: UpdateFriendsOpKind
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  castVote: (
    {
      challengeId,
      voteToPunish,
    }: {
      challengeId: number
      voteToPunish: Vote
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  countVotes: (
    {
      challengeId,
    }: {
      challengeId: number
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  veto: (
    {
      challengeId,
    }: {
      challengeId: number
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
}
export class ChallengeMessageComposer implements ChallengeMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateConfig = this.updateConfig.bind(this)
    this.createChallenge = this.createChallenge.bind(this)
    this.updateChallenge = this.updateChallenge.bind(this)
    this.cancelChallenge = this.cancelChallenge.bind(this)
    this.updateFriendsForChallenge = this.updateFriendsForChallenge.bind(this)
    this.castVote = this.castVote.bind(this)
    this.countVotes = this.countVotes.bind(this)
    this.veto = this.veto.bind(this)
  }

  updateConfig = (
    {
      newVoteConfig,
    }: {
      newVoteConfig: VoteConfig
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_config: {
        new_vote_config: newVoteConfig,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  createChallenge = (
    {
      challengeReq,
    }: {
      challengeReq: ChallengeRequest
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      create_challenge: {
        challenge_req: challengeReq,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  updateChallenge = (
    {
      challenge,
      challengeId,
    }: {
      challenge: ChallengeEntryUpdate
      challengeId: number
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_challenge: {
        challenge,
        challenge_id: challengeId,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  cancelChallenge = (
    {
      challengeId,
    }: {
      challengeId: number
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      cancel_challenge: {
        challenge_id: challengeId,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  updateFriendsForChallenge = (
    {
      challengeId,
      friends,
      opKind,
    }: {
      challengeId: number
      friends: FriendForString[]
      opKind: UpdateFriendsOpKind
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_friends_for_challenge: {
        challenge_id: challengeId,
        friends,
        op_kind: opKind,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  castVote = (
    {
      challengeId,
      voteToPunish,
    }: {
      challengeId: number
      voteToPunish: Vote
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      cast_vote: {
        challenge_id: challengeId,
        vote_to_punish: voteToPunish,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  countVotes = (
    {
      challengeId,
    }: {
      challengeId: number
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      count_votes: {
        challenge_id: challengeId,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
  veto = (
    {
      challengeId,
    }: {
      challengeId: number
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      veto: {
        challenge_id: challengeId,
      },
    }
    const moduleMsg: AppExecuteMsg<ExecuteMsg> =
      AppExecuteMsgFactory.executeApp(msg)
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(moduleMsg)),
        funds: _funds,
      }),
    }
  }
}
