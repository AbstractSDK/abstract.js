/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { type CamelCasedProperties } from 'type-fest'
import {
  AccountId,
  AccountTrace,
  Addr,
  AdminStrikes,
  AssetEntry,
  ChainName,
  ChallengeEntryResponse,
  ChallengeEntryUpdate,
  ChallengeRequest,
  ChallengeResponse,
  ChallengesResponse,
  Decimal,
  type ExecuteMsg,
  FriendByAddrForAddr,
  FriendByAddrForString,
  FriendForAddr,
  FriendForString,
  FriendsResponse,
  InstantiateMsg,
  MigrateMsg,
  ProposalInfo,
  ProposalOutcome,
  ProposalStatus,
  ProposalsResponse,
  type QueryMsg,
  StrikeStrategy,
  Threshold,
  Timestamp,
  Uint64,
  Uint128,
  UpdateFriendsOpKind,
  Vote,
  VoteConfig,
  VoteResponse,
  VotesResponse,
} from './Challenge.types'
export abstract class ChallengeExecuteMsgBuilder {
  static updateConfig = ({
    newVoteConfig,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_config: unknown
      }
    >['update_config']
  >): ExecuteMsg => {
    return {
      update_config: {
        new_vote_config: newVoteConfig,
      } as const,
    }
  }
  static createChallenge = ({
    challengeReq,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        create_challenge: unknown
      }
    >['create_challenge']
  >): ExecuteMsg => {
    return {
      create_challenge: {
        challenge_req: challengeReq,
      } as const,
    }
  }
  static updateChallenge = ({
    challenge,
    challengeId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_challenge: unknown
      }
    >['update_challenge']
  >): ExecuteMsg => {
    return {
      update_challenge: {
        challenge,
        challenge_id: challengeId,
      } as const,
    }
  }
  static cancelChallenge = ({
    challengeId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        cancel_challenge: unknown
      }
    >['cancel_challenge']
  >): ExecuteMsg => {
    return {
      cancel_challenge: {
        challenge_id: challengeId,
      } as const,
    }
  }
  static updateFriendsForChallenge = ({
    challengeId,
    friends,
    opKind,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_friends_for_challenge: unknown
      }
    >['update_friends_for_challenge']
  >): ExecuteMsg => {
    return {
      update_friends_for_challenge: {
        challenge_id: challengeId,
        friends,
        op_kind: opKind,
      } as const,
    }
  }
  static castVote = ({
    challengeId,
    voteToPunish,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        cast_vote: unknown
      }
    >['cast_vote']
  >): ExecuteMsg => {
    return {
      cast_vote: {
        challenge_id: challengeId,
        vote_to_punish: voteToPunish,
      } as const,
    }
  }
  static countVotes = ({
    challengeId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        count_votes: unknown
      }
    >['count_votes']
  >): ExecuteMsg => {
    return {
      count_votes: {
        challenge_id: challengeId,
      } as const,
    }
  }
  static veto = ({
    challengeId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        veto: unknown
      }
    >['veto']
  >): ExecuteMsg => {
    return {
      veto: {
        challenge_id: challengeId,
      } as const,
    }
  }
}
export abstract class ChallengeQueryMsgBuilder {
  static challenge = ({
    challengeId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        challenge: unknown
      }
    >['challenge']
  >): QueryMsg => {
    return {
      challenge: {
        challenge_id: challengeId,
      } as const,
    }
  }
  static challenges = ({
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        challenges: unknown
      }
    >['challenges']
  >): QueryMsg => {
    return {
      challenges: {
        limit,
        start_after: startAfter,
      } as const,
    }
  }
  static friends = ({
    challengeId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        friends: unknown
      }
    >['friends']
  >): QueryMsg => {
    return {
      friends: {
        challenge_id: challengeId,
      } as const,
    }
  }
  static vote = ({
    challengeId,
    proposalId,
    voterAddr,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        vote: unknown
      }
    >['vote']
  >): QueryMsg => {
    return {
      vote: {
        challenge_id: challengeId,
        proposal_id: proposalId,
        voter_addr: voterAddr,
      } as const,
    }
  }
  static votes = ({
    challengeId,
    limit,
    proposalId,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        votes: unknown
      }
    >['votes']
  >): QueryMsg => {
    return {
      votes: {
        challenge_id: challengeId,
        limit,
        proposal_id: proposalId,
        start_after: startAfter,
      } as const,
    }
  }
  static proposals = ({
    challengeId,
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        proposals: unknown
      }
    >['proposals']
  >): QueryMsg => {
    return {
      proposals: {
        challenge_id: challengeId,
        limit,
        start_after: startAfter,
      } as const,
    }
  }
}
