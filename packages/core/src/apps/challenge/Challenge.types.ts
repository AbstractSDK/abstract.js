/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export type Threshold =
  | {
      majority: {}
    }
  | {
      percentage: Decimal
    }
export type Decimal = string
export type Uint64 = string
export interface InstantiateMsg {
  vote_config: VoteConfig
}
export interface VoteConfig {
  threshold: Threshold
  veto_duration_seconds?: Uint64 | null
}
export type ExecuteMsg =
  | {
      update_config: {
        new_vote_config: VoteConfig
      }
    }
  | {
      create_challenge: {
        challenge_req: ChallengeRequest
      }
    }
  | {
      update_challenge: {
        challenge: ChallengeEntryUpdate
        challenge_id: number
      }
    }
  | {
      cancel_challenge: {
        challenge_id: number
      }
    }
  | {
      update_friends_for_challenge: {
        challenge_id: number
        friends: FriendForString[]
        op_kind: UpdateFriendsOpKind
      }
    }
  | {
      cast_vote: {
        challenge_id: number
        vote_to_punish: Vote
      }
    }
  | {
      count_votes: {
        challenge_id: number
      }
    }
  | {
      veto: {
        challenge_id: number
      }
    }
export type FriendForString =
  | {
      addr: FriendByAddrForString
    }
  | {
      abstract_account: AccountId
    }
export type AccountTrace =
  | 'local'
  | {
      remote: ChainName[]
    }
export type ChainName = string
export type AssetEntry = string
export type StrikeStrategy =
  | {
      split: Uint128
    }
  | {
      per_friend: Uint128
    }
export type Uint128 = string
export type UpdateFriendsOpKind =
  | {
      add: {}
    }
  | {
      remove: {}
    }
export interface ChallengeRequest {
  challenge_duration_seconds: Uint64
  description?: string | null
  init_friends: FriendForString[]
  name: string
  proposal_duration_seconds: Uint64
  strike_asset: AssetEntry
  strike_strategy: StrikeStrategy
  strikes_limit?: number | null
}
export interface FriendByAddrForString {
  address: string
  name: string
}
export interface AccountId {
  seq: number
  trace: AccountTrace
}
export interface ChallengeEntryUpdate {
  description?: string | null
  name?: string | null
}
export interface Vote {
  memo?: string | null
  vote: boolean
}
export type QueryMsg =
  | {
      challenge: {
        challenge_id: number
      }
    }
  | {
      challenges: {
        limit?: number | null
        start_after?: number | null
      }
    }
  | {
      friends: {
        challenge_id: number
      }
    }
  | {
      vote: {
        challenge_id: number
        proposal_id?: number | null
        voter_addr: string
      }
    }
  | {
      votes: {
        challenge_id: number
        limit?: number | null
        proposal_id?: number | null
        start_after?: Addr | null
      }
    }
  | {
      proposals: {
        challenge_id: number
        limit?: number | null
        start_after?: number | null
      }
    }
export type Addr = string
export interface MigrateMsg {
  [k: string]: unknown
}
export type Timestamp = Uint64
export type ProposalStatus =
  | ('active' | 'waiting_for_count')
  | {
      veto_period: Timestamp
    }
  | {
      finished: ProposalOutcome
    }
export type ProposalOutcome = 'passed' | 'failed' | 'canceled' | 'vetoed'
export interface ChallengeResponse {
  challenge?: ChallengeEntryResponse | null
}
export interface ChallengeEntryResponse {
  active_proposal?: ProposalInfo | null
  admin_strikes: AdminStrikes
  challenge_id: number
  description: string
  end_timestamp: Timestamp
  name: string
  proposal_duration_seconds: Uint64
  strike_asset: AssetEntry
  strike_strategy: StrikeStrategy
}
export interface ProposalInfo {
  config: VoteConfig
  end_timestamp: Timestamp
  status: ProposalStatus
  total_voters: number
  votes_against: number
  votes_for: number
}
export interface AdminStrikes {
  limit: number
  num_strikes: number
}
export interface ChallengesResponse {
  challenges: ChallengeEntryResponse[]
}
export type FriendForAddr =
  | {
      addr: FriendByAddrForAddr
    }
  | {
      abstract_account: AccountId
    }
export interface FriendsResponse {
  friends: FriendForAddr[]
}
export interface FriendByAddrForAddr {
  address: Addr
  name: string
}
export interface ProposalsResponse {
  proposals: [number, ProposalInfo][]
}
export interface VoteResponse {
  vote?: Vote | null
}
export interface VotesResponse {
  votes: [Addr, Vote | null][]
}
export type ChallengeExecuteMsg = ExecuteMsg
