/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { toUtf8 } from '@cosmjs/encoding'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { AssetEntry, Coin, CosmosMsgForEmpty, ExecuteMsg } from './Proxy.types'

export interface ProxyMessage {
  contractAddress: string
  sender: string
  setAdmin: (
    {
      admin,
    }: {
      admin: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  moduleAction: (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  moduleActionWithData: (
    {
      msg,
    }: {
      msg: CosmosMsgForEmpty
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  ibcAction: (
    {
      msgs,
    }: {
      msgs: ExecuteMsg[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  addModule: (
    {
      module,
    }: {
      module: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  removeModule: (
    {
      module,
    }: {
      module: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateAssets: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: AssetEntry[][]
      toRemove: AssetEntry[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
}
export class ProxyMessageComposer implements ProxyMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.setAdmin = this.setAdmin.bind(this)
    this.moduleAction = this.moduleAction.bind(this)
    this.moduleActionWithData = this.moduleActionWithData.bind(this)
    this.ibcAction = this.ibcAction.bind(this)
    this.addModule = this.addModule.bind(this)
    this.removeModule = this.removeModule.bind(this)
    this.updateAssets = this.updateAssets.bind(this)
  }

  setAdmin = (
    {
      admin,
    }: {
      admin: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      set_admin: {
        admin,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  moduleAction = (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      module_action: {
        msgs,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  moduleActionWithData = (
    {
      msg,
    }: {
      msg: CosmosMsgForEmpty
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      module_action_with_data: {
        msg,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  ibcAction = (
    {
      msgs,
    }: {
      msgs: ExecuteMsg[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      ibc_action: {
        msgs,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  addModule = (
    {
      module,
    }: {
      module: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      add_module: {
        module,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  removeModule = (
    {
      module,
    }: {
      module: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      remove_module: {
        module,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateAssets = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: AssetEntry[][]
      toRemove: AssetEntry[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_assets: {
        to_add: toAdd,
        to_remove: toRemove,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
}
