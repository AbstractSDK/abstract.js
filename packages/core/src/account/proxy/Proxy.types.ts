/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  account_id: number
  ans_host_address: string
}

export type UncheckedProxyAsset = [AssetEntry, UncheckedPriceSource]
export type ExecuteMsg =
  | {
      set_admin: {
        admin: string
      }
    }
  | {
      module_action: {
        msgs: CosmosMsgForEmpty[]
      }
    }
  | {
      module_action_with_data: {
        msg: CosmosMsgForEmpty
      }
    }
  | {
      ibc_action: {
        msgs: ExecuteMsg1[]
      }
    }
  | {
      add_module: {
        module: string
      }
    }
  | {
      remove_module: {
        module: string
      }
    }
  | {
      update_assets: {
        to_add: UncheckedProxyAsset[]
        to_remove: AssetEntry[]
      }
    }
export type CosmosMsgForEmpty =
  | {
      bank: BankMsg
    }
  | {
      custom: Empty
    }
  | {
      staking: StakingMsg
    }
  | {
      distribution: DistributionMsg
    }
  | {
      stargate: {
        type_url: string
        value: Binary
      }
    }
  | {
      ibc: IbcMsg
    }
  | {
      wasm: WasmMsg
    }
  | {
      gov: GovMsg
    }
export type BankMsg =
  | {
      send: {
        amount: Coin[]
        to_address: string
      }
    }
  | {
      burn: {
        amount: Coin[]
      }
    }
export type Uint128 = string
export type StakingMsg =
  | {
      delegate: {
        amount: Coin
        validator: string
      }
    }
  | {
      undelegate: {
        amount: Coin
        validator: string
      }
    }
  | {
      redelegate: {
        amount: Coin
        dst_validator: string
        src_validator: string
      }
    }
export type DistributionMsg =
  | {
      set_withdraw_address: {
        address: string
      }
    }
  | {
      withdraw_delegator_reward: {
        validator: string
      }
    }
export type Binary = string
export type IbcMsg =
  | {
      transfer: {
        amount: Coin
        channel_id: string
        timeout: IbcTimeout
        to_address: string
      }
    }
  | {
      send_packet: {
        channel_id: string
        data: Binary
        timeout: IbcTimeout
      }
    }
  | {
      close_channel: {
        channel_id: string
      }
    }
export type Timestamp = Uint64
export type Uint64 = string
export type WasmMsg =
  | {
      execute: {
        contract_addr: string
        funds: Coin[]
        msg: Binary
      }
    }
  | {
      instantiate: {
        admin?: string | null
        code_id: number
        funds: Coin[]
        label: string
        msg: Binary
      }
    }
  | {
      migrate: {
        contract_addr: string
        msg: Binary
        new_code_id: number
      }
    }
  | {
      update_admin: {
        admin: string
        contract_addr: string
      }
    }
  | {
      clear_admin: {
        contract_addr: string
      }
    }
export type GovMsg = {
  vote: {
    proposal_id: number
    vote: VoteOption
  }
}
export type VoteOption = 'yes' | 'no' | 'abstain' | 'no_with_veto'
export type ExecuteMsg1 =
  | {
      update_admin: {
        admin: string
      }
    }
  | {
      update_config: {
        ans_host?: string | null
        version_control?: string | null
      }
    }
  | {
      send_funds: {
        funds: Coin[]
        host_chain: string
      }
    }
  | {
      register: {
        host_chain: string
      }
    }
  | {
      send_packet: {
        action: HostAction
        callback_info?: CallbackInfo | null
        host_chain: string
        retries: number
      }
    }
  | {
      remove_host: {
        host_chain: string
      }
    }
export type HostAction =
  | {
      app: {
        msg: Binary
      }
    }
  | {
      dispatch: {
        msgs: CosmosMsgForEmpty[]
      }
    }
  | {
      query: {
        msgs: QueryRequestForEmpty[]
      }
    }
  | {
      send_all_back: {}
    }
  | {
      balances: {}
    }
  | {
      internal: InternalAction
    }
export type QueryRequestForEmpty =
  | {
      bank: BankQuery
    }
  | {
      custom: Empty
    }
  | {
      staking: StakingQuery
    }
  | {
      stargate: {
        data: Binary
        path: string
      }
    }
  | {
      ibc: IbcQuery
    }
  | {
      wasm: WasmQuery
    }
export type BankQuery =
  | {
      balance: {
        address: string
        denom: string
      }
    }
  | {
      all_balances: {
        address: string
      }
    }
export type StakingQuery =
  | {
      bonded_denom: {}
    }
  | {
      all_delegations: {
        delegator: string
      }
    }
  | {
      delegation: {
        delegator: string
        validator: string
      }
    }
  | {
      all_validators: {}
    }
  | {
      validator: {
        address: string
      }
    }
export type IbcQuery =
  | {
      port_id: {}
    }
  | {
      list_channels: {
        port_id?: string | null
      }
    }
  | {
      channel: {
        channel_id: string
        port_id?: string | null
      }
    }
export type WasmQuery =
  | {
      smart: {
        contract_addr: string
        msg: Binary
      }
    }
  | {
      raw: {
        contract_addr: string
        key: Binary
      }
    }
  | {
      contract_info: {
        contract_addr: string
      }
    }
export type InternalAction =
  | 'who_am_i'
  | {
      register: {
        account_proxy_address: string
      }
    }
export type AssetEntry = string
export type UncheckedPriceSource =
  | 'None'
  | {
      Pair: DexAssetPairing
    }
  | {
      LiquidityToken: {}
    }
  | {
      ValueAs: {
        asset: AssetEntry
        multiplier: Decimal
      }
    }
export type DexAssetPairing = [AssetEntry, AssetEntry, string]
export type Decimal = string
export interface Coin {
  amount: Uint128
  denom: string
}
export type Empty = {}
export interface IbcTimeout {
  block?: IbcTimeoutBlock | null
  timestamp?: Timestamp | null
}
export interface IbcTimeoutBlock {
  height: number
  revision: number
}
export interface CallbackInfo {
  id: string
  receiver: string
}
export type QueryMsg =
  | {
      config: {}
    }
  | {
      total_value: {}
    }
  | {
      token_value: {
        identifier: AssetEntry
      }
    }
  | {
      holding_amount: {
        identifier: AssetEntry
      }
    }
  | {
      asset_config: {
        identifier: AssetEntry
      }
    }
  | {
      assets_config: {
        limit?: number | null
        start_after?: AssetEntry | null
      }
    }
  | {
      assets_info: {
        limit?: number | null
        start_after?: AssetInfoBaseForAddr | null
      }
    }
  | {
      base_asset: {}
    }
export type AssetInfoBaseForAddr =
  | {
      native: string
    }
  | {
      cw20: Addr
    }
export type Addr = string
export type MigrateMsg = {}
export interface AssetConfigResponse {
  price_source: UncheckedPriceSource
}
export interface AssetsConfigResponse {
  assets: UncheckedProxyAsset[]
}
export type PriceSource =
  | 'None'
  | {
      Pool: {
        address: PoolAddressBaseForAddr
        pair: AssetInfoBaseForAddr[]
      }
    }
  | {
      LiquidityToken: {
        pool_address: PoolAddressBaseForAddr
        pool_assets: AssetInfoBaseForAddr[]
      }
    }
  | {
      ValueAs: {
        asset: AssetInfoBaseForAddr
        multiplier: Decimal
      }
    }
export type PoolAddressBaseForAddr =
  | {
      separate_addresses: {
        liquidity: Addr
        swap: Addr
      }
    }
  | {
      contract: Addr
    }
  | {
      id: number
    }
export interface AssetsInfoResponse {
  assets: [AssetInfoBaseForAddr, OracleAsset][]
}
export interface OracleAsset {
  complexity: number
  price_source: PriceSource
}
export interface BaseAssetResponse {
  base_asset: AssetInfoBaseForAddr
}
export interface ConfigResponse {
  modules: string[]
}
export interface HoldingAmountResponse {
  amount: Uint128
}
export interface TokenValueResponse {
  value: Uint128
}
export interface AccountValue {
  breakdown: [AssetInfoBaseForAddr, Uint128][]
  total_value: AssetBaseForAddr
}
export interface AssetBaseForAddr {
  amount: Uint128
  info: AssetInfoBaseForAddr
}
export type ProxyExecuteMsg = ExecuteMsg
