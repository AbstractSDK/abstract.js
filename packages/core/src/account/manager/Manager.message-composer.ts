/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from '@cosmjs/amino'
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { toUtf8 } from '@cosmjs/encoding'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import {
  AccountInfoForAddr,
  Action,
  Addr,
  AssetEntry,
  Binary,
  CallbackMsg,
  ConfigResponse,
  ContractVersion,
  ExecuteMsg,
  Expiration,
  GovernanceDetailsForAddr,
  GovernanceDetailsForString,
  InfoResponse,
  InstantiateMsg,
  ManagerModuleInfo,
  MigrateMsg,
  Module,
  ModuleAddressesResponse,
  ModuleInfo,
  ModuleInfosResponse,
  ModuleInstallConfig,
  ModuleReference,
  ModuleVersion,
  ModuleVersionsResponse,
  Namespace,
  OwnershipForString,
  QueryMsg,
  SubAccountIdsResponse,
  Timestamp,
  Uint64,
  UpdateSubAccountAction,
} from './Manager.types'
export interface ManagerMessage {
  contractAddress: string
  sender: string
  execOnModule: (
    {
      execMsg,
      moduleId,
    }: {
      execMsg: Binary
      moduleId: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateInternalConfig: (_funds?: Coin[]) => MsgExecuteContractEncodeObject
  installModules: (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  registerModule: (
    {
      module,
      moduleAddr,
    }: {
      module: Module
      moduleAddr: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  uninstallModule: (
    {
      moduleId,
    }: {
      moduleId: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  upgrade: (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  createSubAccount: (
    {
      baseAsset,
      description,
      installModules,
      link,
      name,
      namespace,
    }: {
      baseAsset?: AssetEntry
      description?: string
      installModules: ModuleInstallConfig[]
      link?: string
      name: string
      namespace?: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateInfo: (
    {
      description,
      link,
      name,
    }: {
      description?: string
      link?: string
      name?: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  setOwner: (
    {
      owner,
    }: {
      owner: GovernanceDetailsForString
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateStatus: (
    {
      isSuspended,
    }: {
      isSuspended?: boolean
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateSettings: (
    {
      ibcEnabled,
    }: {
      ibcEnabled?: boolean
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateSubAccount: (
    updateSubAccountAction: UpdateSubAccountAction,
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  callback: (_funds?: Coin[]) => MsgExecuteContractEncodeObject
  updateOwnership: (
    action: Action,
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
}
export class ManagerMessageComposer implements ManagerMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.execOnModule = this.execOnModule.bind(this)
    this.updateInternalConfig = this.updateInternalConfig.bind(this)
    this.installModules = this.installModules.bind(this)
    this.registerModule = this.registerModule.bind(this)
    this.uninstallModule = this.uninstallModule.bind(this)
    this.upgrade = this.upgrade.bind(this)
    this.createSubAccount = this.createSubAccount.bind(this)
    this.updateInfo = this.updateInfo.bind(this)
    this.setOwner = this.setOwner.bind(this)
    this.updateStatus = this.updateStatus.bind(this)
    this.updateSettings = this.updateSettings.bind(this)
    this.updateSubAccount = this.updateSubAccount.bind(this)
    this.callback = this.callback.bind(this)
    this.updateOwnership = this.updateOwnership.bind(this)
  }

  execOnModule = (
    {
      execMsg,
      moduleId,
    }: {
      execMsg: Binary
      moduleId: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      exec_on_module: {
        exec_msg: execMsg,
        module_id: moduleId,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateInternalConfig = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      update_internal_config: {},
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  installModules = (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      install_modules: {
        modules,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  registerModule = (
    {
      module,
      moduleAddr,
    }: {
      module: Module
      moduleAddr: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      register_module: {
        module,
        module_addr: moduleAddr,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  uninstallModule = (
    {
      moduleId,
    }: {
      moduleId: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      uninstall_module: {
        module_id: moduleId,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  upgrade = (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      upgrade: {
        modules,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  createSubAccount = (
    {
      baseAsset,
      description,
      installModules,
      link,
      name,
      namespace,
    }: {
      baseAsset?: AssetEntry
      description?: string
      installModules: ModuleInstallConfig[]
      link?: string
      name: string
      namespace?: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      create_sub_account: {
        base_asset: baseAsset,
        description,
        install_modules: installModules,
        link,
        name,
        namespace,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateInfo = (
    {
      description,
      link,
      name,
    }: {
      description?: string
      link?: string
      name?: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_info: {
        description,
        link,
        name,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  setOwner = (
    {
      owner,
    }: {
      owner: GovernanceDetailsForString
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      set_owner: {
        owner,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateStatus = (
    {
      isSuspended,
    }: {
      isSuspended?: boolean
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_status: {
        is_suspended: isSuspended,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateSettings = (
    {
      ibcEnabled,
    }: {
      ibcEnabled?: boolean
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_settings: {
        ibc_enabled: ibcEnabled,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateSubAccount = (
    updateSubAccountAction: UpdateSubAccountAction,
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg: ExecuteMsg = {
      update_sub_account: updateSubAccountAction,
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  callback = (_funds?: Coin[]): MsgExecuteContractEncodeObject => {
    const msg = {
      callback: {},
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
  updateOwnership = (
    action: Action,
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const msg = {
      update_ownership: action,
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(msg)),
        funds: _funds,
      }),
    }
  }
}
