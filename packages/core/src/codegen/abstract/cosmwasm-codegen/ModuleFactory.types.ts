/**
 * This file was automatically generated by @abstract-money/ts-codegen@0.35.4.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @abstract-money/ts-codegen generate command to regenerate this file.
 */

export interface InstantiateMsg {
  admin: string
  ans_host_address: string
  version_control_address: string
}
export type ExecuteMsg =
  | {
      update_config: {
        ans_host_address?: string | null
        version_control_address?: string | null
      }
    }
  | {
      install_modules: {
        modules: ModuleInstallConfig[]
      }
    }
  | {
      update_factory_binary_msgs: {
        to_add: [ModuleInfo, Binary][]
        to_remove: ModuleInfo[]
      }
    }
  | {
      update_ownership: Action
    }
export type Binary = string
export type Namespace = string
export type ModuleVersion =
  | 'latest'
  | {
      version: string
    }
export type Action =
  | {
      transfer_ownership: {
        expiry?: Expiration | null
        new_owner: string
      }
    }
  | 'accept_ownership'
  | 'renounce_ownership'
export type Expiration =
  | {
      at_height: number
    }
  | {
      at_time: Timestamp
    }
  | {
      never: {}
    }
export type Timestamp = Uint64
export type Uint64 = string
export interface ModuleInstallConfig {
  init_msg?: Binary | null
  module: ModuleInfo
}
export interface ModuleInfo {
  name: string
  namespace: Namespace
  version: ModuleVersion
}
export type QueryMsg =
  | {
      config: {}
    }
  | {
      context: {}
    }
  | {
      simulate_install_modules: {
        modules: ModuleInfo[]
      }
    }
  | {
      ownership: {}
    }
export type MigrateMsg = {}
export type Addr = string
export interface ConfigResponse {
  ans_host_address: Addr
  version_control_address: Addr
}
export type ModuleReference =
  | {
      account_base: number
    }
  | {
      native: Addr
    }
  | {
      adapter: Addr
    }
  | {
      app: number
    }
  | {
      standalone: number
    }
export interface ContextResponse {
  account_base: AccountBase
  modules: Module[]
  modules_to_register: RegisterModuleData[]
}
export interface AccountBase {
  manager: Addr
  proxy: Addr
}
export interface Module {
  info: ModuleInfo
  reference: ModuleReference
}
export interface RegisterModuleData {
  module: Module
  module_address: string
}
export interface OwnershipForString {
  owner?: string | null
  pending_expiry?: Expiration | null
  pending_owner?: string | null
}
export type Uint128 = string
export interface SimulateInstallModulesResponse {
  initialization_funds: [string, Coin[]][]
  monetization_funds: [string, Coin][]
  total_required_funds: Coin[]
}
export interface Coin {
  amount: Uint128
  denom: string
  [k: string]: unknown
}
