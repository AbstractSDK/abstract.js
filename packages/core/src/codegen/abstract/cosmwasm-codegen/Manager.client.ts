/**
 * This file was automatically generated by @abstract-money/ts-codegen@0.35.4.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @abstract-money/ts-codegen generate command to regenerate this file.
 */

import { Coin, StdFee } from '@cosmjs/amino'
import {
  CosmWasmClient,
  ExecuteResult,
  SigningCosmWasmClient,
} from '@cosmjs/cosmwasm-stargate'
import {
  AccountId,
  AccountInfoForAddr,
  AccountTrace,
  Action,
  Addr,
  AssetEntry,
  Binary,
  CallbackMsg,
  ChainName,
  ConfigResponse,
  ContractVersion,
  ExecuteMsg,
  Expiration,
  GovernanceDetailsForAddr,
  GovernanceDetailsForString,
  InfoResponse,
  InstantiateMsg,
  ManagerModuleInfo,
  MigrateMsg,
  Module,
  ModuleAddressesResponse,
  ModuleInfo,
  ModuleInfosResponse,
  ModuleInstallConfig,
  ModuleReference,
  ModuleVersion,
  ModuleVersionsResponse,
  Namespace,
  OwnershipForString,
  QueryMsg,
  RegisterModuleData,
  SubAccountIdsResponse,
  Timestamp,
  Uint64,
  UpdateSubAccountAction,
} from './Manager.types'
export interface ManagerReadOnlyInterface {
  contractAddress: string
  moduleVersions: ({
    ids,
  }: {
    ids: string[]
  }) => Promise<ModuleVersionsResponse>
  moduleAddresses: ({
    ids,
  }: {
    ids: string[]
  }) => Promise<ModuleAddressesResponse>
  moduleInfos: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }) => Promise<ModuleInfosResponse>
  config: () => Promise<ConfigResponse>
  info: () => Promise<InfoResponse>
  subAccountIds: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: number
  }) => Promise<SubAccountIdsResponse>
  ownership: () => Promise<OwnershipForString>
}
export class ManagerQueryClient implements ManagerReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.moduleVersions = this.moduleVersions.bind(this)
    this.moduleAddresses = this.moduleAddresses.bind(this)
    this.moduleInfos = this.moduleInfos.bind(this)
    this.config = this.config.bind(this)
    this.info = this.info.bind(this)
    this.subAccountIds = this.subAccountIds.bind(this)
    this.ownership = this.ownership.bind(this)
  }

  moduleVersions = async ({
    ids,
  }: {
    ids: string[]
  }): Promise<ModuleVersionsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      module_versions: {
        ids,
      },
    })
  }
  moduleAddresses = async ({
    ids,
  }: {
    ids: string[]
  }): Promise<ModuleAddressesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      module_addresses: {
        ids,
      },
    })
  }
  moduleInfos = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }): Promise<ModuleInfosResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      module_infos: {
        limit,
        start_after: startAfter,
      },
    })
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  info = async (): Promise<InfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      info: {},
    })
  }
  subAccountIds = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: number
  }): Promise<SubAccountIdsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      sub_account_ids: {
        limit,
        start_after: startAfter,
      },
    })
  }
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {},
    })
  }
}
export interface ManagerInterface extends ManagerReadOnlyInterface {
  contractAddress: string
  sender: string
  execOnModule: (
    {
      execMsg,
      moduleId,
    }: {
      execMsg: Binary
      moduleId: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateInternalConfig: (
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  installModules: (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  registerModules: (
    {
      modules,
    }: {
      modules: RegisterModuleData[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  uninstallModule: (
    {
      moduleId,
    }: {
      moduleId: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  upgrade: (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  createSubAccount: (
    {
      baseAsset,
      description,
      installModules,
      link,
      name,
      namespace,
    }: {
      baseAsset?: AssetEntry
      description?: string
      installModules: ModuleInstallConfig[]
      link?: string
      name: string
      namespace?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateInfo: (
    {
      description,
      link,
      name,
    }: {
      description?: string
      link?: string
      name?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  setOwner: (
    {
      owner,
    }: {
      owner: GovernanceDetailsForString
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateStatus: (
    {
      isSuspended,
    }: {
      isSuspended?: boolean
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateSettings: (
    {
      ibcEnabled,
    }: {
      ibcEnabled?: boolean
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateSubAccount: (
    updateSubAccountAction: UpdateSubAccountAction,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  callback: (
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateOwnership: (
    action: Action,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class ManagerClient
  extends ManagerQueryClient
  implements ManagerInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string,
  ) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.execOnModule = this.execOnModule.bind(this)
    this.updateInternalConfig = this.updateInternalConfig.bind(this)
    this.installModules = this.installModules.bind(this)
    this.registerModules = this.registerModules.bind(this)
    this.uninstallModule = this.uninstallModule.bind(this)
    this.upgrade = this.upgrade.bind(this)
    this.createSubAccount = this.createSubAccount.bind(this)
    this.updateInfo = this.updateInfo.bind(this)
    this.setOwner = this.setOwner.bind(this)
    this.updateStatus = this.updateStatus.bind(this)
    this.updateSettings = this.updateSettings.bind(this)
    this.updateSubAccount = this.updateSubAccount.bind(this)
    this.callback = this.callback.bind(this)
    this.updateOwnership = this.updateOwnership.bind(this)
  }

  execOnModule = async (
    {
      execMsg,
      moduleId,
    }: {
      execMsg: Binary
      moduleId: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        exec_on_module: {
          exec_msg: execMsg,
          module_id: moduleId,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateInternalConfig = async (
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_internal_config: {},
      },
      fee,
      memo,
      _funds,
    )
  }
  installModules = async (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        install_modules: {
          modules,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  registerModules = async (
    {
      modules,
    }: {
      modules: RegisterModuleData[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        register_modules: {
          modules,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  uninstallModule = async (
    {
      moduleId,
    }: {
      moduleId: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        uninstall_module: {
          module_id: moduleId,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  upgrade = async (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        upgrade: {
          modules,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  createSubAccount = async (
    {
      baseAsset,
      description,
      installModules,
      link,
      name,
      namespace,
    }: {
      baseAsset?: AssetEntry
      description?: string
      installModules: ModuleInstallConfig[]
      link?: string
      name: string
      namespace?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        create_sub_account: {
          base_asset: baseAsset,
          description,
          install_modules: installModules,
          link,
          name,
          namespace,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateInfo = async (
    {
      description,
      link,
      name,
    }: {
      description?: string
      link?: string
      name?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_info: {
          description,
          link,
          name,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  setOwner = async (
    {
      owner,
    }: {
      owner: GovernanceDetailsForString
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_owner: {
          owner,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateStatus = async (
    {
      isSuspended,
    }: {
      isSuspended?: boolean
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_status: {
          is_suspended: isSuspended,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateSettings = async (
    {
      ibcEnabled,
    }: {
      ibcEnabled?: boolean
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_settings: {
          ibc_enabled: ibcEnabled,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateSubAccount = async (
    updateSubAccountAction: UpdateSubAccountAction,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_sub_account: updateSubAccountAction,
      },
      fee,
      memo,
      _funds,
    )
  }
  callback = async (
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        callback: {},
      },
      fee,
      memo,
      _funds,
    )
  }
  updateOwnership = async (
    action: Action,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_ownership: action,
      },
      fee,
      memo,
      _funds,
    )
  }
}
