// @ts-nocheck
/**
 * This file was automatically generated by @abstract-money/ts-codegen@0.35.4.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @abstract-money/ts-codegen generate command to regenerate this file.
 */

import { AppExecuteMsg, AppExecuteMsgFactory } from '@abstract-money/core'
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { toUtf8 } from '@cosmjs/encoding'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import {
  AccountBase,
  AccountBaseResponse,
  AccountId,
  AccountTrace,
  Action,
  Addr,
  ChainName,
  Coin,
  ConfigResponse,
  ExecuteMsg,
  Expiration,
  FixedFee,
  InstantiateMsg,
  MigrateMsg,
  Module,
  ModuleConfiguration,
  ModuleFilter,
  ModuleInfo,
  ModuleReference,
  ModuleResponse,
  ModuleStatus,
  ModuleVersion,
  ModulesListResponse,
  ModulesResponse,
  Monetization,
  Namespace,
  NamespaceListResponse,
  NamespaceResponse,
  NamespacesResponse,
  OwnershipForString,
  QueryMsg,
  Timestamp,
  Uint64,
  Uint128,
  UpdateModule,
} from './VersionControl.types'
export interface VersionControlMsg {
  contractAddress: string
  sender: string
  removeModule: (
    {
      module,
    }: {
      module: ModuleInfo
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  yankModule: (
    {
      module,
    }: {
      module: ModuleInfo
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  proposeModules: (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateModuleConfiguration: (
    {
      moduleName,
      namespace,
      updateModule,
    }: {
      moduleName: string
      namespace: Namespace
      updateModule: UpdateModule
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  approveOrRejectModules: (
    {
      approves,
      rejects,
    }: {
      approves: ModuleInfo[]
      rejects: ModuleInfo[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  claimNamespace: (
    {
      accountId,
      namespace,
    }: {
      accountId: AccountId
      namespace: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  removeNamespaces: (
    {
      namespaces,
    }: {
      namespaces: string[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  addAccount: (
    {
      accountBase,
      accountId,
    }: {
      accountBase: AccountBase
      accountId: AccountId
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateConfig: (
    {
      allowDirectModuleRegistrationAndUpdates,
      namespaceRegistrationFee,
    }: {
      allowDirectModuleRegistrationAndUpdates?: boolean
      namespaceRegistrationFee?: Coin
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  setFactory: (
    {
      newFactory,
    }: {
      newFactory: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateOwnership: (
    action: Action,
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
}
export class VersionControlMsgComposer implements VersionControlMsg {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.removeModule = this.removeModule.bind(this)
    this.yankModule = this.yankModule.bind(this)
    this.proposeModules = this.proposeModules.bind(this)
    this.updateModuleConfiguration = this.updateModuleConfiguration.bind(this)
    this.approveOrRejectModules = this.approveOrRejectModules.bind(this)
    this.claimNamespace = this.claimNamespace.bind(this)
    this.removeNamespaces = this.removeNamespaces.bind(this)
    this.addAccount = this.addAccount.bind(this)
    this.updateConfig = this.updateConfig.bind(this)
    this.setFactory = this.setFactory.bind(this)
    this.updateOwnership = this.updateOwnership.bind(this)
  }

  removeModule = (
    {
      module,
    }: {
      module: ModuleInfo
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      remove_module: {
        module,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  yankModule = (
    {
      module,
    }: {
      module: ModuleInfo
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      yank_module: {
        module,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  proposeModules = (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      propose_modules: {
        modules,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  updateModuleConfiguration = (
    {
      moduleName,
      namespace,
      updateModule,
    }: {
      moduleName: string
      namespace: Namespace
      updateModule: UpdateModule
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      update_module_configuration: {
        module_name: moduleName,
        namespace,
        update_module: updateModule,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  approveOrRejectModules = (
    {
      approves,
      rejects,
    }: {
      approves: ModuleInfo[]
      rejects: ModuleInfo[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      approve_or_reject_modules: {
        approves,
        rejects,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  claimNamespace = (
    {
      accountId,
      namespace,
    }: {
      accountId: AccountId
      namespace: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      claim_namespace: {
        account_id: accountId,
        namespace,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  removeNamespaces = (
    {
      namespaces,
    }: {
      namespaces: string[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      remove_namespaces: {
        namespaces,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  addAccount = (
    {
      accountBase,
      accountId,
    }: {
      accountBase: AccountBase
      accountId: AccountId
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      add_account: {
        account_base: accountBase,
        account_id: accountId,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  updateConfig = (
    {
      allowDirectModuleRegistrationAndUpdates,
      namespaceRegistrationFee,
    }: {
      allowDirectModuleRegistrationAndUpdates?: boolean
      namespaceRegistrationFee?: Coin
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      update_config: {
        allow_direct_module_registration_and_updates:
          allowDirectModuleRegistrationAndUpdates,
        namespace_registration_fee: namespaceRegistrationFee,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  setFactory = (
    {
      newFactory,
    }: {
      newFactory: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      set_factory: {
        new_factory: newFactory,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  updateOwnership = (
    action: Action,
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      update_ownership: {},
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
}
