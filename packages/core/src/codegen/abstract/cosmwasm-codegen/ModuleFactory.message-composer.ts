// @ts-nocheck
/**
 * This file was automatically generated by @abstract-money/ts-codegen@0.35.4.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @abstract-money/ts-codegen generate command to regenerate this file.
 */

import { AppExecuteMsg, AppExecuteMsgFactory } from '@abstract-money/core'
import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { toUtf8 } from '@cosmjs/encoding'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import {
  AccountBase,
  Action,
  Addr,
  Binary,
  Coin,
  ConfigResponse,
  ContextResponse,
  ExecuteMsg,
  Expiration,
  InstantiateMsg,
  MigrateMsg,
  Module,
  ModuleInfo,
  ModuleInstallConfig,
  ModuleReference,
  ModuleVersion,
  Namespace,
  OwnershipForString,
  QueryMsg,
  RegisterModuleData,
  SimulateInstallModulesResponse,
  Timestamp,
  Uint64,
  Uint128,
} from './ModuleFactory.types'
export interface ModuleFactoryMsg {
  contractAddress: string
  sender: string
  updateConfig: (
    {
      ansHostAddress,
      versionControlAddress,
    }: {
      ansHostAddress?: string
      versionControlAddress?: string
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  installModules: (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateFactoryBinaryMsgs: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: ModuleInfo[][]
      toRemove: ModuleInfo[]
    },
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  updateOwnership: (
    action: Action,
    _funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
}
export class ModuleFactoryMsgComposer implements ModuleFactoryMsg {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateConfig = this.updateConfig.bind(this)
    this.installModules = this.installModules.bind(this)
    this.updateFactoryBinaryMsgs = this.updateFactoryBinaryMsgs.bind(this)
    this.updateOwnership = this.updateOwnership.bind(this)
  }

  updateConfig = (
    {
      ansHostAddress,
      versionControlAddress,
    }: {
      ansHostAddress?: string
      versionControlAddress?: string
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      update_config: {
        ans_host_address: ansHostAddress,
        version_control_address: versionControlAddress,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  installModules = (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      install_modules: {
        modules,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  updateFactoryBinaryMsgs = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: ModuleInfo[][]
      toRemove: ModuleInfo[]
    },
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      update_factory_binary_msgs: {
        to_add: toAdd,
        to_remove: toRemove,
      },
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
  updateOwnership = (
    action: Action,
    _funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    const _msg = {
      update_ownership: {},
    }
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify(_msg)),
        funds: _funds,
      }),
    }
  }
}
