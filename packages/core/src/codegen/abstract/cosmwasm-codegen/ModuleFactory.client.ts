/**
 * This file was automatically generated by @abstract-money/ts-codegen@0.35.4.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @abstract-money/ts-codegen generate command to regenerate this file.
 */

import { StdFee } from '@cosmjs/amino'
import {
  CosmWasmClient,
  ExecuteResult,
  SigningCosmWasmClient,
} from '@cosmjs/cosmwasm-stargate'
import {
  AccountBase,
  Action,
  Addr,
  Binary,
  Coin,
  ConfigResponse,
  ContextResponse,
  ExecuteMsg,
  Expiration,
  InstantiateMsg,
  MigrateMsg,
  Module,
  ModuleInfo,
  ModuleInstallConfig,
  ModuleReference,
  ModuleVersion,
  Namespace,
  OwnershipForString,
  QueryMsg,
  RegisterModuleData,
  SimulateInstallModulesResponse,
  Timestamp,
  Uint64,
  Uint128,
} from './ModuleFactory.types'
export interface ModuleFactoryReadOnlyInterface {
  contractAddress: string
  config: () => Promise<ConfigResponse>
  context: () => Promise<ContextResponse>
  simulateInstallModules: ({
    modules,
  }: {
    modules: ModuleInfo[]
  }) => Promise<SimulateInstallModulesResponse>
  ownership: () => Promise<OwnershipForString>
}
export class ModuleFactoryQueryClient implements ModuleFactoryReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.config = this.config.bind(this)
    this.context = this.context.bind(this)
    this.simulateInstallModules = this.simulateInstallModules.bind(this)
    this.ownership = this.ownership.bind(this)
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  context = async (): Promise<ContextResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      context: {},
    })
  }
  simulateInstallModules = async ({
    modules,
  }: {
    modules: ModuleInfo[]
  }): Promise<SimulateInstallModulesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_install_modules: {
        modules,
      },
    })
  }
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {},
    })
  }
}
export interface ModuleFactoryInterface extends ModuleFactoryReadOnlyInterface {
  contractAddress: string
  sender: string
  updateConfig: (
    {
      ansHostAddress,
      versionControlAddress,
    }: {
      ansHostAddress?: string
      versionControlAddress?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  installModules: (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateFactoryBinaryMsgs: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: ModuleInfo[][]
      toRemove: ModuleInfo[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
  updateOwnership: (
    action: Action,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[],
  ) => Promise<ExecuteResult>
}
export class ModuleFactoryClient
  extends ModuleFactoryQueryClient
  implements ModuleFactoryInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(
    client: SigningCosmWasmClient,
    sender: string,
    contractAddress: string,
  ) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateConfig = this.updateConfig.bind(this)
    this.installModules = this.installModules.bind(this)
    this.updateFactoryBinaryMsgs = this.updateFactoryBinaryMsgs.bind(this)
    this.updateOwnership = this.updateOwnership.bind(this)
  }

  updateConfig = async (
    {
      ansHostAddress,
      versionControlAddress,
    }: {
      ansHostAddress?: string
      versionControlAddress?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          ans_host_address: ansHostAddress,
          version_control_address: versionControlAddress,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  installModules = async (
    {
      modules,
    }: {
      modules: ModuleInstallConfig[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        install_modules: {
          modules,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateFactoryBinaryMsgs = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: ModuleInfo[][]
      toRemove: ModuleInfo[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_factory_binary_msgs: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      _funds,
    )
  }
  updateOwnership = async (
    action: Action,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[],
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_ownership: action,
      },
      fee,
      memo,
      _funds,
    )
  }
}
