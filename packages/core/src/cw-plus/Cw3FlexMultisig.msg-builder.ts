/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CamelCasedProperties } from 'type-fest'
import {
  Addr,
  BankMsg,
  Binary,
  Coin,
  CosmosMsgForEmpty,
  Decimal,
  DistributionMsg,
  Duration,
  Empty,
  ExecuteMsg,
  Executor,
  Expiration,
  InstantiateMsg,
  ListProposalsResponse,
  ListVotersResponse,
  ListVotesResponse,
  MemberChangedHookMsg,
  MemberDiff,
  ProposalResponse,
  ProposalResponseForEmpty,
  QueryMsg,
  ReverseProposalsResponse,
  StakingMsg,
  Status,
  Threshold,
  ThresholdResponse,
  Timestamp,
  Uint64,
  Uint128,
  Vote,
  VoteInfo,
  VoteResponse,
  VoterDetail,
  VoterResponse,
  WasmMsg,
} from './Cw3FlexMultisig.types'
export abstract class Cw3FlexMultisigExecuteMsgBuilder {
  static propose = ({
    description,
    latest,
    msgs,
    title,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        propose: unknown
      }
    >['propose']
  >): ExecuteMsg => {
    return {
      propose: {
        description,
        latest,
        msgs,
        title,
      } as const,
    }
  }
  static vote = ({
    proposalId,
    vote,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        vote: unknown
      }
    >['vote']
  >): ExecuteMsg => {
    return {
      vote: {
        proposal_id: proposalId,
        vote,
      } as const,
    }
  }
  static execute = ({
    proposalId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        execute: unknown
      }
    >['execute']
  >): ExecuteMsg => {
    return {
      execute: {
        proposal_id: proposalId,
      } as const,
    }
  }
  static close = ({
    proposalId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        close: unknown
      }
    >['close']
  >): ExecuteMsg => {
    return {
      close: {
        proposal_id: proposalId,
      } as const,
    }
  }
  static memberChangedHook = ({
    diffs,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        member_changed_hook: unknown
      }
    >['member_changed_hook']
  >): ExecuteMsg => {
    return {
      member_changed_hook: {
        diffs,
      } as const,
    }
  }
}
export abstract class Cw3FlexMultisigQueryMsgBuilder {
  static threshold = (): QueryMsg => {
    return {
      threshold: {} as const,
    }
  }
  static proposal = ({
    proposalId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        proposal: unknown
      }
    >['proposal']
  >): QueryMsg => {
    return {
      proposal: {
        proposal_id: proposalId,
      } as const,
    }
  }
  static listProposals = ({
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        list_proposals: unknown
      }
    >['list_proposals']
  >): QueryMsg => {
    return {
      list_proposals: {
        limit,
        start_after: startAfter,
      } as const,
    }
  }
  static reverseProposals = ({
    limit,
    startBefore,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        reverse_proposals: unknown
      }
    >['reverse_proposals']
  >): QueryMsg => {
    return {
      reverse_proposals: {
        limit,
        start_before: startBefore,
      } as const,
    }
  }
  static vote = ({
    proposalId,
    voter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        vote: unknown
      }
    >['vote']
  >): QueryMsg => {
    return {
      vote: {
        proposal_id: proposalId,
        voter,
      } as const,
    }
  }
  static listVotes = ({
    limit,
    proposalId,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        list_votes: unknown
      }
    >['list_votes']
  >): QueryMsg => {
    return {
      list_votes: {
        limit,
        proposal_id: proposalId,
        start_after: startAfter,
      } as const,
    }
  }
  static voter = ({
    address,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        voter: unknown
      }
    >['voter']
  >): QueryMsg => {
    return {
      voter: {
        address,
      } as const,
    }
  }
  static listVoters = ({
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        list_voters: unknown
      }
    >['list_voters']
  >): QueryMsg => {
    return {
      list_voters: {
        limit,
        start_after: startAfter,
      } as const,
    }
  }
}
