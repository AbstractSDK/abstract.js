/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { MsgExecuteContractEncodeObject } from '@cosmjs/cosmwasm-stargate'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  CosmosMsgForEmpty,
  BankMsg,
  Uint128,
  StakingMsg,
  DistributionMsg,
  WasmMsg,
  Binary,
  Coin,
  Empty,
  ExecuteMsg,
  Expiration,
  Timestamp,
  Uint64,
  Vote,
  MemberChangedHookMsg,
  MemberDiff,
  Executor,
  Addr,
  Duration,
  Threshold,
  Decimal,
  InstantiateMsg,
  Status,
  ThresholdResponse,
  ListProposalsResponse,
  ProposalResponseForEmpty,
  ListVotersResponse,
  VoterDetail,
  ListVotesResponse,
  VoteInfo,
  ProposalResponse,
  QueryMsg,
  ReverseProposalsResponse,
  VoteResponse,
  VoterResponse,
} from './Cw3FlexMultisig.types'
export interface Cw3FlexMultisigMessage {
  contractAddress: string
  sender: string
  propose: (
    {
      description,
      latest,
      msgs,
      title,
    }: {
      description: string
      latest?: Expiration
      msgs: CosmosMsgForEmpty[]
      title: string
    },
    funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  vote: (
    {
      proposalId,
      vote,
    }: {
      proposalId: number
      vote: Vote
    },
    funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  execute: (
    {
      proposalId,
    }: {
      proposalId: number
    },
    funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  close: (
    {
      proposalId,
    }: {
      proposalId: number
    },
    funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
  memberChangedHook: (
    {
      diffs,
    }: {
      diffs: MemberDiff[]
    },
    funds?: Coin[],
  ) => MsgExecuteContractEncodeObject
}
export class Cw3FlexMultisigMessageComposer implements Cw3FlexMultisigMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.propose = this.propose.bind(this)
    this.vote = this.vote.bind(this)
    this.execute = this.execute.bind(this)
    this.close = this.close.bind(this)
    this.memberChangedHook = this.memberChangedHook.bind(this)
  }

  propose = (
    {
      description,
      latest,
      msgs,
      title,
    }: {
      description: string
      latest?: Expiration
      msgs: CosmosMsgForEmpty[]
      title: string
    },
    funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            propose: {
              description,
              latest,
              msgs,
              title,
            },
          }),
        ),
        funds,
      }),
    }
  }
  vote = (
    {
      proposalId,
      vote,
    }: {
      proposalId: number
      vote: Vote
    },
    funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            vote: {
              proposal_id: proposalId,
              vote,
            },
          }),
        ),
        funds,
      }),
    }
  }
  execute = (
    {
      proposalId,
    }: {
      proposalId: number
    },
    funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            execute: {
              proposal_id: proposalId,
            },
          }),
        ),
        funds,
      }),
    }
  }
  close = (
    {
      proposalId,
    }: {
      proposalId: number
    },
    funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            close: {
              proposal_id: proposalId,
            },
          }),
        ),
        funds,
      }),
    }
  }
  memberChangedHook = (
    {
      diffs,
    }: {
      diffs: MemberDiff[]
    },
    funds?: Coin[],
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            member_changed_hook: {
              diffs,
            },
          }),
        ),
        funds,
      }),
    }
  }
}
