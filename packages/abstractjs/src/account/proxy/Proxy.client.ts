/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  CosmosMsgForEmpty,
  BankMsg,
  Uint128,
  StakingMsg,
  DistributionMsg,
  Binary,
  IbcMsg,
  Timestamp,
  Uint64,
  WasmMsg,
  GovMsg,
  VoteOption,
  ExecuteMsg1,
  HostAction,
  QueryRequestForEmpty,
  BankQuery,
  StakingQuery,
  IbcQuery,
  WasmQuery,
  InternalAction,
  AssetEntry,
  UncheckedPriceSource,
  DexAssetPairing,
  Decimal,
  Coin,
  Empty,
  IbcTimeout,
  IbcTimeoutBlock,
  CallbackInfo,
  QueryMsg,
  AssetInfoBaseForAddr,
  Addr,
  MigrateMsg,
  AssetConfigResponse,
  AssetsConfigResponse,
  PriceSource,
  PoolAddressBaseForAddr,
  AssetsInfoResponse,
  OracleAsset,
  BaseAssetResponse,
  ConfigResponse,
  HoldingAmountResponse,
  TokenValueResponse,
  AccountValue,
  AssetBaseForAddr,
} from './Proxy.types'
export interface ProxyReadOnlyInterface {
  contractAddress: string
  config: () => Promise<ConfigResponse>
  totalValue: () => Promise<AccountValue>
  tokenValue: ({ identifier }: { identifier: AssetEntry }) => Promise<TokenValueResponse>
  holdingAmount: ({ identifier }: { identifier: AssetEntry }) => Promise<HoldingAmountResponse>
  assetConfig: ({ identifier }: { identifier: AssetEntry }) => Promise<AssetConfigResponse>
  assetsConfig: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: AssetEntry
  }) => Promise<AssetsConfigResponse>
  assetsInfo: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: AssetInfoBaseForAddr
  }) => Promise<AssetsInfoResponse>
  baseAsset: () => Promise<BaseAssetResponse>
}
export class ProxyQueryClient implements ProxyReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.config = this.config.bind(this)
    this.totalValue = this.totalValue.bind(this)
    this.tokenValue = this.tokenValue.bind(this)
    this.holdingAmount = this.holdingAmount.bind(this)
    this.assetConfig = this.assetConfig.bind(this)
    this.assetsConfig = this.assetsConfig.bind(this)
    this.assetsInfo = this.assetsInfo.bind(this)
    this.baseAsset = this.baseAsset.bind(this)
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  totalValue = async (): Promise<AccountValue> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_value: {},
    })
  }
  tokenValue = async ({ identifier }: { identifier: AssetEntry }): Promise<TokenValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_value: {
        identifier,
      },
    })
  }
  holdingAmount = async ({
    identifier,
  }: {
    identifier: AssetEntry
  }): Promise<HoldingAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      holding_amount: {
        identifier,
      },
    })
  }
  assetConfig = async ({
    identifier,
  }: {
    identifier: AssetEntry
  }): Promise<AssetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      asset_config: {
        identifier,
      },
    })
  }
  assetsConfig = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: AssetEntry
  }): Promise<AssetsConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assets_config: {
        limit,
        start_after: startAfter,
      },
    })
  }
  assetsInfo = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: AssetInfoBaseForAddr
  }): Promise<AssetsInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assets_info: {
        limit,
        start_after: startAfter,
      },
    })
  }
  baseAsset = async (): Promise<BaseAssetResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      base_asset: {},
    })
  }
}
export interface ProxyInterface extends ProxyReadOnlyInterface {
  contractAddress: string
  sender: string
  setAdmin: (
    {
      admin,
    }: {
      admin: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  moduleAction: (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  moduleActionWithData: (
    {
      msg,
    }: {
      msg: CosmosMsgForEmpty
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  ibcAction: (
    {
      msgs,
    }: {
      msgs: ExecuteMsg[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  addModule: (
    {
      module,
    }: {
      module: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  removeModule: (
    {
      module,
    }: {
      module: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateAssets: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: AssetEntry[][]
      toRemove: AssetEntry[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class ProxyClient extends ProxyQueryClient implements ProxyInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.setAdmin = this.setAdmin.bind(this)
    this.moduleAction = this.moduleAction.bind(this)
    this.moduleActionWithData = this.moduleActionWithData.bind(this)
    this.ibcAction = this.ibcAction.bind(this)
    this.addModule = this.addModule.bind(this)
    this.removeModule = this.removeModule.bind(this)
    this.updateAssets = this.updateAssets.bind(this)
  }

  setAdmin = async (
    {
      admin,
    }: {
      admin: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_admin: {
          admin,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  moduleAction = async (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        module_action: {
          msgs,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  moduleActionWithData = async (
    {
      msg,
    }: {
      msg: CosmosMsgForEmpty
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        module_action_with_data: {
          msg,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  ibcAction = async (
    {
      msgs,
    }: {
      msgs: ExecuteMsg[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        ibc_action: {
          msgs,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  addModule = async (
    {
      module,
    }: {
      module: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_module: {
          module,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  removeModule = async (
    {
      module,
    }: {
      module: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_module: {
          module,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  updateAssets = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: AssetEntry[][]
      toRemove: AssetEntry[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_assets: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      _funds
    )
  }
}
