/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import {
  Uint128,
  InstantiateMsg,
  Coin,
  ExecuteMsg,
  Namespace,
  ModuleVersion,
  ModuleReference,
  Addr,
  Monetization,
  Action,
  Expiration,
  Timestamp,
  Uint64,
  ModuleInfo,
  FixedFee,
  AccountBase,
  QueryMsg,
  ModuleStatus,
  ModuleFilter,
  MigrateMsg,
  AccountBaseResponse,
  ConfigResponse,
  ModulesListResponse,
  ModuleResponse,
  ModuleConfiguration,
  Module,
  ModulesResponse,
  NamespaceResponse,
  NamespaceListResponse,
  NamespacesResponse,
  OwnershipForString,
} from './Registry.types'
import { CamelCasedProperties } from 'type-fest'
export abstract class RegistryExecuteMsgBuilder {
  static removeModule = ({
    module,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        remove_module: unknown
      }
    >['remove_module']
  >): ExecuteMsg => {
    return {
      remove_module: {
        module,
      } as const,
    }
  }
  static yankModule = ({
    module,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        yank_module: unknown
      }
    >['yank_module']
  >): ExecuteMsg => {
    return {
      yank_module: {
        module,
      } as const,
    }
  }
  static proposeModules = ({
    modules,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        propose_modules: unknown
      }
    >['propose_modules']
  >): ExecuteMsg => {
    return {
      propose_modules: {
        modules,
      } as const,
    }
  }
  static setModuleMonetization = ({
    moduleName,
    monetization,
    namespace,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        set_module_monetization: unknown
      }
    >['set_module_monetization']
  >): ExecuteMsg => {
    return {
      set_module_monetization: {
        module_name: moduleName,
        monetization,
        namespace,
      } as const,
    }
  }
  static setModuleMetadata = ({
    metadata,
    module,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        set_module_metadata: unknown
      }
    >['set_module_metadata']
  >): ExecuteMsg => {
    return {
      set_module_metadata: {
        metadata,
        module,
      } as const,
    }
  }
  static approveOrRejectModules = ({
    approves,
    rejects,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        approve_or_reject_modules: unknown
      }
    >['approve_or_reject_modules']
  >): ExecuteMsg => {
    return {
      approve_or_reject_modules: {
        approves,
        rejects,
      } as const,
    }
  }
  static claimNamespace = ({
    accountId,
    namespace,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        claim_namespace: unknown
      }
    >['claim_namespace']
  >): ExecuteMsg => {
    return {
      claim_namespace: {
        account_id: accountId,
        namespace,
      } as const,
    }
  }
  static removeNamespaces = ({
    namespaces,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        remove_namespaces: unknown
      }
    >['remove_namespaces']
  >): ExecuteMsg => {
    return {
      remove_namespaces: {
        namespaces,
      } as const,
    }
  }
  static addAccount = ({
    accountBase,
    accountId,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        add_account: unknown
      }
    >['add_account']
  >): ExecuteMsg => {
    return {
      add_account: {
        account_base: accountBase,
        account_id: accountId,
      } as const,
    }
  }
  static updateConfig = ({
    allowDirectModuleRegistrationAndUpdates,
    namespaceRegistrationFee,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        update_config: unknown
      }
    >['update_config']
  >): ExecuteMsg => {
    return {
      update_config: {
        allow_direct_module_registration_and_updates: allowDirectModuleRegistrationAndUpdates,
        namespace_registration_fee: namespaceRegistrationFee,
      } as const,
    }
  }
  static setFactory = ({
    newFactory,
  }: CamelCasedProperties<
    Extract<
      ExecuteMsg,
      {
        set_factory: unknown
      }
    >['set_factory']
  >): ExecuteMsg => {
    return {
      set_factory: {
        new_factory: newFactory,
      } as const,
    }
  }
  static updateOwnership = (action: Action): ExecuteMsg => {
    return {
      update_ownership: action,
    }
  }
}
export abstract class RegistryQueryMsgBuilder {
  static accountBase = ({
    accountId,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        account_base: unknown
      }
    >['account_base']
  >): QueryMsg => {
    return {
      account_base: {
        account_id: accountId,
      } as const,
    }
  }
  static modules = ({
    infos,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        modules: unknown
      }
    >['modules']
  >): QueryMsg => {
    return {
      modules: {
        infos,
      } as const,
    }
  }
  static namespaces = ({
    accounts,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        namespaces: unknown
      }
    >['namespaces']
  >): QueryMsg => {
    return {
      namespaces: {
        accounts,
      } as const,
    }
  }
  static namespace = ({
    namespace,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        namespace: unknown
      }
    >['namespace']
  >): QueryMsg => {
    return {
      namespace: {
        namespace,
      } as const,
    }
  }
  static config = (): QueryMsg => {
    return {
      config: {} as const,
    }
  }
  static moduleList = ({
    filter,
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        module_list: unknown
      }
    >['module_list']
  >): QueryMsg => {
    return {
      module_list: {
        filter,
        limit,
        start_after: startAfter,
      } as const,
    }
  }
  static namespaceList = ({
    limit,
    startAfter,
  }: CamelCasedProperties<
    Extract<
      QueryMsg,
      {
        namespace_list: unknown
      }
    >['namespace_list']
  >): QueryMsg => {
    return {
      namespace_list: {
        limit,
        start_after: startAfter,
      } as const,
    }
  }
  static ownership = (): QueryMsg => {
    return {
      ownership: {} as const,
    }
  }
}
