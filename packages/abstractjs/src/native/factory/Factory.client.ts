/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  GovernanceDetailsForString,
  Action,
  Expiration,
  Timestamp,
  Uint64,
  QueryMsg,
  MigrateMsg,
  Addr,
  ConfigResponse,
  OwnershipForString,
} from './Factory.types'
export interface FactoryReadOnlyInterface {
  contractAddress: string
  config: () => Promise<ConfigResponse>
  ownership: () => Promise<OwnershipForString>
}
export class FactoryQueryClient implements FactoryReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.config = this.config.bind(this)
    this.ownership = this.ownership.bind(this)
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {},
    })
  }
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
  contractAddress: string
  sender: string
  updateConfig: (
    {
      ansHostContract,
      moduleFactoryAddress,
      versionControlContract,
    }: {
      ansHostContract?: string
      moduleFactoryAddress?: string
      versionControlContract?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  createAccount: (
    {
      description,
      governance,
      link,
      name,
    }: {
      description?: string
      governance: GovernanceDetailsForString
      link?: string
      name: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateOwnership: (
    action: Action,
    fee?: number | StdFee | 'auto',
    memo?: string,
    _funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class FactoryClient extends FactoryQueryClient implements FactoryInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateConfig = this.updateConfig.bind(this)
    this.createAccount = this.createAccount.bind(this)
    this.updateOwnership = this.updateOwnership.bind(this)
  }

  updateConfig = async (
    {
      ansHostContract,
      moduleFactoryAddress,
      versionControlContract,
    }: {
      ansHostContract?: string
      moduleFactoryAddress?: string
      versionControlContract?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_config: {
          ans_host_contract: ansHostContract,
          module_factory_address: moduleFactoryAddress,
          version_control_contract: versionControlContract,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  createAccount = async (
    {
      description,
      governance,
      link,
      name,
    }: {
      description?: string
      governance: GovernanceDetailsForString
      link?: string
      name: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        create_account: {
          description,
          governance,
          link,
          name,
        },
      },
      fee,
      memo,
      _funds
    )
  }
  updateOwnership = async (
    action: Action,
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    _funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_ownership: action,
      },
      fee,
      memo,
      _funds
    )
  }
}
