"use strict";
/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useManagerModuleVersionsQuery = exports.useManagerModuleAddressesQuery = exports.useManagerModuleInfosQuery = exports.useManagerConfigQuery = exports.useManagerInfoQuery = void 0;
const react_query_1 = require("react-query");
function useManagerInfoQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["managerInfo", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.info() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useManagerInfoQuery = useManagerInfoQuery;
function useManagerConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["managerConfig", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.config() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useManagerConfigQuery = useManagerConfigQuery;
function useManagerModuleInfosQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["managerModuleInfos", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.moduleInfos({
        iterLimit: args.iterLimit,
        lastModuleName: args.lastModuleName
    }) : undefined, Object.assign({ enabled: !!client }, options));
}
exports.useManagerModuleInfosQuery = useManagerModuleInfosQuery;
function useManagerModuleAddressesQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["managerModuleAddresses", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.moduleAddresses({
        names: args.names
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useManagerModuleAddressesQuery = useManagerModuleAddressesQuery;
function useManagerModuleVersionsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["managerModuleVersions", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.moduleVersions({
        names: args.names
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useManagerModuleVersionsQuery = useManagerModuleVersionsQuery;
//# sourceMappingURL=ManagerContract.react-query.js.map