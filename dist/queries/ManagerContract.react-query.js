"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.6.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useManagerSetAdminMutation = exports.useManagerCreateModuleMutation = exports.useManagerRegisterModuleMutation = exports.useManagerRemoveModuleMutation = exports.useManagerExecOnModuleMutation = exports.useManagerUpdateConfigMutation = exports.useManagerUpgradeMutation = exports.useManagerSuspendOsMutation = exports.useManagerUpdateInfoMutation = exports.useManagerModuleVersionsQuery = exports.useManagerModuleAddressesQuery = exports.useManagerModuleInfosQuery = exports.useManagerConfigQuery = exports.useManagerInfoQuery = void 0;
const react_query_1 = require("@tanstack/react-query");
function useManagerInfoQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["managerInfo", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.info() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerInfoQuery = useManagerInfoQuery;
function useManagerConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["managerConfig", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.config() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerConfigQuery = useManagerConfigQuery;
function useManagerModuleInfosQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["managerModuleInfos", client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client ? client.moduleInfos({
        iterLimit: args.iterLimit,
        lastModuleName: args.lastModuleName
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerModuleInfosQuery = useManagerModuleInfosQuery;
function useManagerModuleAddressesQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["managerModuleAddresses", client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client ? client.moduleAddresses({
        names: args.names
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerModuleAddressesQuery = useManagerModuleAddressesQuery;
function useManagerModuleVersionsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["managerModuleVersions", client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client ? client.moduleVersions({
        names: args.names
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useManagerModuleVersionsQuery = useManagerModuleVersionsQuery;
function useManagerUpdateInfoMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateInfo(msg, fee, memo, funds), options);
}
exports.useManagerUpdateInfoMutation = useManagerUpdateInfoMutation;
function useManagerSuspendOsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.suspendOs(msg, fee, memo, funds), options);
}
exports.useManagerSuspendOsMutation = useManagerSuspendOsMutation;
function useManagerUpgradeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.upgrade(msg, fee, memo, funds), options);
}
exports.useManagerUpgradeMutation = useManagerUpgradeMutation;
function useManagerUpdateConfigMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateConfig(msg, fee, memo, funds), options);
}
exports.useManagerUpdateConfigMutation = useManagerUpdateConfigMutation;
function useManagerExecOnModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.execOnModule(msg, fee, memo, funds), options);
}
exports.useManagerExecOnModuleMutation = useManagerExecOnModuleMutation;
function useManagerRemoveModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.removeModule(msg, fee, memo, funds), options);
}
exports.useManagerRemoveModuleMutation = useManagerRemoveModuleMutation;
function useManagerRegisterModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.registerModule(msg, fee, memo, funds), options);
}
exports.useManagerRegisterModuleMutation = useManagerRegisterModuleMutation;
function useManagerCreateModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.createModule(msg, fee, memo, funds), options);
}
exports.useManagerCreateModuleMutation = useManagerCreateModuleMutation;
function useManagerSetAdminMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds), options);
}
exports.useManagerSetAdminMutation = useManagerSetAdminMutation;
//# sourceMappingURL=ManagerContract.react-query.js.map