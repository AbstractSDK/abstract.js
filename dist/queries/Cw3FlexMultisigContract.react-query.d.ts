/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.6.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee } from '@cosmjs/amino';
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { CosmosMsgForEmpty, Coin, Expiration, MemberDiff, ThresholdResponse, ListProposalsResponse, ListVotersResponse, ListVotesResponse, ProposalResponse, ReverseProposalsResponse, VoteResponse, VoterResponse } from '../contracts/Cw3FlexMultisigContract';
import { Cw3FlexMultisigQueryClient, Cw3FlexMultisigClient } from '../contracts/Cw3FlexMultisigContract';
export interface Cw3FlexMultisigReactQuery<TResponse> {
    client: Cw3FlexMultisigQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse | undefined, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Cw3FlexMultisigListVotersQuery extends Cw3FlexMultisigReactQuery<ListVotersResponse> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw3FlexMultisigListVotersQuery({ client, args, options, }: Cw3FlexMultisigListVotersQuery): import("@tanstack/react-query").UseQueryResult<ListVotersResponse, Error>;
export interface Cw3FlexMultisigVoterQuery extends Cw3FlexMultisigReactQuery<VoterResponse> {
    args: {
        address: string;
    };
}
export declare function useCw3FlexMultisigVoterQuery({ client, args, options }: Cw3FlexMultisigVoterQuery): import("@tanstack/react-query").UseQueryResult<VoterResponse, Error>;
export interface Cw3FlexMultisigListVotesQuery extends Cw3FlexMultisigReactQuery<ListVotesResponse> {
    args: {
        limit?: number;
        proposalId: number;
        startAfter?: string;
    };
}
export declare function useCw3FlexMultisigListVotesQuery({ client, args, options, }: Cw3FlexMultisigListVotesQuery): import("@tanstack/react-query").UseQueryResult<ListVotesResponse, Error>;
export interface Cw3FlexMultisigVoteQuery extends Cw3FlexMultisigReactQuery<VoteResponse> {
    args: {
        proposalId: number;
        voter: string;
    };
}
export declare function useCw3FlexMultisigVoteQuery({ client, args, options }: Cw3FlexMultisigVoteQuery): import("@tanstack/react-query").UseQueryResult<VoteResponse, Error>;
export interface Cw3FlexMultisigReverseProposalsQuery extends Cw3FlexMultisigReactQuery<ReverseProposalsResponse> {
    args: {
        limit?: number;
        startBefore?: number;
    };
}
export declare function useCw3FlexMultisigReverseProposalsQuery({ client, args, options, }: Cw3FlexMultisigReverseProposalsQuery): import("@tanstack/react-query").UseQueryResult<ReverseProposalsResponse, Error>;
export interface Cw3FlexMultisigListProposalsQuery extends Cw3FlexMultisigReactQuery<ListProposalsResponse> {
    args: {
        limit?: number;
        startAfter?: number;
    };
}
export declare function useCw3FlexMultisigListProposalsQuery({ client, args, options, }: Cw3FlexMultisigListProposalsQuery): import("@tanstack/react-query").UseQueryResult<ListProposalsResponse, Error>;
export interface Cw3FlexMultisigProposalQuery extends Cw3FlexMultisigReactQuery<ProposalResponse> {
    args: {
        proposalId: number;
    };
}
export declare function useCw3FlexMultisigProposalQuery({ client, args, options, }: Cw3FlexMultisigProposalQuery): import("@tanstack/react-query").UseQueryResult<ProposalResponse, Error>;
export interface Cw3FlexMultisigThresholdQuery extends Cw3FlexMultisigReactQuery<ThresholdResponse> {
}
export declare function useCw3FlexMultisigThresholdQuery({ client, options, }: Cw3FlexMultisigThresholdQuery): import("@tanstack/react-query").UseQueryResult<ThresholdResponse, Error>;
export interface Cw3FlexMultisigMemberChangedHookMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        diffs: MemberDiff[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw3FlexMultisigMemberChangedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigMemberChangedHookMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigMemberChangedHookMutation, unknown>;
export interface Cw3FlexMultisigCloseMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        proposalId: number;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw3FlexMultisigCloseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigCloseMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigCloseMutation, unknown>;
export interface Cw3FlexMultisigExecuteMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        proposalId: number;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw3FlexMultisigExecuteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigExecuteMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigExecuteMutation, unknown>;
export interface Cw3FlexMultisigVoteMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        proposalId: number;
        vote: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw3FlexMultisigVoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigVoteMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigVoteMutation, unknown>;
export interface Cw3FlexMultisigProposeMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        description: string;
        latest?: Expiration;
        msgs: CosmosMsgForEmpty[];
        title: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw3FlexMultisigProposeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigProposeMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigProposeMutation, unknown>;
