/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.15.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { UseQueryOptions } from '@tanstack/react-query';
import { ThresholdResponse, ListProposalsResponse, ListVotersResponse, ListVotesResponse, ProposalResponse, ReverseProposalsResponse, VoteResponse, VoterResponse } from "../contracts/Cw3FlexMultisigContract";
import { Cw3FlexMultisigQueryClient } from "../contracts/Cw3FlexMultisigContract";
export interface Cw3FlexMultisigListVotersQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<ListVotersResponse | undefined, Error, ListVotersResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw3FlexMultisigListVotersQuery({ client, args, options }: Cw3FlexMultisigListVotersQuery): import("@tanstack/react-query").UseQueryResult<ListVotersResponse, Error>;
export interface Cw3FlexMultisigVoterQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<VoterResponse | undefined, Error, VoterResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
    args: {
        address: string;
    };
}
export declare function useCw3FlexMultisigVoterQuery({ client, args, options }: Cw3FlexMultisigVoterQuery): import("@tanstack/react-query").UseQueryResult<VoterResponse, Error>;
export interface Cw3FlexMultisigListVotesQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<ListVotesResponse | undefined, Error, ListVotesResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
    args: {
        limit?: number;
        proposalId: number;
        startAfter?: string;
    };
}
export declare function useCw3FlexMultisigListVotesQuery({ client, args, options }: Cw3FlexMultisigListVotesQuery): import("@tanstack/react-query").UseQueryResult<ListVotesResponse, Error>;
export interface Cw3FlexMultisigVoteQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<VoteResponse | undefined, Error, VoteResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
    args: {
        proposalId: number;
        voter: string;
    };
}
export declare function useCw3FlexMultisigVoteQuery({ client, args, options }: Cw3FlexMultisigVoteQuery): import("@tanstack/react-query").UseQueryResult<VoteResponse, Error>;
export interface Cw3FlexMultisigReverseProposalsQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<ReverseProposalsResponse | undefined, Error, ReverseProposalsResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
    args: {
        limit?: number;
        startBefore?: number;
    };
}
export declare function useCw3FlexMultisigReverseProposalsQuery({ client, args, options }: Cw3FlexMultisigReverseProposalsQuery): import("@tanstack/react-query").UseQueryResult<ReverseProposalsResponse, Error>;
export interface Cw3FlexMultisigListProposalsQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<ListProposalsResponse | undefined, Error, ListProposalsResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
    args: {
        limit?: number;
        startAfter?: number;
    };
}
export declare function useCw3FlexMultisigListProposalsQuery({ client, args, options }: Cw3FlexMultisigListProposalsQuery): import("@tanstack/react-query").UseQueryResult<ListProposalsResponse, Error>;
export interface Cw3FlexMultisigProposalQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<ProposalResponse | undefined, Error, ProposalResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
    args: {
        proposalId: number;
    };
}
export declare function useCw3FlexMultisigProposalQuery({ client, args, options }: Cw3FlexMultisigProposalQuery): import("@tanstack/react-query").UseQueryResult<ProposalResponse, Error>;
export interface Cw3FlexMultisigThresholdQuery {
    client?: Cw3FlexMultisigQueryClient;
    options?: Omit<UseQueryOptions<ThresholdResponse | undefined, Error, ThresholdResponse, (string | undefined)[]>, 'queryKey' | 'queryFn' | 'initialData'> & {
        initialData?: () => undefined;
    };
}
export declare function useCw3FlexMultisigThresholdQuery({ client, options }: Cw3FlexMultisigThresholdQuery): import("@tanstack/react-query").UseQueryResult<ThresholdResponse, Error>;
