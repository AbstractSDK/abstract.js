"use strict";
/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSubscriptionBaseQuery = exports.useSubscriptionStateQuery = exports.useSubscriptionConfigQuery = exports.useSubscriptionFeeQuery = exports.useSubscriptionSubscriberStateQuery = exports.useSubscriptionContributorStateQuery = void 0;
const react_query_1 = require("@tanstack/react-query");
function useSubscriptionContributorStateQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["subscriptionContributorState", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.contributorState({
        osId: args.osId
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useSubscriptionContributorStateQuery = useSubscriptionContributorStateQuery;
function useSubscriptionSubscriberStateQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["subscriptionSubscriberState", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.subscriberState({
        osId: args.osId
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useSubscriptionSubscriberStateQuery = useSubscriptionSubscriberStateQuery;
function useSubscriptionFeeQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["subscriptionFee", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.fee() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useSubscriptionFeeQuery = useSubscriptionFeeQuery;
function useSubscriptionConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["subscriptionConfig", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.config() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useSubscriptionConfigQuery = useSubscriptionConfigQuery;
function useSubscriptionStateQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["subscriptionState", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.state() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useSubscriptionStateQuery = useSubscriptionStateQuery;
function useSubscriptionBaseQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["subscriptionBase", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.queryBase() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
exports.useSubscriptionBaseQuery = useSubscriptionBaseQuery;
//# sourceMappingURL=SubscriptionContract.react-query.js.map