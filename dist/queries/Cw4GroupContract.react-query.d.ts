/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.6.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { AdminResponse, Member, HooksResponse, ListMembersResponse, MemberResponse, TotalWeightResponse } from "../contracts/Cw4GroupContract";
import { Cw4GroupQueryClient, Cw4GroupClient } from "../contracts/Cw4GroupContract";
export interface Cw4GroupReactQuery<TResponse> {
    client: Cw4GroupQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse | undefined, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Cw4GroupHooksQuery extends Cw4GroupReactQuery<HooksResponse> {
}
export declare function useCw4GroupHooksQuery({ client, options }: Cw4GroupHooksQuery): import("@tanstack/react-query").UseQueryResult<HooksResponse, Error>;
export interface Cw4GroupMemberQuery extends Cw4GroupReactQuery<MemberResponse> {
    args: {
        addr: string;
        atHeight?: number;
    };
}
export declare function useCw4GroupMemberQuery({ client, args, options }: Cw4GroupMemberQuery): import("@tanstack/react-query").UseQueryResult<MemberResponse, Error>;
export interface Cw4GroupListMembersQuery extends Cw4GroupReactQuery<ListMembersResponse> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw4GroupListMembersQuery({ client, args, options }: Cw4GroupListMembersQuery): import("@tanstack/react-query").UseQueryResult<ListMembersResponse, Error>;
export interface Cw4GroupTotalWeightQuery extends Cw4GroupReactQuery<TotalWeightResponse> {
}
export declare function useCw4GroupTotalWeightQuery({ client, options }: Cw4GroupTotalWeightQuery): import("@tanstack/react-query").UseQueryResult<TotalWeightResponse, Error>;
export interface Cw4GroupAdminQuery extends Cw4GroupReactQuery<AdminResponse> {
}
export declare function useCw4GroupAdminQuery({ client, options }: Cw4GroupAdminQuery): import("@tanstack/react-query").UseQueryResult<AdminResponse, Error>;
export interface Cw4GroupRemoveHookMutation {
    client: Cw4GroupClient;
    msg: {
        addr: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw4GroupRemoveHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupRemoveHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupRemoveHookMutation, unknown>;
export interface Cw4GroupAddHookMutation {
    client: Cw4GroupClient;
    msg: {
        addr: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw4GroupAddHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupAddHookMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupAddHookMutation, unknown>;
export interface Cw4GroupUpdateMembersMutation {
    client: Cw4GroupClient;
    msg: {
        add: Member[];
        remove: string[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw4GroupUpdateMembersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateMembersMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupUpdateMembersMutation, unknown>;
export interface Cw4GroupUpdateAdminMutation {
    client: Cw4GroupClient;
    msg: {
        admin?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw4GroupUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateAdminMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupUpdateAdminMutation, unknown>;
