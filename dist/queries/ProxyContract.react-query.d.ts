/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.6.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { CheckValidityResponse, ConfigResponse, CosmosMsgForEmpty, Coin, UncheckedProxyAsset, HoldingAmountResponse, HoldingValueResponse, ProxyAssetConfigResponse, ProxyAssetsResponse, TotalValueResponse } from "../contracts/ProxyContract";
import { ProxyQueryClient, ProxyClient } from "../contracts/ProxyContract";
export interface ProxyReactQuery<TResponse> {
    client: ProxyQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse | undefined, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface ProxyCheckValidityQuery extends ProxyReactQuery<CheckValidityResponse> {
}
export declare function useProxyCheckValidityQuery({ client, options }: ProxyCheckValidityQuery): import("@tanstack/react-query").UseQueryResult<CheckValidityResponse, Error>;
export interface ProxyProxyAssetsQuery extends ProxyReactQuery<ProxyAssetsResponse> {
    args: {
        iterLimit?: number;
        lastAssetName?: string;
    };
}
export declare function useProxyProxyAssetsQuery({ client, args, options }: ProxyProxyAssetsQuery): import("@tanstack/react-query").UseQueryResult<ProxyAssetsResponse, Error>;
export interface ProxyProxyAssetConfigQuery extends ProxyReactQuery<ProxyAssetConfigResponse> {
    args: {
        identifier: string;
    };
}
export declare function useProxyProxyAssetConfigQuery({ client, args, options }: ProxyProxyAssetConfigQuery): import("@tanstack/react-query").UseQueryResult<ProxyAssetConfigResponse, Error>;
export interface ProxyHoldingAmountQuery extends ProxyReactQuery<HoldingAmountResponse> {
    args: {
        identifier: string;
    };
}
export declare function useProxyHoldingAmountQuery({ client, args, options }: ProxyHoldingAmountQuery): import("@tanstack/react-query").UseQueryResult<HoldingAmountResponse, Error>;
export interface ProxyHoldingValueQuery extends ProxyReactQuery<HoldingValueResponse> {
    args: {
        identifier: string;
    };
}
export declare function useProxyHoldingValueQuery({ client, args, options }: ProxyHoldingValueQuery): import("@tanstack/react-query").UseQueryResult<HoldingValueResponse, Error>;
export interface ProxyTotalValueQuery extends ProxyReactQuery<TotalValueResponse> {
}
export declare function useProxyTotalValueQuery({ client, options }: ProxyTotalValueQuery): import("@tanstack/react-query").UseQueryResult<TotalValueResponse, Error>;
export interface ProxyConfigQuery extends ProxyReactQuery<ConfigResponse> {
}
export declare function useProxyConfigQuery({ client, options }: ProxyConfigQuery): import("@tanstack/react-query").UseQueryResult<ConfigResponse, Error>;
export interface ProxyUpdateAssetsMutation {
    client: ProxyClient;
    msg: {
        toAdd: UncheckedProxyAsset[];
        toRemove: string[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useProxyUpdateAssetsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ProxyUpdateAssetsMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, ProxyUpdateAssetsMutation, unknown>;
export interface ProxyRemoveModuleMutation {
    client: ProxyClient;
    msg: {
        module: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useProxyRemoveModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ProxyRemoveModuleMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, ProxyRemoveModuleMutation, unknown>;
export interface ProxyAddModuleMutation {
    client: ProxyClient;
    msg: {
        module: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useProxyAddModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ProxyAddModuleMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, ProxyAddModuleMutation, unknown>;
export interface ProxyModuleActionMutation {
    client: ProxyClient;
    msg: {
        msgs: CosmosMsgForEmpty[];
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useProxyModuleActionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ProxyModuleActionMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, ProxyModuleActionMutation, unknown>;
export interface ProxySetAdminMutation {
    client: ProxyClient;
    msg: {
        admin: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useProxySetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ProxySetAdminMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, ProxySetAdminMutation, unknown>;
