/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { ApiAddressResponse, ContractVersion, ApiAddressesResponse, CodeIdResponse, CodeIdsResponse, ConfigResponse, ModuleInfo, OsCoreResponse } from "../types/VersionControl.types";
import { VersionControlQueryClient, VersionControlClient } from "../contracts/VersionControl.client";
export interface VersionControlReactQuery<TResponse> {
    client: VersionControlQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface VersionControlApiAddressesQuery extends VersionControlReactQuery<ApiAddressesResponse> {
    args: {
        iterLimit?: number;
        lastApiModule?: ContractVersion;
    };
}
export declare function useVersionControlApiAddressesQuery({ client, args, options }: VersionControlApiAddressesQuery): import("@tanstack/react-query").UseQueryResult<ApiAddressesResponse, Error>;
export interface VersionControlCodeIdsQuery extends VersionControlReactQuery<CodeIdsResponse> {
    args: {
        iterLimit?: number;
        lastModule?: ContractVersion;
    };
}
export declare function useVersionControlCodeIdsQuery({ client, args, options }: VersionControlCodeIdsQuery): import("@tanstack/react-query").UseQueryResult<CodeIdsResponse, Error>;
export interface VersionControlConfigQuery extends VersionControlReactQuery<ConfigResponse> {
}
export declare function useVersionControlConfigQuery({ client, options }: VersionControlConfigQuery): import("@tanstack/react-query").UseQueryResult<ConfigResponse, Error>;
export interface VersionControlApiAddressQuery extends VersionControlReactQuery<ApiAddressResponse> {
    args: {
        module: ModuleInfo;
    };
}
export declare function useVersionControlApiAddressQuery({ client, args, options }: VersionControlApiAddressQuery): import("@tanstack/react-query").UseQueryResult<ApiAddressResponse, Error>;
export interface VersionControlCodeIdQuery extends VersionControlReactQuery<CodeIdResponse> {
    args: {
        module: ModuleInfo;
    };
}
export declare function useVersionControlCodeIdQuery({ client, args, options }: VersionControlCodeIdQuery): import("@tanstack/react-query").UseQueryResult<CodeIdResponse, Error>;
export interface VersionControlOsCoreQuery extends VersionControlReactQuery<OsCoreResponse> {
    args: {
        osId: number;
    };
}
export declare function useVersionControlOsCoreQuery({ client, args, options }: VersionControlOsCoreQuery): import("@tanstack/react-query").UseQueryResult<OsCoreResponse, Error>;
export interface VersionControlSetFactoryMutation {
    client: VersionControlClient;
    msg: {
        newFactory: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlSetFactoryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetFactoryMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlSetFactoryMutation, unknown>;
export interface VersionControlSetAdminMutation {
    client: VersionControlClient;
    msg: {
        newAdmin: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetAdminMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlSetAdminMutation, unknown>;
export interface VersionControlAddOsMutation {
    client: VersionControlClient;
    msg: {
        managerAddress: string;
        osId: number;
        proxyAddress: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddOsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddOsMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddOsMutation, unknown>;
export interface VersionControlRemoveApiMutation {
    client: VersionControlClient;
    msg: {
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlRemoveApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveApiMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlRemoveApiMutation, unknown>;
export interface VersionControlAddApiMutation {
    client: VersionControlClient;
    msg: {
        address: string;
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddApiMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddApiMutation, unknown>;
export interface VersionControlRemoveCodeIdMutation {
    client: VersionControlClient;
    msg: {
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlRemoveCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlRemoveCodeIdMutation, unknown>;
export interface VersionControlAddCodeIdMutation {
    client: VersionControlClient;
    msg: {
        codeId: number;
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddCodeIdMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddCodeIdMutation, unknown>;
