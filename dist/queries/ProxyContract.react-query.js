"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.6.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useProxySetAdminMutation = exports.useProxyModuleActionMutation = exports.useProxyAddModuleMutation = exports.useProxyRemoveModuleMutation = exports.useProxyUpdateAssetsMutation = exports.useProxyConfigQuery = exports.useProxyTotalValueQuery = exports.useProxyHoldingValueQuery = exports.useProxyHoldingAmountQuery = exports.useProxyProxyAssetConfigQuery = exports.useProxyProxyAssetsQuery = exports.useProxyCheckValidityQuery = void 0;
const react_query_1 = require("@tanstack/react-query");
function useProxyCheckValidityQuery({ client, options }) {
    return (0, react_query_1.useQuery)(['proxyCheckValidity', client === null || client === void 0 ? void 0 : client.contractAddress], () => (client ? client.checkValidity() : undefined), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyCheckValidityQuery = useProxyCheckValidityQuery;
function useProxyProxyAssetsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(['proxyProxyAssets', client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client
        ? client.proxyAssets({
            iterLimit: args.iterLimit,
            lastAssetName: args.lastAssetName,
        })
        : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyProxyAssetsQuery = useProxyProxyAssetsQuery;
function useProxyProxyAssetConfigQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(['proxyProxyAssetConfig', client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client
        ? client.proxyAssetConfig({
            identifier: args.identifier,
        })
        : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyProxyAssetConfigQuery = useProxyProxyAssetConfigQuery;
function useProxyHoldingAmountQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(['proxyHoldingAmount', client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client
        ? client.holdingAmount({
            identifier: args.identifier,
        })
        : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyHoldingAmountQuery = useProxyHoldingAmountQuery;
function useProxyHoldingValueQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(['proxyHoldingValue', client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client
        ? client.holdingValue({
            identifier: args.identifier,
        })
        : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyHoldingValueQuery = useProxyHoldingValueQuery;
function useProxyTotalValueQuery({ client, options }) {
    return (0, react_query_1.useQuery)(['proxyTotalValue', client === null || client === void 0 ? void 0 : client.contractAddress], () => (client ? client.totalValue() : undefined), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyTotalValueQuery = useProxyTotalValueQuery;
function useProxyConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(['proxyConfig', client === null || client === void 0 ? void 0 : client.contractAddress], () => (client ? client.config() : undefined), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyConfigQuery = useProxyConfigQuery;
function useProxyUpdateAssetsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAssets(msg, fee, memo, funds), options);
}
exports.useProxyUpdateAssetsMutation = useProxyUpdateAssetsMutation;
function useProxyRemoveModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.removeModule(msg, fee, memo, funds), options);
}
exports.useProxyRemoveModuleMutation = useProxyRemoveModuleMutation;
function useProxyAddModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.addModule(msg, fee, memo, funds), options);
}
exports.useProxyAddModuleMutation = useProxyAddModuleMutation;
function useProxyModuleActionMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.moduleAction(msg, fee, memo, funds), options);
}
exports.useProxyModuleActionMutation = useProxyModuleActionMutation;
function useProxySetAdminMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds), options);
}
exports.useProxySetAdminMutation = useProxySetAdminMutation;
//# sourceMappingURL=ProxyContract.react-query.js.map