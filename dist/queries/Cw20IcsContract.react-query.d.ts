/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */
import { UseQueryOptions } from '@tanstack/react-query';
import { AdminResponse, AllowedResponse, ChannelResponse, ConfigResponse, ListAllowedResponse, ListChannelsResponse, PortResponse } from '../contracts/Cw20IcsContract';
import { Cw20IcsQueryClient } from '../contracts/Cw20IcsContract';
export interface Cw20IcsListAllowedQuery {
    client?: Cw20IcsQueryClient;
    options?: Omit<UseQueryOptions<ListAllowedResponse | undefined, Error, ListAllowedResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw20IcsListAllowedQuery({ client, args, options }: Cw20IcsListAllowedQuery): import("@tanstack/react-query").UseQueryResult<ListAllowedResponse, Error>;
export interface Cw20IcsAllowedQuery {
    client?: Cw20IcsQueryClient;
    options?: Omit<UseQueryOptions<AllowedResponse | undefined, Error, AllowedResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        contract: string;
    };
}
export declare function useCw20IcsAllowedQuery({ client, args, options }: Cw20IcsAllowedQuery): import("@tanstack/react-query").UseQueryResult<AllowedResponse, Error>;
export interface Cw20IcsAdminQuery {
    client?: Cw20IcsQueryClient;
    options?: Omit<UseQueryOptions<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20IcsAdminQuery({ client, options }: Cw20IcsAdminQuery): import("@tanstack/react-query").UseQueryResult<AdminResponse, Error>;
export interface Cw20IcsConfigQuery {
    client?: Cw20IcsQueryClient;
    options?: Omit<UseQueryOptions<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20IcsConfigQuery({ client, options }: Cw20IcsConfigQuery): import("@tanstack/react-query").UseQueryResult<ConfigResponse, Error>;
export interface Cw20IcsChannelQuery {
    client?: Cw20IcsQueryClient;
    options?: Omit<UseQueryOptions<ChannelResponse | undefined, Error, ChannelResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        id: string;
    };
}
export declare function useCw20IcsChannelQuery({ client, args, options }: Cw20IcsChannelQuery): import("@tanstack/react-query").UseQueryResult<ChannelResponse, Error>;
export interface Cw20IcsListChannelsQuery {
    client?: Cw20IcsQueryClient;
    options?: Omit<UseQueryOptions<ListChannelsResponse | undefined, Error, ListChannelsResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20IcsListChannelsQuery({ client, options }: Cw20IcsListChannelsQuery): import("@tanstack/react-query").UseQueryResult<ListChannelsResponse, Error>;
export interface Cw20IcsPortQuery {
    client?: Cw20IcsQueryClient;
    options?: Omit<UseQueryOptions<PortResponse | undefined, Error, PortResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20IcsPortQuery({ client, options }: Cw20IcsPortQuery): import("@tanstack/react-query").UseQueryResult<PortResponse, Error>;
