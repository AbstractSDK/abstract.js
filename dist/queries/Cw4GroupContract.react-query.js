"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.6.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCw4GroupUpdateAdminMutation = exports.useCw4GroupUpdateMembersMutation = exports.useCw4GroupAddHookMutation = exports.useCw4GroupRemoveHookMutation = exports.useCw4GroupAdminQuery = exports.useCw4GroupTotalWeightQuery = exports.useCw4GroupListMembersQuery = exports.useCw4GroupMemberQuery = exports.useCw4GroupHooksQuery = void 0;
const react_query_1 = require("@tanstack/react-query");
function useCw4GroupHooksQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["cw4GroupHooks", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.hooks() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupHooksQuery = useCw4GroupHooksQuery;
function useCw4GroupMemberQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["cw4GroupMember", client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client ? client.member({
        addr: args.addr,
        atHeight: args.atHeight
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupMemberQuery = useCw4GroupMemberQuery;
function useCw4GroupListMembersQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(["cw4GroupListMembers", client === null || client === void 0 ? void 0 : client.contractAddress, JSON.stringify(args)], () => client ? client.listMembers({
        limit: args.limit,
        startAfter: args.startAfter
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupListMembersQuery = useCw4GroupListMembersQuery;
function useCw4GroupTotalWeightQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["cw4GroupTotalWeight", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.totalWeight() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupTotalWeightQuery = useCw4GroupTotalWeightQuery;
function useCw4GroupAdminQuery({ client, options }) {
    return (0, react_query_1.useQuery)(["cw4GroupAdmin", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.admin() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupAdminQuery = useCw4GroupAdminQuery;
function useCw4GroupRemoveHookMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.removeHook(msg, fee, memo, funds), options);
}
exports.useCw4GroupRemoveHookMutation = useCw4GroupRemoveHookMutation;
function useCw4GroupAddHookMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.addHook(msg, fee, memo, funds), options);
}
exports.useCw4GroupAddHookMutation = useCw4GroupAddHookMutation;
function useCw4GroupUpdateMembersMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateMembers(msg, fee, memo, funds), options);
}
exports.useCw4GroupUpdateMembersMutation = useCw4GroupUpdateMembersMutation;
function useCw4GroupUpdateAdminMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAdmin(msg, fee, memo, funds), options);
}
exports.useCw4GroupUpdateAdminMutation = useCw4GroupUpdateAdminMutation;
//# sourceMappingURL=Cw4GroupContract.react-query.js.map