"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCw4GroupUpdateAdminMutation = exports.useCw4GroupUpdateMembersMutation = exports.useCw4GroupAddHookMutation = exports.useCw4GroupRemoveHookMutation = exports.useCw4GroupAdminQuery = exports.useCw4GroupTotalWeightQuery = exports.useCw4GroupListMembersQuery = exports.useCw4GroupMemberQuery = exports.useCw4GroupHooksQuery = exports.cw4GroupQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.cw4GroupQueryKeys = {
    contract: [
        {
            contract: 'cw4Group',
        },
    ],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.cw4GroupQueryKeys.contract[0]), { address: contractAddress })],
    admin: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'admin', args })],
    totalWeight: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'total_weight', args })],
    listMembers: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'list_members', args })],
    member: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'member', args })],
    hooks: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cw4GroupQueryKeys.address(contractAddress)[0]), { method: 'hooks', args })],
};
function useCw4GroupHooksQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.cw4GroupQueryKeys.hooks(client === null || client === void 0 ? void 0 : client.contractAddress), () => (client ? client.hooks() : Promise.reject(new Error('Invalid client'))), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupHooksQuery = useCw4GroupHooksQuery;
function useCw4GroupMemberQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw4GroupQueryKeys.member(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.member({
            addr: args.addr,
            atHeight: args.atHeight,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupMemberQuery = useCw4GroupMemberQuery;
function useCw4GroupListMembersQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw4GroupQueryKeys.listMembers(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.listMembers({
            limit: args.limit,
            startAfter: args.startAfter,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupListMembersQuery = useCw4GroupListMembersQuery;
function useCw4GroupTotalWeightQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.cw4GroupQueryKeys.totalWeight(client === null || client === void 0 ? void 0 : client.contractAddress), () => (client ? client.totalWeight() : Promise.reject(new Error('Invalid client'))), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupTotalWeightQuery = useCw4GroupTotalWeightQuery;
function useCw4GroupAdminQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.cw4GroupQueryKeys.admin(client === null || client === void 0 ? void 0 : client.contractAddress), () => (client ? client.admin() : Promise.reject(new Error('Invalid client'))), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw4GroupAdminQuery = useCw4GroupAdminQuery;
function useCw4GroupRemoveHookMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.removeHook(msg, fee, memo, funds), options);
}
exports.useCw4GroupRemoveHookMutation = useCw4GroupRemoveHookMutation;
function useCw4GroupAddHookMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.addHook(msg, fee, memo, funds), options);
}
exports.useCw4GroupAddHookMutation = useCw4GroupAddHookMutation;
function useCw4GroupUpdateMembersMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateMembers(msg, fee, memo, funds), options);
}
exports.useCw4GroupUpdateMembersMutation = useCw4GroupUpdateMembersMutation;
function useCw4GroupUpdateAdminMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAdmin(msg, fee, memo, funds), options);
}
exports.useCw4GroupUpdateAdminMutation = useCw4GroupUpdateAdminMutation;
//# sourceMappingURL=Cw4Group.react-query.js.map