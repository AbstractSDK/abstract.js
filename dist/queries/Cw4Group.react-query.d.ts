/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee, Coin } from '@cosmjs/amino';
import { AdminResponse, Member, HooksResponse, ListMembersResponse, MemberResponse, TotalWeightResponse } from '../types/Cw4Group.types';
import { Cw4GroupQueryClient, Cw4GroupClient } from '../contracts/Cw4Group.client';
export declare const cw4GroupQueryKeys: {
    contract: readonly [{
        readonly contract: "cw4Group";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "cw4Group";
    }];
    admin: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "admin";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw4Group";
    }];
    totalWeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "total_weight";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw4Group";
    }];
    listMembers: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "list_members";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw4Group";
    }];
    member: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "member";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw4Group";
    }];
    hooks: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "hooks";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw4Group";
    }];
};
export interface Cw4GroupReactQuery<TResponse, TData = TResponse> {
    client: Cw4GroupQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Cw4GroupHooksQuery<TData> extends Cw4GroupReactQuery<HooksResponse, TData> {
}
export declare function useCw4GroupHooksQuery<TData = HooksResponse>({ client, options, }: Cw4GroupHooksQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw4GroupMemberQuery<TData> extends Cw4GroupReactQuery<MemberResponse, TData> {
    args: {
        addr: string;
        atHeight?: number;
    };
}
export declare function useCw4GroupMemberQuery<TData = MemberResponse>({ client, args, options, }: Cw4GroupMemberQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw4GroupListMembersQuery<TData> extends Cw4GroupReactQuery<ListMembersResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw4GroupListMembersQuery<TData = ListMembersResponse>({ client, args, options, }: Cw4GroupListMembersQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw4GroupTotalWeightQuery<TData> extends Cw4GroupReactQuery<TotalWeightResponse, TData> {
}
export declare function useCw4GroupTotalWeightQuery<TData = TotalWeightResponse>({ client, options, }: Cw4GroupTotalWeightQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw4GroupAdminQuery<TData> extends Cw4GroupReactQuery<AdminResponse, TData> {
}
export declare function useCw4GroupAdminQuery<TData = AdminResponse>({ client, options, }: Cw4GroupAdminQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw4GroupRemoveHookMutation {
    client: Cw4GroupClient;
    msg: {
        addr: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw4GroupRemoveHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupRemoveHookMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupRemoveHookMutation, unknown>;
export interface Cw4GroupAddHookMutation {
    client: Cw4GroupClient;
    msg: {
        addr: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw4GroupAddHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupAddHookMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupAddHookMutation, unknown>;
export interface Cw4GroupUpdateMembersMutation {
    client: Cw4GroupClient;
    msg: {
        add: Member[];
        remove: string[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw4GroupUpdateMembersMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateMembersMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupUpdateMembersMutation, unknown>;
export interface Cw4GroupUpdateAdminMutation {
    client: Cw4GroupClient;
    msg: {
        admin?: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw4GroupUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateAdminMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw4GroupUpdateAdminMutation, unknown>;
