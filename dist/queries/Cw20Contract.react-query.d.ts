/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { UseQueryOptions } from "@tanstack/react-query";
import { AllAccountsResponse, AllAllowancesResponse, AllowanceResponse, BalanceResponse, DownloadLogoResponse, MinterResponse, MarketingInfoResponse, TokenInfoResponse } from "../contracts/Cw20Contract";
import { Cw20QueryClient } from "../contracts/Cw20Contract";
export interface Cw20DownloadLogoQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<DownloadLogoResponse | undefined, Error, DownloadLogoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20DownloadLogoQuery({ client, options }: Cw20DownloadLogoQuery): import("@tanstack/react-query").UseQueryResult<DownloadLogoResponse, Error>;
export interface Cw20MarketingInfoQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<MarketingInfoResponse | undefined, Error, MarketingInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20MarketingInfoQuery({ client, options }: Cw20MarketingInfoQuery): import("@tanstack/react-query").UseQueryResult<MarketingInfoResponse, Error>;
export interface Cw20AllAccountsQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<AllAccountsResponse | undefined, Error, AllAccountsResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw20AllAccountsQuery({ client, args, options }: Cw20AllAccountsQuery): import("@tanstack/react-query").UseQueryResult<AllAccountsResponse, Error>;
export interface Cw20AllAllowancesQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<AllAllowancesResponse | undefined, Error, AllAllowancesResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useCw20AllAllowancesQuery({ client, args, options }: Cw20AllAllowancesQuery): import("@tanstack/react-query").UseQueryResult<AllAllowancesResponse, Error>;
export interface Cw20AllowanceQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<AllowanceResponse | undefined, Error, AllowanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        owner: string;
        spender: string;
    };
}
export declare function useCw20AllowanceQuery({ client, args, options }: Cw20AllowanceQuery): import("@tanstack/react-query").UseQueryResult<AllowanceResponse, Error>;
export interface Cw20MinterQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<MinterResponse | undefined, Error, MinterResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20MinterQuery({ client, options }: Cw20MinterQuery): import("@tanstack/react-query").UseQueryResult<MinterResponse, Error>;
export interface Cw20TokenInfoQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<TokenInfoResponse | undefined, Error, TokenInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20TokenInfoQuery({ client, options }: Cw20TokenInfoQuery): import("@tanstack/react-query").UseQueryResult<TokenInfoResponse, Error>;
export interface Cw20BalanceQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<BalanceResponse | undefined, Error, BalanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        address: string;
    };
}
export declare function useCw20BalanceQuery({ client, args, options }: Cw20BalanceQuery): import("@tanstack/react-query").UseQueryResult<BalanceResponse, Error>;
