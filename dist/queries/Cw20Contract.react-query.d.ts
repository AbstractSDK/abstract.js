/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.5.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { AllAccountsResponse, Expiration, AllAllowancesResponse, AllowanceResponse, BalanceResponse, DownloadLogoResponse, MinterResponse, MarketingInfoResponse, TokenInfoResponse } from "../contracts/Cw20Contract";
import { Cw20QueryClient, Cw20Client } from "../contracts/Cw20Contract";
export interface Cw20DownloadLogoQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<DownloadLogoResponse | undefined, Error, DownloadLogoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20DownloadLogoQuery({ client, options }: Cw20DownloadLogoQuery): import("@tanstack/react-query").UseQueryResult<DownloadLogoResponse, Error>;
export interface Cw20MarketingInfoQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<MarketingInfoResponse | undefined, Error, MarketingInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20MarketingInfoQuery({ client, options }: Cw20MarketingInfoQuery): import("@tanstack/react-query").UseQueryResult<MarketingInfoResponse, Error>;
export interface Cw20AllAccountsQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<AllAccountsResponse | undefined, Error, AllAccountsResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw20AllAccountsQuery({ client, args, options }: Cw20AllAccountsQuery): import("@tanstack/react-query").UseQueryResult<AllAccountsResponse, Error>;
export interface Cw20AllAllowancesQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<AllAllowancesResponse | undefined, Error, AllAllowancesResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useCw20AllAllowancesQuery({ client, args, options }: Cw20AllAllowancesQuery): import("@tanstack/react-query").UseQueryResult<AllAllowancesResponse, Error>;
export interface Cw20AllowanceQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<AllowanceResponse | undefined, Error, AllowanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        owner: string;
        spender: string;
    };
}
export declare function useCw20AllowanceQuery({ client, args, options }: Cw20AllowanceQuery): import("@tanstack/react-query").UseQueryResult<AllowanceResponse, Error>;
export interface Cw20MinterQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<MinterResponse | undefined, Error, MinterResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20MinterQuery({ client, options }: Cw20MinterQuery): import("@tanstack/react-query").UseQueryResult<MinterResponse, Error>;
export interface Cw20TokenInfoQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<TokenInfoResponse | undefined, Error, TokenInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export declare function useCw20TokenInfoQuery({ client, options }: Cw20TokenInfoQuery): import("@tanstack/react-query").UseQueryResult<TokenInfoResponse, Error>;
export interface Cw20BalanceQuery {
    client?: Cw20QueryClient;
    options?: Omit<UseQueryOptions<BalanceResponse | undefined, Error, BalanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
    args: {
        address: string;
    };
}
export declare function useCw20BalanceQuery({ client, args, options }: Cw20BalanceQuery): import("@tanstack/react-query").UseQueryResult<BalanceResponse, Error>;
export interface Cw20UploadLogoMutation {
    client: Cw20Client;
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20UploadLogoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UploadLogoMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20UploadLogoMutation, unknown>;
export interface Cw20UpdateMarketingMutation {
    client: Cw20Client;
    msg: {
        description?: string;
        marketing?: string;
        project?: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20UpdateMarketingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UpdateMarketingMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20UpdateMarketingMutation, unknown>;
export interface Cw20UpdateMinterMutation {
    client: Cw20Client;
    msg: {
        newMinter: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20UpdateMinterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UpdateMinterMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20UpdateMinterMutation, unknown>;
export interface Cw20MintMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        recipient: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20MintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20MintMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20MintMutation, unknown>;
export interface Cw20BurnFromMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        owner: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20BurnFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20BurnFromMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20BurnFromMutation, unknown>;
export interface Cw20SendFromMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        contract: string;
        msg: string;
        owner: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20SendFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20SendFromMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20SendFromMutation, unknown>;
export interface Cw20TransferFromMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        owner: string;
        recipient: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20TransferFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20TransferFromMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20TransferFromMutation, unknown>;
export interface Cw20DecreaseAllowanceMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        expires?: Expiration;
        spender: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20DecreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20DecreaseAllowanceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20DecreaseAllowanceMutation, unknown>;
export interface Cw20IncreaseAllowanceMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        expires?: Expiration;
        spender: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20IncreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IncreaseAllowanceMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20IncreaseAllowanceMutation, unknown>;
export interface Cw20SendMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        contract: string;
        msg: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20SendMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20SendMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20SendMutation, unknown>;
export interface Cw20BurnMutation {
    client: Cw20Client;
    msg: {
        amount: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20BurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20BurnMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20BurnMutation, unknown>;
export interface Cw20TransferMutation {
    client: Cw20Client;
    msg: {
        amount: string;
        recipient: string;
    };
    args: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: readonly Coin[];
    };
}
export declare function useCw20TransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20TransferMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20TransferMutation, unknown>;
