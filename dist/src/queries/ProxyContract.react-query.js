/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { useQuery } from "react-query";
export function useProxyProxyAssetsQuery({ client, args, options }) {
    return useQuery(["proxyProxyAssets", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.proxyAssets({
        iterLimit: args.iterLimit,
        lastAssetName: args.lastAssetName
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useProxyProxyAssetConfigQuery({ client, args, options }) {
    return useQuery(["proxyProxyAssetConfig", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.proxyAssetConfig({
        identifier: args.identifier
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useProxyHoldingAmountQuery({ client, args, options }) {
    return useQuery(["proxyHoldingAmount", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.holdingAmount({
        identifier: args.identifier
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useProxyHoldingValueQuery({ client, args, options }) {
    return useQuery(["proxyHoldingValue", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.holdingValue({
        identifier: args.identifier
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useProxyTotalValueQuery({ client, options }) {
    return useQuery(["proxyTotalValue", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.totalValue() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useProxyConfigQuery({ client, options }) {
    return useQuery(["proxyConfig", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.config() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
