/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { useQuery } from "react-query";
export function useSubscriptionContributorStateQuery({ client, args, options }) {
    return useQuery(["subscriptionContributorState", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.contributorState({
        osId: args.osId
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useSubscriptionSubscriberStateQuery({ client, args, options }) {
    return useQuery(["subscriptionSubscriberState", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.subscriberState({
        osId: args.osId
    }) : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useSubscriptionFeeQuery({ client, options }) {
    return useQuery(["subscriptionFee", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.fee() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useSubscriptionConfigQuery({ client, options }) {
    return useQuery(["subscriptionConfig", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.config() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useSubscriptionStateQuery({ client, options }) {
    return useQuery(["subscriptionState", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.state() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
export function useSubscriptionBaseQuery({ client, options }) {
    return useQuery(["subscriptionBase", client === null || client === void 0 ? void 0 : client.contractAddress], () => client ? client.queryBase() : undefined, Object.assign(Object.assign({}, options), { enabled: !!client && (options === null || options === void 0 ? void 0 : options.enabled) }));
}
