/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.15.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { __awaiter } from "tslib";
export class ManagerQueryClient {
    constructor(client, contractAddress) {
        this.moduleVersions = ({ names }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                module_versions: {
                    names
                }
            });
        });
        this.moduleAddresses = ({ names }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                module_addresses: {
                    names
                }
            });
        });
        this.moduleInfos = ({ iterLimit, lastModuleName }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                module_infos: {
                    iter_limit: iterLimit,
                    last_module_name: lastModuleName
                }
            });
        });
        this.config = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                config: {}
            });
        });
        this.info = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                info: {}
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.moduleVersions = this.moduleVersions.bind(this);
        this.moduleAddresses = this.moduleAddresses.bind(this);
        this.moduleInfos = this.moduleInfos.bind(this);
        this.config = this.config.bind(this);
        this.info = this.info.bind(this);
    }
}
export class ManagerClient extends ManagerQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.setAdmin = ({ admin, governanceType }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                set_admin: {
                    admin,
                    governance_type: governanceType
                }
            }, fee, memo, funds);
        });
        this.createModule = ({ initMsg, module }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                create_module: {
                    init_msg: initMsg,
                    module
                }
            }, fee, memo, funds);
        });
        this.registerModule = ({ module, moduleAddr }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                register_module: {
                    module,
                    module_addr: moduleAddr
                }
            }, fee, memo, funds);
        });
        this.removeModule = ({ moduleName }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                remove_module: {
                    module_name: moduleName
                }
            }, fee, memo, funds);
        });
        this.execOnModule = ({ execMsg, moduleName }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                exec_on_module: {
                    exec_msg: execMsg,
                    module_name: moduleName
                }
            }, fee, memo, funds);
        });
        this.updateConfig = ({ root, vcAddr }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_config: {
                    root,
                    vc_addr: vcAddr
                }
            }, fee, memo, funds);
        });
        this.upgrade = ({ migrateMsg, module }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                upgrade: {
                    migrate_msg: migrateMsg,
                    module
                }
            }, fee, memo, funds);
        });
        this.suspendOs = ({ newStatus }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                suspend_os: {
                    new_status: newStatus
                }
            }, fee, memo, funds);
        });
        this.updateInfo = ({ description, link, osName }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_info: {
                    description,
                    link,
                    os_name: osName
                }
            }, fee, memo, funds);
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.setAdmin = this.setAdmin.bind(this);
        this.createModule = this.createModule.bind(this);
        this.registerModule = this.registerModule.bind(this);
        this.removeModule = this.removeModule.bind(this);
        this.execOnModule = this.execOnModule.bind(this);
        this.updateConfig = this.updateConfig.bind(this);
        this.upgrade = this.upgrade.bind(this);
        this.suspendOs = this.suspendOs.bind(this);
        this.updateInfo = this.updateInfo.bind(this);
    }
}
