/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { __awaiter } from "tslib";
export class ProxyQueryClient {
    constructor(client, contractAddress) {
        this.config = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                config: {}
            });
        });
        this.totalValue = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                total_value: {}
            });
        });
        this.holdingValue = ({ identifier }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                holding_value: {
                    identifier
                }
            });
        });
        this.holdingAmount = ({ identifier }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                holding_amount: {
                    identifier
                }
            });
        });
        this.proxyAssetConfig = ({ identifier }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                proxy_asset_config: {
                    identifier
                }
            });
        });
        this.proxyAssets = ({ iterLimit, lastAssetName }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                proxy_assets: {
                    iter_limit: iterLimit,
                    last_asset_name: lastAssetName
                }
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.config = this.config.bind(this);
        this.totalValue = this.totalValue.bind(this);
        this.holdingValue = this.holdingValue.bind(this);
        this.holdingAmount = this.holdingAmount.bind(this);
        this.proxyAssetConfig = this.proxyAssetConfig.bind(this);
        this.proxyAssets = this.proxyAssets.bind(this);
    }
}
export class ProxyClient extends ProxyQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.setAdmin = ({ admin }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                set_admin: {
                    admin
                }
            }, fee, memo, funds);
        });
        this.moduleAction = ({ msgs }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                module_action: {
                    msgs
                }
            }, fee, memo, funds);
        });
        this.addModule = ({ module }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                add_module: {
                    module
                }
            }, fee, memo, funds);
        });
        this.removeModule = ({ module }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                remove_module: {
                    module
                }
            }, fee, memo, funds);
        });
        this.updateAssets = ({ toAdd, toRemove }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_assets: {
                    to_add: toAdd,
                    to_remove: toRemove
                }
            }, fee, memo, funds);
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.setAdmin = this.setAdmin.bind(this);
        this.moduleAction = this.moduleAction.bind(this);
        this.addModule = this.addModule.bind(this);
        this.removeModule = this.removeModule.bind(this);
        this.updateAssets = this.updateAssets.bind(this);
    }
}
