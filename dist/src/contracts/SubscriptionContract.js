/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { __awaiter } from "tslib";
export class SubscriptionQueryClient {
    constructor(client, contractAddress) {
        this.queryBase = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                base: {}
            });
        });
        this.state = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                state: {}
            });
        });
        this.config = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                config: {}
            });
        });
        this.fee = () => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                fee: {}
            });
        });
        this.subscriberState = ({ osId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                subscriber_state: {
                    os_id: osId
                }
            });
        });
        this.contributorState = ({ osId }) => __awaiter(this, void 0, void 0, function* () {
            return this.client.queryContractSmart(this.contractAddress, {
                contributor_state: {
                    os_id: osId
                }
            });
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.queryBase = this.queryBase.bind(this);
        this.state = this.state.bind(this);
        this.config = this.config.bind(this);
        this.fee = this.fee.bind(this);
        this.subscriberState = this.subscriberState.bind(this);
        this.contributorState = this.contributorState.bind(this);
    }
}
export class SubscriptionClient extends SubscriptionQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        this.base = (fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                base: {}
            }, fee, memo, funds);
        });
        this.receive = ({ amount, msg, sender }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                receive: {
                    amount,
                    msg,
                    sender
                }
            }, fee, memo, funds);
        });
        this.pay = ({ osId }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                pay: {
                    os_id: osId
                }
            }, fee, memo, funds);
        });
        this.unsubscribe = ({ osIds }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                unsubscribe: {
                    os_ids: osIds
                }
            }, fee, memo, funds);
        });
        this.claimCompensation = ({ osId }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                claim_compensation: {
                    os_id: osId
                }
            }, fee, memo, funds);
        });
        this.claimEmissions = ({ osId }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                claim_emissions: {
                    os_id: osId
                }
            }, fee, memo, funds);
        });
        this.updateContributor = ({ basePerBlock, contributorOsId, expirationBlock, weight }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_contributor: {
                    base_per_block: basePerBlock,
                    contributor_os_id: contributorOsId,
                    expiration_block: expirationBlock,
                    weight
                }
            }, fee, memo, funds);
        });
        this.removeContributor = ({ osId }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                remove_contributor: {
                    os_id: osId
                }
            }, fee, memo, funds);
        });
        this.updateSubscriptionConfig = ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_subscription_config: {
                    factory_address: factoryAddress,
                    payment_asset: paymentAsset,
                    subscription_cost: subscriptionCost,
                    version_control_address: versionControlAddress
                }
            }, fee, memo, funds);
        });
        this.updateContributionConfig = ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare }, fee = "auto", memo, funds) => __awaiter(this, void 0, void 0, function* () {
            return yield this.client.execute(this.sender, this.contractAddress, {
                update_contribution_config: {
                    emission_user_share: emissionUserShare,
                    emissions_amp_factor: emissionsAmpFactor,
                    emissions_offset: emissionsOffset,
                    max_emissions_multiple: maxEmissionsMultiple,
                    project_token_info: projectTokenInfo,
                    protocol_income_share: protocolIncomeShare
                }
            }, fee, memo, funds);
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.base = this.base.bind(this);
        this.receive = this.receive.bind(this);
        this.pay = this.pay.bind(this);
        this.unsubscribe = this.unsubscribe.bind(this);
        this.claimCompensation = this.claimCompensation.bind(this);
        this.claimEmissions = this.claimEmissions.bind(this);
        this.updateContributor = this.updateContributor.bind(this);
        this.removeContributor = this.removeContributor.bind(this);
        this.updateSubscriptionConfig = this.updateSubscriptionConfig.bind(this);
        this.updateContributionConfig = this.updateContributionConfig.bind(this);
    }
}
