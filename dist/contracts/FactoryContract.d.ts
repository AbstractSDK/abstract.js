/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.5.8.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
export interface ConfigResponse {
    memory_contract: string;
    module_factory_address: string;
    next_os_id: number;
    owner: string;
    subscription_address?: string | null;
    version_control_contract: string;
}
export declare type ExecuteMsg = {
    receive: Cw20ReceiveMsg;
} | {
    update_config: {
        admin?: string | null;
        memory_contract?: string | null;
        module_factory_address?: string | null;
        subscription_address?: string | null;
        version_control_contract?: string | null;
    };
} | {
    create_os: {
        description?: string | null;
        governance: GovernanceDetails;
        link?: string | null;
        name: string;
    };
};
export declare type Uint128 = string;
export declare type Binary = string;
export declare type GovernanceDetails = {
    monarchy: {
        monarch: string;
    };
} | {
    external: {
        governance_address: string;
        governance_type: string;
    };
};
export interface Cw20ReceiveMsg {
    amount: Uint128;
    msg: Binary;
    sender: string;
}
export interface InstantiateMsg {
    memory_address: string;
    module_factory_address: string;
    version_control_address: string;
}
export declare type QueryMsg = {
    config: {};
};
export declare type FactoryExecuteMsg = ExecuteMsg;
export interface FactoryReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
}
export declare class FactoryQueryClient implements FactoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender, }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, memoryContract, moduleFactoryAddress, subscriptionAddress, versionControlContract, }: {
        admin?: string;
        memoryContract?: string;
        moduleFactoryAddress?: string;
        subscriptionAddress?: string;
        versionControlContract?: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    createOs: ({ description, governance, link, name, }: {
        description?: string;
        governance: GovernanceDetails;
        link?: string;
        name: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class FactoryClient extends FactoryQueryClient implements FactoryInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender, }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, memoryContract, moduleFactoryAddress, subscriptionAddress, versionControlContract, }: {
        admin?: string | undefined;
        memoryContract?: string | undefined;
        moduleFactoryAddress?: string | undefined;
        subscriptionAddress?: string | undefined;
        versionControlContract?: string | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    createOs: ({ description, governance, link, name, }: {
        description?: string | undefined;
        governance: GovernanceDetails;
        link?: string | undefined;
        name: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
