/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate';
import { StdFee } from '@cosmjs/amino';
export interface AdminResponse {
    admin?: string | null;
}
export interface AllowedResponse {
    gas_limit?: number | null;
    is_allowed: boolean;
}
export declare type Amount = {
    native: Coin;
} | {
    cw20: Cw20Coin;
};
export declare type Uint128 = string;
export interface ChannelResponse {
    balances: Amount[];
    info: ChannelInfo;
    total_sent: Amount[];
}
export interface Coin {
    amount: Uint128;
    denom: string;
}
export interface Cw20Coin {
    address: string;
    amount: Uint128;
}
export interface ChannelInfo {
    connection_id: string;
    counterparty_endpoint: IbcEndpoint;
    id: string;
}
export interface IbcEndpoint {
    channel_id: string;
    port_id: string;
}
export interface ConfigResponse {
    default_gas_limit?: number | null;
    default_timeout: number;
    gov_contract: string;
}
export declare type ExecuteMsg = {
    receive: Cw20ReceiveMsg;
} | {
    transfer: TransferMsg;
} | {
    allow: AllowMsg;
} | {
    update_admin: {
        admin: string;
    };
};
export declare type Binary = string;
export interface Cw20ReceiveMsg {
    amount: Uint128;
    msg: Binary;
    sender: string;
}
export interface TransferMsg {
    channel: string;
    remote_address: string;
    timeout?: number | null;
}
export interface AllowMsg {
    contract: string;
    gas_limit?: number | null;
}
export interface InitMsg {
    allowlist: AllowMsg[];
    default_gas_limit?: number | null;
    default_timeout: number;
    gov_contract: string;
}
export interface ListAllowedResponse {
    allow: AllowedInfo[];
}
export interface AllowedInfo {
    contract: string;
    gas_limit?: number | null;
}
export interface ListChannelsResponse {
    channels: ChannelInfo[];
}
export interface PortResponse {
    port_id: string;
}
export declare type QueryMsg = {
    port: {};
} | {
    list_channels: {};
} | {
    channel: {
        id: string;
    };
} | {
    config: {};
} | {
    admin: {};
} | {
    allowed: {
        contract: string;
    };
} | {
    list_allowed: {
        limit?: number | null;
        start_after?: string | null;
    };
};
export interface Cw20IcsReadOnlyInterface {
    contractAddress: string;
    port: () => Promise<PortResponse>;
    listChannels: () => Promise<ListChannelsResponse>;
    channel: ({ id }: {
        id: string;
    }) => Promise<ChannelResponse>;
    config: () => Promise<ConfigResponse>;
    admin: () => Promise<AdminResponse>;
    allowed: ({ contract }: {
        contract: string;
    }) => Promise<AllowedResponse>;
    listAllowed: ({ limit, startAfter, }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<ListAllowedResponse>;
}
export declare class Cw20IcsQueryClient implements Cw20IcsReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    port: () => Promise<PortResponse>;
    listChannels: () => Promise<ListChannelsResponse>;
    channel: ({ id }: {
        id: string;
    }) => Promise<ChannelResponse>;
    config: () => Promise<ConfigResponse>;
    admin: () => Promise<AdminResponse>;
    allowed: ({ contract }: {
        contract: string;
    }) => Promise<AllowedResponse>;
    listAllowed: ({ limit, startAfter, }: {
        limit?: number | undefined;
        startAfter?: string | undefined;
    }) => Promise<ListAllowedResponse>;
}
export interface Cw20IcsInterface extends Cw20IcsReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender, }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    transfer: ({ channel, remoteAddress, timeout, }: {
        channel: string;
        remoteAddress: string;
        timeout?: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    allow: ({ contract, gasLimit, }: {
        contract: string;
        gasLimit?: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin, }: {
        admin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class Cw20IcsClient extends Cw20IcsQueryClient implements Cw20IcsInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender, }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    transfer: ({ channel, remoteAddress, timeout, }: {
        channel: string;
        remoteAddress: string;
        timeout?: number | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    allow: ({ contract, gasLimit, }: {
        contract: string;
        gasLimit?: number | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateAdmin: ({ admin, }: {
        admin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
