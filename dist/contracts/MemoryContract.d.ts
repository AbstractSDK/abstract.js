/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.4.2.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate';
export declare type AssetInfoBase_for_Addr = {
    cw20: Addr;
} | {
    native: string;
};
export declare type Addr = string;
export interface AssetListResponse {
    assets: [string, AssetInfoBase_for_Addr][];
}
export interface AssetsResponse {
    assets: [string, AssetInfoBase_for_Addr][];
}
export interface ContractListResponse {
    contracts: [string, string][];
}
export interface ContractsResponse {
    contracts: [string, string][];
}
export interface InstantiateMsg {
}
export declare type QueryMsg = {
    assets: {
        names: string[];
    };
} | {
    contracts: {
        names: string[];
    };
} | {
    contract_list: {
        iter_limit?: number | null;
        last_contract_name?: string | null;
    };
} | {
    asset_list: {
        iter_limit?: number | null;
        last_asset_name?: string | null;
    };
};
export interface MemoryReadOnlyInterface {
    contractAddress: string;
    assets: ({ names }: {
        names: string[];
    }) => Promise<AssetsResponse>;
    contracts: ({ names }: {
        names: string[];
    }) => Promise<ContractsResponse>;
    contractList: ({ iterLimit, lastContractName, }: {
        iterLimit?: number;
        lastContractName?: string;
    }) => Promise<ContractListResponse>;
    assetList: ({ iterLimit, lastAssetName, }: {
        iterLimit?: number;
        lastAssetName?: string;
    }) => Promise<AssetListResponse>;
}
export declare class MemoryQueryClient implements MemoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    assets: ({ names }: {
        names: string[];
    }) => Promise<AssetsResponse>;
    contracts: ({ names }: {
        names: string[];
    }) => Promise<ContractsResponse>;
    contractList: ({ iterLimit, lastContractName, }: {
        iterLimit?: number | undefined;
        lastContractName?: string | undefined;
    }) => Promise<ContractListResponse>;
    assetList: ({ iterLimit, lastAssetName, }: {
        iterLimit?: number | undefined;
        lastAssetName?: string | undefined;
    }) => Promise<AssetListResponse>;
}
