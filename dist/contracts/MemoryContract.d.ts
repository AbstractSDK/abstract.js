/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.5.8.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient } from "@cosmjs/cosmwasm-stargate";
export declare type AssetEntry = string;
export declare type AssetInfoBaseForAddr = {
    native: string;
} | {
    cw20: Addr;
} | {
    cw1155: [Addr, string];
};
export declare type Addr = string;
export interface AssetListResponse {
    assets: [AssetEntry, AssetInfoBaseForAddr][];
}
export interface AssetsResponse {
    assets: [AssetEntry, AssetInfoBaseForAddr][];
}
export interface ContractListResponse {
    contracts: [ContractEntry, string][];
}
export interface ContractEntry {
    contract: string;
    protocol: string;
}
export interface ContractsResponse {
    contracts: [ContractEntry, string][];
}
export interface InstantiateMsg {
}
export declare type QueryMsg = {
    assets: {
        names: string[];
    };
} | {
    contracts: {
        names: ContractEntry[];
    };
} | {
    contract_list: {
        iter_limit?: number | null;
        last_contract?: ContractEntry | null;
    };
} | {
    asset_list: {
        iter_limit?: number | null;
        last_asset_name?: string | null;
    };
};
export interface MemoryReadOnlyInterface {
    contractAddress: string;
    assets: ({ names }: {
        names: string[];
    }) => Promise<AssetsResponse>;
    contracts: ({ names }: {
        names: ContractEntry[];
    }) => Promise<ContractsResponse>;
    contractList: ({ iterLimit, lastContract }: {
        iterLimit?: number;
        lastContract?: ContractEntry;
    }) => Promise<ContractListResponse>;
    assetList: ({ iterLimit, lastAssetName }: {
        iterLimit?: number;
        lastAssetName?: string;
    }) => Promise<AssetListResponse>;
}
export declare class MemoryQueryClient implements MemoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    assets: ({ names }: {
        names: string[];
    }) => Promise<AssetsResponse>;
    contracts: ({ names }: {
        names: ContractEntry[];
    }) => Promise<ContractsResponse>;
    contractList: ({ iterLimit, lastContract }: {
        iterLimit?: number | undefined;
        lastContract?: ContractEntry | undefined;
    }) => Promise<ContractListResponse>;
    assetList: ({ iterLimit, lastAssetName }: {
        iterLimit?: number | undefined;
        lastAssetName?: string | undefined;
    }) => Promise<AssetListResponse>;
}
