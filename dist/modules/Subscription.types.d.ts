/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
export declare type Addr = string;
export interface AddOnState {
    memory: Memory;
    proxy_address: Addr;
}
export interface Memory {
    address: Addr;
}
export declare type AssetInfoBaseForAddr = {
    native: string;
} | {
    cw20: Addr;
} | {
    cw1155: [Addr, string];
};
export declare type AssetInfoBaseForString = {
    native: string;
} | {
    cw20: string;
} | {
    cw1155: [string, string];
};
export declare type BaseResponse = {
    config: {};
} | {
    admin: {};
};
export declare type Decimal = string;
export declare type Uint128 = string;
export declare type EmissionType = 'None' | {
    BlockShared: [Decimal, AssetInfoBaseForAddr];
} | {
    BlockPerUser: [Decimal, AssetInfoBaseForAddr];
} | {
    IncomeBased: AssetInfoBaseForAddr;
};
export interface ConfigResponse {
    contribution: ContributionConfig;
    subscription: SubscriptionConfig;
}
export interface ContributionConfig {
    emission_user_share: Decimal;
    emissions_amp_factor: Uint128;
    emissions_offset: Uint128;
    max_emissions_multiple: Decimal;
    protocol_income_share: Decimal;
    token_info: AssetInfoBaseForAddr;
}
export interface SubscriptionConfig {
    factory_address: Addr;
    payment_asset: AssetInfoBaseForAddr;
    subscription_cost_per_block: Decimal;
    subscription_per_block_emissions: EmissionType;
    version_control_address: Addr;
}
export declare type Uint64 = string;
export interface ContributorStateResponse {
    compensation: Compensation;
}
export interface Compensation {
    base_per_block: Decimal;
    expiration_block: Uint64;
    last_claim_block: Uint64;
    weight: number;
}
export declare type ExecuteMsg = {
    base: AddOnExecuteMsg;
} | {
    receive: Cw20ReceiveMsg;
} | {
    pay: {
        os_id: number;
    };
} | {
    unsubscribe: {
        os_ids: number[];
    };
} | {
    claim_compensation: {
        os_id: number;
    };
} | {
    claim_emissions: {
        os_id: number;
    };
} | {
    update_contributor: {
        base_per_block?: Decimal | null;
        contributor_os_id: number;
        expiration_block?: Uint64 | null;
        weight?: Uint64 | null;
    };
} | {
    remove_contributor: {
        os_id: number;
    };
} | {
    update_subscription_config: {
        factory_address?: string | null;
        payment_asset?: AssetInfoBaseForString | null;
        subscription_cost?: Decimal | null;
        version_control_address?: string | null;
    };
} | {
    update_contribution_config: {
        emission_user_share?: Decimal | null;
        emissions_amp_factor?: Uint128 | null;
        emissions_offset?: Uint128 | null;
        max_emissions_multiple?: Decimal | null;
        project_token_info?: AssetInfoBaseForString | null;
        protocol_income_share?: Decimal | null;
    };
};
export declare type AddOnExecuteMsg = {
    update_config: {
        memory_address?: string | null;
    };
};
export declare type Binary = string;
export interface Cw20ReceiveMsg {
    amount: Uint128;
    msg: Binary;
    sender: string;
}
export interface FeeResponse {
    fee: AssetBaseForAddr;
}
export interface AssetBaseForAddr {
    amount: Uint128;
    info: AssetInfoBaseForAddr;
}
export declare type UncheckedEmissionType = 'None' | {
    BlockShared: [Decimal, AssetInfoBaseForString];
} | {
    BlockPerUser: [Decimal, AssetInfoBaseForString];
} | {
    IncomeBased: AssetInfoBaseForString;
};
export interface InstantiateMsg {
    base: AddOnInstantiateMsg;
    contribution?: ContributionInstantiateMsg | null;
    subscription: SubscriptionInstantiateMsg;
}
export interface AddOnInstantiateMsg {
    memory_address: string;
}
export interface ContributionInstantiateMsg {
    emission_user_share: Decimal;
    emissions_amp_factor: Uint128;
    emissions_offset: Uint128;
    income_averaging_period: Uint64;
    max_emissions_multiple: Decimal;
    protocol_income_share: Decimal;
    token_info: AssetInfoBaseForString;
}
export interface SubscriptionInstantiateMsg {
    factory_addr: string;
    payment_asset: AssetInfoBaseForString;
    subscription_cost_per_block: Decimal;
    subscription_per_block_emissions: UncheckedEmissionType;
    version_control_addr: string;
}
export declare type QueryMsg = {
    base: AddOnQueryMsg;
} | {
    state: {};
} | {
    config: {};
} | {
    fee: {};
} | {
    subscriber_state: {
        os_id: number;
    };
} | {
    contributor_state: {
        os_id: number;
    };
};
export declare type AddOnQueryMsg = {
    config: {};
} | {
    admin: {};
};
export interface StateResponse {
    contribution: ContributionState;
    subscription: SubscriptionState;
}
export interface ContributionState {
    emissions: Decimal;
    expense: Decimal;
    income_target: Decimal;
    total_weight: Uint128;
}
export interface SubscriptionState {
    active_subs: number;
}
export interface SubscriberStateResponse {
    currently_subscribed: boolean;
    subscriber_details: Subscriber;
}
export interface Subscriber {
    expiration_block: number;
    last_emission_claim_block: number;
    manager_addr: Addr;
}
