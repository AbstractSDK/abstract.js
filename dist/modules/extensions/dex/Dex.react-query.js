"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDexBaseMutation = exports.useDexAppMutation = exports.useDexIbcCallbackMutation = exports.useDexReceiveMutation = exports.useDexBaseQuery = exports.useDexAppQuery = exports.dexQueries = exports.dexQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.dexQueryKeys = {
    contract: [{
            contract: "dex"
        }],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.dexQueryKeys.contract[0]), { address: contractAddress })],
    base: (contractAddress, args) => [Object.assign(Object.assign({}, exports.dexQueryKeys.address(contractAddress)[0]), { method: "base", args })],
    app: (contractAddress, args) => [Object.assign(Object.assign({}, exports.dexQueryKeys.address(contractAddress)[0]), { method: "app", args })]
};
exports.dexQueries = {
    base: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.dexQueryKeys.base(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.base() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    app: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.dexQueryKeys.app(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.app() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }))
};
function useDexAppQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.dexQueryKeys.app(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.app() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useDexAppQuery = useDexAppQuery;
function useDexBaseQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.dexQueryKeys.base(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.base() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useDexBaseQuery = useDexBaseQuery;
function useDexReceiveMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.receive(msg, fee, memo, funds), options);
}
exports.useDexReceiveMutation = useDexReceiveMutation;
function useDexIbcCallbackMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.ibcCallback(msg, fee, memo, funds), options);
}
exports.useDexIbcCallbackMutation = useDexIbcCallbackMutation;
function useDexAppMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.app(msg, fee, memo, funds), options);
}
exports.useDexAppMutation = useDexAppMutation;
function useDexBaseMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.base(msg, fee, memo, funds), options);
}
exports.useDexBaseMutation = useDexBaseMutation;
//# sourceMappingURL=Dex.react-query.js.map