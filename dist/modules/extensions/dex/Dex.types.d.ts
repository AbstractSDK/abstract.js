/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
export declare type Addr = string;
export interface ConfigResponse {
    ans_host_address: Addr;
    dependencies: string[];
    version_control_address: Addr;
}
export declare type ExecuteMsg = {
    base: BaseExecuteMsg;
} | {
    app: ExtensionRequestMsgForDexRequestMsg;
} | {
    ibc_callback: IbcResponseMsg;
} | {
    receive: Empty;
};
export declare type BaseExecuteMsg = {
    update_traders: {
        to_add?: string[] | null;
        to_remove?: string[] | null;
    };
} | {
    remove: {};
};
export declare type DexAction = {
    provide_liquidity: {
        assets: AnsAsset[];
        max_spread?: Decimal | null;
    };
} | {
    provide_liquidity_symmetric: {
        offer_asset: AnsAsset;
        paired_assets: AssetEntry[];
    };
} | {
    withdraw_liquidity: {
        amount: Uint128;
        lp_token: AssetEntry;
    };
} | {
    swap: {
        ask_asset: AssetEntry;
        belief_price?: Decimal | null;
        max_spread?: Decimal | null;
        offer_asset: AnsAsset;
    };
} | {
    custom_swap: {
        ask_assets: AnsAsset[];
        max_spread?: Decimal | null;
        offer_assets: AnsAsset[];
        router?: SwapRouter | null;
    };
};
export declare type Uint128 = string;
export declare type AssetEntry = string;
export declare type Decimal = string;
export declare type SwapRouter = "matrix" | {
    custom: string;
};
export declare type StdAck = {
    result: Binary;
} | {
    error: string;
};
export declare type Binary = string;
export interface ExtensionRequestMsgForDexRequestMsg {
    proxy_address?: string | null;
    request: DexRequestMsg;
}
export interface DexRequestMsg {
    action: DexAction;
    dex: string;
}
export interface AnsAsset {
    amount: Uint128;
    info: AssetEntry;
    [k: string]: unknown;
}
export interface IbcResponseMsg {
    id: string;
    msg: StdAck;
}
export interface Empty {
    [k: string]: unknown;
}
export interface ExtensionResponse {
    commission: [AssetEntry, Uint128];
    pool: ContractEntry;
    return_amount: Uint128;
    spread_amount: Uint128;
}
export interface ContractEntry {
    contract: string;
    protocol: string;
    [k: string]: unknown;
}
export interface InstantiateMsg {
    app: Empty;
    base: BaseInstantiateMsg;
}
export interface BaseInstantiateMsg {
    ans_host_address: string;
    version_control_address: string;
}
export declare type QueryMsg = {
    base: BaseQueryMsg;
} | {
    app: DexQueryMsg;
};
export declare type BaseQueryMsg = {
    config: {};
} | {
    traders: {
        proxy_address: string;
    };
};
export declare type DexQueryMsg = {
    simulate_swap: {
        ask_asset: AssetEntry;
        dex?: string | null;
        offer_asset: AnsAsset;
    };
};
export interface TradersResponse {
    traders: Addr[];
}
