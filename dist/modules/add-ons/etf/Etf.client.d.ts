/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { BaseResponse, Uint128, Binary, Decimal, AssetBaseForString, StateResponse } from "./Etf.types";
export interface EtfReadOnlyInterface {
    contractAddress: string;
    queryBase: () => Promise<BaseResponse>;
    state: () => Promise<StateResponse>;
}
export declare class EtfQueryClient implements EtfReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    queryBase: () => Promise<BaseResponse>;
    state: () => Promise<StateResponse>;
}
export interface EtfInterface extends EtfReadOnlyInterface {
    contractAddress: string;
    sender: string;
    base: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    provideLiquidity: ({ asset }: {
        asset: AssetBaseForString;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updatePool: ({ assetsToAdd, assetsToRemove, depositAsset }: {
        assetsToAdd: string[];
        assetsToRemove: string[];
        depositAsset?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    import: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setFee: ({ fee }: {
        fee: Decimal;
    }, txfee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class EtfClient extends EtfQueryClient implements EtfInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    base: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    provideLiquidity: ({ asset }: {
        asset: AssetBaseForString;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updatePool: ({ assetsToAdd, assetsToRemove, depositAsset }: {
        assetsToAdd: string[];
        assetsToRemove: string[];
        depositAsset?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    import: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setFee: ({ fee }: {
        fee: Decimal;
    }, txFee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
