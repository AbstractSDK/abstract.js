/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { BaseResponse, Decimal, Cw20ReceiveMsg, AssetBaseForString, StateResponse } from "./Etf.types";
import { EtfQueryClient, EtfClient } from "./Etf.client";
export declare const etfQueryKeys: {
    contract: readonly [{
        readonly contract: "etf";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "etf";
    }];
    base: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "base";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "etf";
    }];
    state: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "state";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "etf";
    }];
};
export interface EtfReactQuery<TResponse, TData = TResponse> {
    client: EtfQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface EtfStateQuery<TData> extends EtfReactQuery<StateResponse, TData> {
}
export declare function useEtfStateQuery<TData = StateResponse>({ client, options }: EtfStateQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface EtfBaseQuery<TData> extends EtfReactQuery<BaseResponse, TData> {
}
export declare function useEtfBaseQuery<TData = BaseResponse>({ client, options }: EtfBaseQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface EtfSetFeeMutation {
    client: EtfClient;
    msg: {
        fee: Decimal;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useEtfSetFeeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfSetFeeMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, EtfSetFeeMutation, unknown>;
export interface EtfImportMutation {
    client: EtfClient;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useEtfImportMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfImportMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, EtfImportMutation, unknown>;
export interface EtfUpdatePoolMutation {
    client: EtfClient;
    msg: {
        assetsToAdd: string[];
        assetsToRemove: string[];
        depositAsset?: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useEtfUpdatePoolMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfUpdatePoolMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, EtfUpdatePoolMutation, unknown>;
export interface EtfProvideLiquidityMutation {
    client: EtfClient;
    msg: {
        asset: AssetBaseForString;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useEtfProvideLiquidityMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfProvideLiquidityMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, EtfProvideLiquidityMutation, unknown>;
export interface EtfReceiveMutation {
    client: EtfClient;
    msg: Cw20ReceiveMsg;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useEtfReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfReceiveMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, EtfReceiveMutation, unknown>;
