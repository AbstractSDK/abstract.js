"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EtfClient = exports.EtfQueryClient = void 0;
class EtfQueryClient {
    constructor(client, contractAddress) {
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contractAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "queryBase", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => __awaiter(this, void 0, void 0, function* () {
                return this.client.queryContractSmart(this.contractAddress, {
                    base: {},
                });
            })
        });
        Object.defineProperty(this, "state", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: () => __awaiter(this, void 0, void 0, function* () {
                return this.client.queryContractSmart(this.contractAddress, {
                    state: {},
                });
            })
        });
        this.client = client;
        this.contractAddress = contractAddress;
        this.queryBase = this.queryBase.bind(this);
        this.state = this.state.bind(this);
    }
}
exports.EtfQueryClient = EtfQueryClient;
class EtfClient extends EtfQueryClient {
    constructor(client, sender, contractAddress) {
        super(client, contractAddress);
        Object.defineProperty(this, "client", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "sender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contractAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "base", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (fee = 'auto', memo, funds) => __awaiter(this, void 0, void 0, function* () {
                return yield this.client.execute(this.sender, this.contractAddress, {
                    base: {},
                }, fee, memo, funds);
            })
        });
        Object.defineProperty(this, "receive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ amount, msg, sender, }, fee = 'auto', memo, funds) => __awaiter(this, void 0, void 0, function* () {
                return yield this.client.execute(this.sender, this.contractAddress, {
                    receive: {
                        amount,
                        msg,
                        sender,
                    },
                }, fee, memo, funds);
            })
        });
        Object.defineProperty(this, "provideLiquidity", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ asset, }, fee = 'auto', memo, funds) => __awaiter(this, void 0, void 0, function* () {
                return yield this.client.execute(this.sender, this.contractAddress, {
                    provide_liquidity: {
                        asset,
                    },
                }, fee, memo, funds);
            })
        });
        Object.defineProperty(this, "updatePool", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ assetsToAdd, assetsToRemove, depositAsset, }, fee = 'auto', memo, funds) => __awaiter(this, void 0, void 0, function* () {
                return yield this.client.execute(this.sender, this.contractAddress, {
                    update_pool: {
                        assets_to_add: assetsToAdd,
                        assets_to_remove: assetsToRemove,
                        deposit_asset: depositAsset,
                    },
                }, fee, memo, funds);
            })
        });
        Object.defineProperty(this, "import", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (fee = 'auto', memo, funds) => __awaiter(this, void 0, void 0, function* () {
                return yield this.client.execute(this.sender, this.contractAddress, {
                    import: {},
                }, fee, memo, funds);
            })
        });
        Object.defineProperty(this, "setFee", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ fee, }, txFee = 'auto', memo, funds) => __awaiter(this, void 0, void 0, function* () {
                return yield this.client.execute(this.sender, this.contractAddress, {
                    set_fee: {
                        fee,
                    },
                }, txFee, memo, funds);
            })
        });
        this.client = client;
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.base = this.base.bind(this);
        this.receive = this.receive.bind(this);
        this.provideLiquidity = this.provideLiquidity.bind(this);
        this.updatePool = this.updatePool.bind(this);
        this.import = this.import.bind(this);
        this.setFee = this.setFee.bind(this);
    }
}
exports.EtfClient = EtfClient;
//# sourceMappingURL=Etf.client.js.map