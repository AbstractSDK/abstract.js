/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { BaseExecuteMsg, ApiRequestMsgForRequestMsg } from "./Staking.types";
import { StakingQueryClient, StakingClient } from "./Staking.client";
export declare const stakingQueryKeys: {
    contract: readonly [{
        readonly contract: "staking";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "staking";
    }];
};
export interface StakingReactQuery<TResponse, TData = TResponse> {
    client: StakingQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface StakingConfigureMutation {
    client: StakingClient;
    msg: BaseExecuteMsg;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStakingConfigureMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StakingConfigureMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StakingConfigureMutation, unknown>;
export interface StakingRequestMutation {
    client: StakingClient;
    msg: ApiRequestMsgForRequestMsg;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useStakingRequestMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, StakingRequestMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, StakingRequestMutation, unknown>;
