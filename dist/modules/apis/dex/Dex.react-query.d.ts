/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { ApiResponse, BaseExecuteMsg, ApiRequestMsgForEmpty } from "./Dex.types";
import { DexQueryClient, DexClient } from "./Dex.client";
export declare const dexQueryKeys: {
    contract: readonly [{
        readonly contract: "dex";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "dex";
    }];
    api: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "api";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "dex";
    }];
    base: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "base";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "dex";
    }];
};
export interface DexReactQuery<TResponse, TData = TResponse> {
    client: DexQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface DexApiQuery<TData> extends DexReactQuery<ApiResponse, TData> {
}
export declare function useDexApiQuery<TData = ApiResponse>({ client, options }: DexApiQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface DexConfigureMutation {
    client: DexClient;
    msg: BaseExecuteMsg;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useDexConfigureMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DexConfigureMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, DexConfigureMutation, unknown>;
export interface DexRequestMutation {
    client: DexClient;
    msg: ApiRequestMsgForEmpty;
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useDexRequestMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DexRequestMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, DexRequestMutation, unknown>;
