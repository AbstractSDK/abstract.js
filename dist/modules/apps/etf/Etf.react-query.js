"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEtfBaseMutation = exports.useEtfAppMutation = exports.useEtfIbcCallbackMutation = exports.useEtfReceiveMutation = exports.useEtfBaseQuery = exports.useEtfAppQuery = exports.etfQueries = exports.etfQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.etfQueryKeys = {
    contract: [{
            contract: "etf"
        }],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.etfQueryKeys.contract[0]), { address: contractAddress })],
    base: (contractAddress, args) => [Object.assign(Object.assign({}, exports.etfQueryKeys.address(contractAddress)[0]), { method: "base", args })],
    app: (contractAddress, args) => [Object.assign(Object.assign({}, exports.etfQueryKeys.address(contractAddress)[0]), { method: "app", args })]
};
exports.etfQueries = {
    base: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.etfQueryKeys.base(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.base() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    app: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.etfQueryKeys.app(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.app() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }))
};
function useEtfAppQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.etfQueryKeys.app(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.app() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useEtfAppQuery = useEtfAppQuery;
function useEtfBaseQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.etfQueryKeys.base(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.base() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useEtfBaseQuery = useEtfBaseQuery;
function useEtfReceiveMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.receive(msg, fee, memo, funds), options);
}
exports.useEtfReceiveMutation = useEtfReceiveMutation;
function useEtfIbcCallbackMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.ibcCallback(msg, fee, memo, funds), options);
}
exports.useEtfIbcCallbackMutation = useEtfIbcCallbackMutation;
function useEtfAppMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.app(msg, fee, memo, funds), options);
}
exports.useEtfAppMutation = useEtfAppMutation;
function useEtfBaseMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.base(msg, fee, memo, funds), options);
}
exports.useEtfBaseMutation = useEtfBaseMutation;
//# sourceMappingURL=Etf.react-query.js.map