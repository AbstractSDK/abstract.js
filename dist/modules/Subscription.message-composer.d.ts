/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { AssetInfoBaseForString, Decimal, Uint128, Uint64, Binary } from "./Subscription.types";
export interface SubscriptionMessage {
    contractAddress: string;
    sender: string;
    base: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    pay: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unsubscribe: ({ osIds }: {
        osIds: number[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimCompensation: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimEmissions: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateContributor: ({ basePerBlock, contributorOsId, expirationBlock, weight }: {
        basePerBlock?: Decimal;
        contributorOsId: number;
        expirationBlock?: Uint64;
        weight?: Uint64;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeContributor: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateSubscriptionConfig: ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress }: {
        factoryAddress?: string;
        paymentAsset?: AssetInfoBaseForString;
        subscriptionCost?: Decimal;
        versionControlAddress?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateContributionConfig: ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare }: {
        emissionUserShare?: Decimal;
        emissionsAmpFactor?: Uint128;
        emissionsOffset?: Uint128;
        maxEmissionsMultiple?: Decimal;
        projectTokenInfo?: AssetInfoBaseForString;
        protocolIncomeShare?: Decimal;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class SubscriptionMessageComposer implements SubscriptionMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    base: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
    receive: ({ amount, msg, sender }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    pay: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    unsubscribe: ({ osIds }: {
        osIds: number[];
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimCompensation: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    claimEmissions: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateContributor: ({ basePerBlock, contributorOsId, expirationBlock, weight }: {
        basePerBlock?: string | undefined;
        contributorOsId: number;
        expirationBlock?: string | undefined;
        weight?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeContributor: ({ osId }: {
        osId: number;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateSubscriptionConfig: ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress }: {
        factoryAddress?: string | undefined;
        paymentAsset?: AssetInfoBaseForString | undefined;
        subscriptionCost?: string | undefined;
        versionControlAddress?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateContributionConfig: ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare }: {
        emissionUserShare?: string | undefined;
        emissionsAmpFactor?: string | undefined;
        emissionsOffset?: string | undefined;
        maxEmissionsMultiple?: string | undefined;
        projectTokenInfo?: AssetInfoBaseForString | undefined;
        protocolIncomeShare?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
