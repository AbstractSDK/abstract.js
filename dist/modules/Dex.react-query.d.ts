/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee, Coin } from '@cosmjs/amino';
import { ConfigResponse, ApiRequestMsgForRequestMsg, TradersResponse } from './Dex.types';
import { DexQueryClient, DexClient } from './Dex.client';
export declare const dexQueryKeys: {
    contract: readonly [{
        readonly contract: "dex";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "dex";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "dex";
    }];
    traders: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "traders";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "dex";
    }];
};
export interface DexReactQuery<TResponse, TData = TResponse> {
    client: DexQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface DexTradersQuery<TData> extends DexReactQuery<TradersResponse, TData> {
    args: {
        proxyAddress: string;
    };
}
export declare function useDexTradersQuery<TData = TradersResponse>({ client, args, options, }: DexTradersQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface DexConfigQuery<TData> extends DexReactQuery<ConfigResponse, TData> {
}
export declare function useDexConfigQuery<TData = ConfigResponse>({ client, options, }: DexConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface DexRequestMutation {
    client: DexClient;
    msg: ApiRequestMsgForRequestMsg;
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useDexRequestMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DexRequestMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, DexRequestMutation, unknown>;
