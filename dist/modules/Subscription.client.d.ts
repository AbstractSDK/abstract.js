/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import { AssetInfoBaseForString, BaseResponse, Decimal, Uint128, ConfigResponse, Uint64, ContributorStateResponse, AddOnExecuteMsg, Binary, FeeResponse, StateResponse, SubscriberStateResponse } from './Subscription.types';
export interface SubscriptionReadOnlyInterface {
    contractAddress: string;
    queryBase: () => Promise<BaseResponse>;
    state: () => Promise<StateResponse>;
    config: () => Promise<ConfigResponse>;
    fee: () => Promise<FeeResponse>;
    subscriberState: ({ osId }: {
        osId: number;
    }) => Promise<SubscriberStateResponse>;
    contributorState: ({ osId }: {
        osId: number;
    }) => Promise<ContributorStateResponse>;
}
export declare class SubscriptionQueryClient implements SubscriptionReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    queryBase: () => Promise<BaseResponse>;
    state: () => Promise<StateResponse>;
    config: () => Promise<ConfigResponse>;
    fee: () => Promise<FeeResponse>;
    subscriberState: ({ osId }: {
        osId: number;
    }) => Promise<SubscriberStateResponse>;
    contributorState: ({ osId }: {
        osId: number;
    }) => Promise<ContributorStateResponse>;
}
export interface SubscriptionInterface extends SubscriptionReadOnlyInterface {
    contractAddress: string;
    sender: string;
    base: (msg: AddOnExecuteMsg, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender, }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pay: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unsubscribe: ({ osIds, }: {
        osIds: number[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimCompensation: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimEmissions: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateContributor: ({ basePerBlock, contributorOsId, expirationBlock, weight, }: {
        basePerBlock?: Decimal;
        contributorOsId: number;
        expirationBlock?: Uint64;
        weight?: Uint64;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeContributor: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateSubscriptionConfig: ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress, }: {
        factoryAddress?: string;
        paymentAsset?: AssetInfoBaseForString;
        subscriptionCost?: Decimal;
        versionControlAddress?: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateContributionConfig: ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare, }: {
        emissionUserShare?: Decimal;
        emissionsAmpFactor?: Uint128;
        emissionsOffset?: Uint128;
        maxEmissionsMultiple?: Decimal;
        projectTokenInfo?: AssetInfoBaseForString;
        protocolIncomeShare?: Decimal;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class SubscriptionClient extends SubscriptionQueryClient implements SubscriptionInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    base: (msg: AddOnExecuteMsg, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender, }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    pay: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    unsubscribe: ({ osIds, }: {
        osIds: number[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimCompensation: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    claimEmissions: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateContributor: ({ basePerBlock, contributorOsId, expirationBlock, weight, }: {
        basePerBlock?: string | undefined;
        contributorOsId: number;
        expirationBlock?: string | undefined;
        weight?: string | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeContributor: ({ osId, }: {
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateSubscriptionConfig: ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress, }: {
        factoryAddress?: string | undefined;
        paymentAsset?: AssetInfoBaseForString | undefined;
        subscriptionCost?: string | undefined;
        versionControlAddress?: string | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateContributionConfig: ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare, }: {
        emissionUserShare?: string | undefined;
        emissionsAmpFactor?: string | undefined;
        emissionsOffset?: string | undefined;
        maxEmissionsMultiple?: string | undefined;
        projectTokenInfo?: AssetInfoBaseForString | undefined;
        protocolIncomeShare?: string | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
