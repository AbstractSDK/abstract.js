"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionMessageComposer = void 0;
const tx_1 = require("cosmjs-types/cosmwasm/wasm/v1/tx");
const encoding_1 = require("@cosmjs/encoding");
class SubscriptionMessageComposer {
    constructor(sender, contractAddress) {
        Object.defineProperty(this, "sender", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "contractAddress", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "base", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            base: {},
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "receive", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ amount, msg, sender, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            receive: {
                                amount,
                                msg,
                                sender,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "pay", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ osId, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            pay: {
                                os_id: osId,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "unsubscribe", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ osIds, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            unsubscribe: {
                                os_ids: osIds,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "claimCompensation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ osId, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            claim_compensation: {
                                os_id: osId,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "claimEmissions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ osId, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            claim_emissions: {
                                os_id: osId,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "updateContributor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ basePerBlock, contributorOsId, expirationBlock, weight, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            update_contributor: {
                                base_per_block: basePerBlock,
                                contributor_os_id: contributorOsId,
                                expiration_block: expirationBlock,
                                weight,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "removeContributor", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ osId, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            remove_contributor: {
                                os_id: osId,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "updateSubscriptionConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            update_subscription_config: {
                                factory_address: factoryAddress,
                                payment_asset: paymentAsset,
                                subscription_cost: subscriptionCost,
                                version_control_address: versionControlAddress,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        Object.defineProperty(this, "updateContributionConfig", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare, }, funds) => {
                return {
                    typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
                    value: tx_1.MsgExecuteContract.fromPartial({
                        sender: this.sender,
                        contract: this.contractAddress,
                        msg: (0, encoding_1.toUtf8)(JSON.stringify({
                            update_contribution_config: {
                                emission_user_share: emissionUserShare,
                                emissions_amp_factor: emissionsAmpFactor,
                                emissions_offset: emissionsOffset,
                                max_emissions_multiple: maxEmissionsMultiple,
                                project_token_info: projectTokenInfo,
                                protocol_income_share: protocolIncomeShare,
                            },
                        })),
                        funds,
                    }),
                };
            }
        });
        this.sender = sender;
        this.contractAddress = contractAddress;
        this.base = this.base.bind(this);
        this.receive = this.receive.bind(this);
        this.pay = this.pay.bind(this);
        this.unsubscribe = this.unsubscribe.bind(this);
        this.claimCompensation = this.claimCompensation.bind(this);
        this.claimEmissions = this.claimEmissions.bind(this);
        this.updateContributor = this.updateContributor.bind(this);
        this.removeContributor = this.removeContributor.bind(this);
        this.updateSubscriptionConfig = this.updateSubscriptionConfig.bind(this);
        this.updateContributionConfig = this.updateContributionConfig.bind(this);
    }
}
exports.SubscriptionMessageComposer = SubscriptionMessageComposer;
//# sourceMappingURL=Subscription.message-composer.js.map