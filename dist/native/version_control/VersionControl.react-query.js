"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useVersionControlRemoveModuleMutation = exports.useVersionControlAddModulesMutation = exports.useVersionControlAddOsMutation = exports.useVersionControlSetAdminMutation = exports.useVersionControlSetFactoryMutation = exports.useVersionControlOsCoreQuery = exports.useVersionControlModuleQuery = exports.useVersionControlConfigQuery = exports.useVersionControlModulesQuery = exports.versionControlQueries = exports.versionControlQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.versionControlQueryKeys = {
    contract: [
        {
            contract: 'versionControl',
        },
    ],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.versionControlQueryKeys.contract[0]), { address: contractAddress })],
    osCore: (contractAddress, args) => [Object.assign(Object.assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'os_core', args })],
    module: (contractAddress, args) => [Object.assign(Object.assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'module', args })],
    config: (contractAddress, args) => [Object.assign(Object.assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'config', args })],
    modules: (contractAddress, args) => [Object.assign(Object.assign({}, exports.versionControlQueryKeys.address(contractAddress)[0]), { method: 'modules', args })],
};
exports.versionControlQueries = {
    osCore: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.versionControlQueryKeys.osCore(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.osCore({
                osId: args.osId,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    module: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.versionControlQueryKeys.module(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.module({
                module: args.module,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    config: ({ client, options, }) => (Object.assign(Object.assign({ queryKey: exports.versionControlQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => (client ? client.config() : Promise.reject(new Error('Invalid client'))) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    modules: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.versionControlQueryKeys.modules(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.modules({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
};
function useVersionControlModulesQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.modules(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.modules({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlModulesQuery = useVersionControlModulesQuery;
function useVersionControlConfigQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), () => (client ? client.config() : Promise.reject(new Error('Invalid client'))), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlConfigQuery = useVersionControlConfigQuery;
function useVersionControlModuleQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.module(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.module({
            module: args.module,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlModuleQuery = useVersionControlModuleQuery;
function useVersionControlOsCoreQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.versionControlQueryKeys.osCore(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.osCore({
            osId: args.osId,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useVersionControlOsCoreQuery = useVersionControlOsCoreQuery;
function useVersionControlSetFactoryMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.setFactory(msg, fee, memo, funds), options);
}
exports.useVersionControlSetFactoryMutation = useVersionControlSetFactoryMutation;
function useVersionControlSetAdminMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds), options);
}
exports.useVersionControlSetAdminMutation = useVersionControlSetAdminMutation;
function useVersionControlAddOsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.addOs(msg, fee, memo, funds), options);
}
exports.useVersionControlAddOsMutation = useVersionControlAddOsMutation;
function useVersionControlAddModulesMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.addModules(msg, fee, memo, funds), options);
}
exports.useVersionControlAddModulesMutation = useVersionControlAddModulesMutation;
function useVersionControlRemoveModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.removeModule(msg, fee, memo, funds), options);
}
exports.useVersionControlRemoveModuleMutation = useVersionControlRemoveModuleMutation;
//# sourceMappingURL=VersionControl.react-query.js.map