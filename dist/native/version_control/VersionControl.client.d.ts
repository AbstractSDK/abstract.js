/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import { ModuleInfo, Core, ConfigResponse, ModuleResponse, ModulesResponse, OsCoreResponse } from './VersionControl.types';
export interface VersionControlReadOnlyInterface {
    contractAddress: string;
    osCore: ({ osId }: {
        osId: number;
    }) => Promise<OsCoreResponse>;
    module: ({ module }: {
        module: ModuleInfo;
    }) => Promise<ModuleResponse>;
    config: () => Promise<ConfigResponse>;
    modules: ({ pageSize, pageToken, }: {
        pageSize?: number;
        pageToken?: ModuleInfo;
    }) => Promise<ModulesResponse>;
}
export declare class VersionControlQueryClient implements VersionControlReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    osCore: ({ osId }: {
        osId: number;
    }) => Promise<OsCoreResponse>;
    module: ({ module }: {
        module: ModuleInfo;
    }) => Promise<ModuleResponse>;
    config: () => Promise<ConfigResponse>;
    modules: ({ pageSize, pageToken, }: {
        pageSize?: number | undefined;
        pageToken?: ModuleInfo | undefined;
    }) => Promise<ModulesResponse>;
}
export interface VersionControlInterface extends VersionControlReadOnlyInterface {
    contractAddress: string;
    sender: string;
    removeModule: ({ module, }: {
        module: ModuleInfo;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addModules: ({ modules, }: {
        modules: ModuleInfo[][];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addOs: ({ core, osId, }: {
        core: Core;
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setAdmin: ({ newAdmin, }: {
        newAdmin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setFactory: ({ newFactory, }: {
        newFactory: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class VersionControlClient extends VersionControlQueryClient implements VersionControlInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    removeModule: ({ module, }: {
        module: ModuleInfo;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addModules: ({ modules, }: {
        modules: ModuleInfo[][];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addOs: ({ core, osId, }: {
        core: Core;
        osId: number;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setAdmin: ({ newAdmin, }: {
        newAdmin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setFactory: ({ newFactory, }: {
        newFactory: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
