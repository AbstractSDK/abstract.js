/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee, Coin } from '@cosmjs/amino';
import { ModuleInfo, Core, ConfigResponse, OsCoreResponse, ModuleResponse, ModulesResponse } from './VersionControl.types';
import { VersionControlQueryClient, VersionControlClient } from './VersionControl.client';
export declare const versionControlQueryKeys: {
    contract: readonly [{
        readonly contract: "versionControl";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    osCore: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "os_core";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    module: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "module";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    modules: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "modules";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
};
export declare const versionControlQueries: {
    osCore: <TData = OsCoreResponse>({ client, options, args, }: VersionControlOsCoreQuery<TData>) => UseQueryOptions<OsCoreResponse, Error, TData, import("@tanstack/react-query").QueryKey>;
    module: <TData_1 = ModuleResponse>({ client, options, args, }: VersionControlModuleQuery<TData_1>) => UseQueryOptions<ModuleResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    config: <TData_2 = ConfigResponse>({ client, options, }: VersionControlConfigQuery<TData_2>) => UseQueryOptions<ConfigResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    modules: <TData_3 = ModulesResponse>({ client, options, args, }: VersionControlModulesQuery<TData_3>) => UseQueryOptions<ModulesResponse, Error, TData_3, import("@tanstack/react-query").QueryKey>;
};
export interface VersionControlReactQuery<TResponse, TData = TResponse> {
    client: VersionControlQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface VersionControlModulesQuery<TData> extends VersionControlReactQuery<ModulesResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: ModuleInfo;
    };
}
export declare function useVersionControlModulesQuery<TData = ModulesResponse>({ client, args, options, }: VersionControlModulesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlConfigQuery<TData> extends VersionControlReactQuery<ConfigResponse, TData> {
}
export declare function useVersionControlConfigQuery<TData = ConfigResponse>({ client, options, }: VersionControlConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlModuleQuery<TData> extends VersionControlReactQuery<ModuleResponse, TData> {
    args: {
        module: ModuleInfo;
    };
}
export declare function useVersionControlModuleQuery<TData = ModuleResponse>({ client, args, options, }: VersionControlModuleQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlOsCoreQuery<TData> extends VersionControlReactQuery<OsCoreResponse, TData> {
    args: {
        osId: number;
    };
}
export declare function useVersionControlOsCoreQuery<TData = OsCoreResponse>({ client, args, options, }: VersionControlOsCoreQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlSetFactoryMutation {
    client: VersionControlClient;
    msg: {
        newFactory: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlSetFactoryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetFactoryMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlSetFactoryMutation, unknown>;
export interface VersionControlSetAdminMutation {
    client: VersionControlClient;
    msg: {
        newAdmin: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetAdminMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlSetAdminMutation, unknown>;
export interface VersionControlAddOsMutation {
    client: VersionControlClient;
    msg: {
        core: Core;
        osId: number;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddOsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddOsMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddOsMutation, unknown>;
export interface VersionControlAddModulesMutation {
    client: VersionControlClient;
    msg: {
        modules: ModuleInfo[][];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddModulesMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddModulesMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddModulesMutation, unknown>;
export interface VersionControlRemoveModuleMutation {
    client: VersionControlClient;
    msg: {
        module: ModuleInfo;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlRemoveModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveModuleMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlRemoveModuleMutation, unknown>;
