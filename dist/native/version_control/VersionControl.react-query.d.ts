/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
import { UseQueryOptions, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { ApiAddressResponse, ContractVersion, ApiAddressesResponse, CodeIdResponse, CodeIdsResponse, ConfigResponse, ModuleInfo, OsCoreResponse } from "./VersionControl.types";
import { VersionControlQueryClient, VersionControlClient } from "./VersionControl.client";
export declare const versionControlQueryKeys: {
    contract: readonly [{
        readonly contract: "versionControl";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    osCore: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "os_core";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    codeId: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "code_id";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    apiAddress: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "api_address";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    config: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "config";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    codeIds: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "code_ids";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
    apiAddresses: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "api_addresses";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "versionControl";
    }];
};
export interface VersionControlReactQuery<TResponse, TData = TResponse> {
    client: VersionControlQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface VersionControlApiAddressesQuery<TData> extends VersionControlReactQuery<ApiAddressesResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: ContractVersion;
    };
}
export declare function useVersionControlApiAddressesQuery<TData = ApiAddressesResponse>({ client, args, options }: VersionControlApiAddressesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlCodeIdsQuery<TData> extends VersionControlReactQuery<CodeIdsResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: ContractVersion;
    };
}
export declare function useVersionControlCodeIdsQuery<TData = CodeIdsResponse>({ client, args, options }: VersionControlCodeIdsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlConfigQuery<TData> extends VersionControlReactQuery<ConfigResponse, TData> {
}
export declare function useVersionControlConfigQuery<TData = ConfigResponse>({ client, options }: VersionControlConfigQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlApiAddressQuery<TData> extends VersionControlReactQuery<ApiAddressResponse, TData> {
    args: {
        module: ModuleInfo;
    };
}
export declare function useVersionControlApiAddressQuery<TData = ApiAddressResponse>({ client, args, options }: VersionControlApiAddressQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlCodeIdQuery<TData> extends VersionControlReactQuery<CodeIdResponse, TData> {
    args: {
        module: ModuleInfo;
    };
}
export declare function useVersionControlCodeIdQuery<TData = CodeIdResponse>({ client, args, options }: VersionControlCodeIdQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlOsCoreQuery<TData> extends VersionControlReactQuery<OsCoreResponse, TData> {
    args: {
        osId: number;
    };
}
export declare function useVersionControlOsCoreQuery<TData = OsCoreResponse>({ client, args, options }: VersionControlOsCoreQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface VersionControlSetFactoryMutation {
    client: VersionControlClient;
    msg: {
        newFactory: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlSetFactoryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetFactoryMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlSetFactoryMutation, unknown>;
export interface VersionControlSetAdminMutation {
    client: VersionControlClient;
    msg: {
        newAdmin: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetAdminMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlSetAdminMutation, unknown>;
export interface VersionControlAddOsMutation {
    client: VersionControlClient;
    msg: {
        managerAddress: string;
        osId: number;
        proxyAddress: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddOsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddOsMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddOsMutation, unknown>;
export interface VersionControlRemoveApiMutation {
    client: VersionControlClient;
    msg: {
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlRemoveApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveApiMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlRemoveApiMutation, unknown>;
export interface VersionControlAddApiMutation {
    client: VersionControlClient;
    msg: {
        address: string;
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddApiMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddApiMutation, unknown>;
export interface VersionControlRemoveCodeIdMutation {
    client: VersionControlClient;
    msg: {
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlRemoveCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlRemoveCodeIdMutation, unknown>;
export interface VersionControlAddCodeIdMutation {
    client: VersionControlClient;
    msg: {
        codeId: number;
        module: string;
        version: string;
    };
    args?: {
        fee?: number | StdFee | "auto";
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useVersionControlAddCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddCodeIdMutation>, "mutationFn">): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, VersionControlAddCodeIdMutation, unknown>;
