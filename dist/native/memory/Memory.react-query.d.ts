/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee, Coin } from '@cosmjs/amino';
import { UncheckedContractEntry, UncheckedChannelEntry, ContractEntry, ChannelEntry, AssetListResponse, AssetsResponse, ChannelListResponse, ChannelsResponse, ContractListResponse, ContractsResponse } from './Memory.types';
import { MemoryQueryClient, MemoryClient } from './Memory.client';
export declare const memoryQueryKeys: {
    contract: readonly [{
        readonly contract: "memory";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "memory";
    }];
    assets: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "assets";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "memory";
    }];
    assetList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "asset_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "memory";
    }];
    contracts: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "contracts";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "memory";
    }];
    contractList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "contract_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "memory";
    }];
    channels: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "channels";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "memory";
    }];
    channelList: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "channel_list";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "memory";
    }];
};
export declare const memoryQueries: {
    assets: <TData = AssetsResponse>({ client, args, options, }: MemoryAssetsQuery<TData>) => UseQueryOptions<AssetsResponse, Error, TData, import("@tanstack/react-query").QueryKey>;
    assetList: <TData_1 = AssetListResponse>({ client, args, options, }: MemoryAssetListQuery<TData_1>) => UseQueryOptions<AssetListResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    contracts: <TData_2 = ContractsResponse>({ client, args, options, }: MemoryContractsQuery<TData_2>) => UseQueryOptions<ContractsResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    contractList: <TData_3 = ContractListResponse>({ client, args, options, }: MemoryContractListQuery<TData_3>) => UseQueryOptions<ContractListResponse, Error, TData_3, import("@tanstack/react-query").QueryKey>;
    channels: <TData_4 = ChannelsResponse>({ client, args, options, }: MemoryChannelsQuery<TData_4>) => UseQueryOptions<ChannelsResponse, Error, TData_4, import("@tanstack/react-query").QueryKey>;
    channelList: <TData_5 = ChannelListResponse>({ client, args, options, }: MemoryChannelListQuery<TData_5>) => UseQueryOptions<ChannelListResponse, Error, TData_5, import("@tanstack/react-query").QueryKey>;
};
export interface MemoryReactQuery<TResponse, TData = TResponse> {
    client: MemoryQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface MemoryChannelListQuery<TData> extends MemoryReactQuery<ChannelListResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: ChannelEntry;
    };
}
export declare function useMemoryChannelListQuery<TData = ChannelListResponse>({ client, args, options, }: MemoryChannelListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MemoryChannelsQuery<TData> extends MemoryReactQuery<ChannelsResponse, TData> {
    args: {
        names: ChannelEntry[];
    };
}
export declare function useMemoryChannelsQuery<TData = ChannelsResponse>({ client, args, options, }: MemoryChannelsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MemoryContractListQuery<TData> extends MemoryReactQuery<ContractListResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: ContractEntry;
    };
}
export declare function useMemoryContractListQuery<TData = ContractListResponse>({ client, args, options, }: MemoryContractListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MemoryContractsQuery<TData> extends MemoryReactQuery<ContractsResponse, TData> {
    args: {
        names: ContractEntry[];
    };
}
export declare function useMemoryContractsQuery<TData = ContractsResponse>({ client, args, options, }: MemoryContractsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MemoryAssetListQuery<TData> extends MemoryReactQuery<AssetListResponse, TData> {
    args: {
        pageSize?: number;
        pageToken?: string;
    };
}
export declare function useMemoryAssetListQuery<TData = AssetListResponse>({ client, args, options, }: MemoryAssetListQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MemoryAssetsQuery<TData> extends MemoryReactQuery<AssetsResponse, TData> {
    args: {
        names: string[];
    };
}
export declare function useMemoryAssetsQuery<TData = AssetsResponse>({ client, args, options, }: MemoryAssetsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface MemorySetAdminMutation {
    client: MemoryClient;
    msg: {
        admin: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMemorySetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MemorySetAdminMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MemorySetAdminMutation, unknown>;
export interface MemoryUpdateChannelsMutation {
    client: MemoryClient;
    msg: {
        toAdd: UncheckedChannelEntry[][];
        toRemove: UncheckedChannelEntry[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMemoryUpdateChannelsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MemoryUpdateChannelsMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MemoryUpdateChannelsMutation, unknown>;
export interface MemoryUpdateAssetAddressesMutation {
    client: MemoryClient;
    msg: {
        toAdd: string[][];
        toRemove: string[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMemoryUpdateAssetAddressesMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MemoryUpdateAssetAddressesMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MemoryUpdateAssetAddressesMutation, unknown>;
export interface MemoryUpdateContractAddressesMutation {
    client: MemoryClient;
    msg: {
        toAdd: UncheckedContractEntry[][];
        toRemove: UncheckedContractEntry[];
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useMemoryUpdateContractAddressesMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, MemoryUpdateContractAddressesMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, MemoryUpdateContractAddressesMutation, unknown>;
