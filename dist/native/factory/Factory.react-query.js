"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFactoryReceiveMutation = exports.useFactoryUpdateConfigMutation = exports.useFactoryCreateOsMutation = exports.useFactoryConfigQuery = exports.factoryQueries = exports.factoryQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.factoryQueryKeys = {
    contract: [
        {
            contract: 'factory',
        },
    ],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.factoryQueryKeys.contract[0]), { address: contractAddress })],
    config: (contractAddress, args) => [Object.assign(Object.assign({}, exports.factoryQueryKeys.address(contractAddress)[0]), { method: 'config', args })],
};
exports.factoryQueries = {
    config: ({ client, options, }) => (Object.assign(Object.assign({ queryKey: exports.factoryQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => (client ? client.config() : Promise.reject(new Error('Invalid client'))) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
};
function useFactoryConfigQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.factoryQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), () => (client ? client.config() : Promise.reject(new Error('Invalid client'))), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useFactoryConfigQuery = useFactoryConfigQuery;
function useFactoryCreateOsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.createOs(msg, fee, memo, funds), options);
}
exports.useFactoryCreateOsMutation = useFactoryCreateOsMutation;
function useFactoryUpdateConfigMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateConfig(msg, fee, memo, funds), options);
}
exports.useFactoryUpdateConfigMutation = useFactoryUpdateConfigMutation;
function useFactoryReceiveMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.receive(msg, fee, memo, funds), options);
}
exports.useFactoryReceiveMutation = useFactoryReceiveMutation;
//# sourceMappingURL=Factory.react-query.js.map