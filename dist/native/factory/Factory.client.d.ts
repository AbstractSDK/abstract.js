/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import { Uint128, Binary, GovernanceDetails, ConfigResponse } from './Factory.types';
export interface FactoryReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
}
export declare class FactoryQueryClient implements FactoryReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
}
export interface FactoryInterface extends FactoryReadOnlyInterface {
    contractAddress: string;
    sender: string;
    receive: ({ amount, msg, sender, }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, memoryContract, moduleFactoryAddress, subscriptionAddress, versionControlContract, }: {
        admin?: string;
        memoryContract?: string;
        moduleFactoryAddress?: string;
        subscriptionAddress?: string;
        versionControlContract?: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createOs: ({ description, governance, link, name, }: {
        description?: string;
        governance: GovernanceDetails;
        link?: string;
        name: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class FactoryClient extends FactoryQueryClient implements FactoryInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    receive: ({ amount, msg, sender, }: {
        amount: Uint128;
        msg: Binary;
        sender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateConfig: ({ admin, memoryContract, moduleFactoryAddress, subscriptionAddress, versionControlContract, }: {
        admin?: string | undefined;
        memoryContract?: string | undefined;
        moduleFactoryAddress?: string | undefined;
        subscriptionAddress?: string | undefined;
        versionControlContract?: string | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createOs: ({ description, governance, link, name, }: {
        description?: string | undefined;
        governance: GovernanceDetails;
        link?: string | undefined;
        name: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
