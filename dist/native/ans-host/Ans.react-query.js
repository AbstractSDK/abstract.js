"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAnsUpdateContractAddressesMutation = exports.useAnsUpdateAssetAddressesMutation = exports.useAnsUpdateChannelsMutation = exports.useAnsSetAdminMutation = exports.useAnsAssetsQuery = exports.useAnsAssetListQuery = exports.useAnsContractsQuery = exports.useAnsContractListQuery = exports.useAnsChannelsQuery = exports.useAnsChannelListQuery = exports.ansQueries = exports.ansQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.ansQueryKeys = {
    contract: [
        {
            contract: 'ans',
        },
    ],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.ansQueryKeys.contract[0]), { address: contractAddress })],
    assets: (contractAddress, args) => [Object.assign(Object.assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'assets', args })],
    assetList: (contractAddress, args) => [Object.assign(Object.assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'asset_list', args })],
    contracts: (contractAddress, args) => [Object.assign(Object.assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'contracts', args })],
    contractList: (contractAddress, args) => [Object.assign(Object.assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'contract_list', args })],
    channels: (contractAddress, args) => [Object.assign(Object.assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'channels', args })],
    channelList: (contractAddress, args) => [Object.assign(Object.assign({}, exports.ansQueryKeys.address(contractAddress)[0]), { method: 'channel_list', args })],
};
exports.ansQueries = {
    assets: ({ client, args, options, }) => (Object.assign(Object.assign({ queryKey: exports.ansQueryKeys.assets(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.assets({
                names: args.names,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    assetList: ({ client, args, options, }) => (Object.assign(Object.assign({ queryKey: exports.ansQueryKeys.assetList(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.assetList({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    contracts: ({ client, args, options, }) => (Object.assign(Object.assign({ queryKey: exports.ansQueryKeys.contracts(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.contracts({
                names: args.names,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    contractList: ({ client, args, options, }) => (Object.assign(Object.assign({ queryKey: exports.ansQueryKeys.contractList(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.contractList({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    channels: ({ client, args, options, }) => (Object.assign(Object.assign({ queryKey: exports.ansQueryKeys.channels(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.channels({
                names: args.names,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    channelList: ({ client, args, options, }) => (Object.assign(Object.assign({ queryKey: exports.ansQueryKeys.channelList(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.channelList({
                pageSize: args.pageSize,
                pageToken: args.pageToken,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
};
function useAnsChannelListQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.channelList(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.channelList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsChannelListQuery = useAnsChannelListQuery;
function useAnsChannelsQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.channels(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.channels({
            names: args.names,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsChannelsQuery = useAnsChannelsQuery;
function useAnsContractListQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.contractList(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.contractList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsContractListQuery = useAnsContractListQuery;
function useAnsContractsQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.contracts(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.contracts({
            names: args.names,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsContractsQuery = useAnsContractsQuery;
function useAnsAssetListQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.assetList(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.assetList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsAssetListQuery = useAnsAssetListQuery;
function useAnsAssetsQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.ansQueryKeys.assets(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.assets({
            names: args.names,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useAnsAssetsQuery = useAnsAssetsQuery;
function useAnsSetAdminMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds), options);
}
exports.useAnsSetAdminMutation = useAnsSetAdminMutation;
function useAnsUpdateChannelsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateChannels(msg, fee, memo, funds), options);
}
exports.useAnsUpdateChannelsMutation = useAnsUpdateChannelsMutation;
function useAnsUpdateAssetAddressesMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAssetAddresses(msg, fee, memo, funds), options);
}
exports.useAnsUpdateAssetAddressesMutation = useAnsUpdateAssetAddressesMutation;
function useAnsUpdateContractAddressesMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateContractAddresses(msg, fee, memo, funds), options);
}
exports.useAnsUpdateContractAddressesMutation = useAnsUpdateContractAddressesMutation;
//# sourceMappingURL=Ans.react-query.js.map