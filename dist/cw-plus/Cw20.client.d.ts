/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import { AllAccountsResponse, Uint128, Expiration, AllAllowancesResponse, AllowanceResponse, BalanceResponse, Binary, DownloadLogoResponse, Logo, MinterResponse, MarketingInfoResponse, TokenInfoResponse } from './Cw20.types';
export interface Cw20ReadOnlyInterface {
    contractAddress: string;
    balance: ({ address }: {
        address: string;
    }) => Promise<BalanceResponse>;
    tokenInfo: () => Promise<TokenInfoResponse>;
    minter: () => Promise<MinterResponse>;
    allowance: ({ owner, spender }: {
        owner: string;
        spender: string;
    }) => Promise<AllowanceResponse>;
    allAllowances: ({ limit, owner, startAfter, }: {
        limit?: number;
        owner: string;
        startAfter?: string;
    }) => Promise<AllAllowancesResponse>;
    allAccounts: ({ limit, startAfter, }: {
        limit?: number;
        startAfter?: string;
    }) => Promise<AllAccountsResponse>;
    marketingInfo: () => Promise<MarketingInfoResponse>;
    downloadLogo: () => Promise<DownloadLogoResponse>;
}
export declare class Cw20QueryClient implements Cw20ReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    balance: ({ address }: {
        address: string;
    }) => Promise<BalanceResponse>;
    tokenInfo: () => Promise<TokenInfoResponse>;
    minter: () => Promise<MinterResponse>;
    allowance: ({ owner, spender, }: {
        owner: string;
        spender: string;
    }) => Promise<AllowanceResponse>;
    allAllowances: ({ limit, owner, startAfter, }: {
        limit?: number | undefined;
        owner: string;
        startAfter?: string | undefined;
    }) => Promise<AllAllowancesResponse>;
    allAccounts: ({ limit, startAfter, }: {
        limit?: number | undefined;
        startAfter?: string | undefined;
    }) => Promise<AllAccountsResponse>;
    marketingInfo: () => Promise<MarketingInfoResponse>;
    downloadLogo: () => Promise<DownloadLogoResponse>;
}
export interface Cw20Interface extends Cw20ReadOnlyInterface {
    contractAddress: string;
    sender: string;
    transfer: ({ amount, recipient, }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ amount, }: {
        amount: Uint128;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    send: ({ amount, contract, msg, }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender, }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender, }: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    transferFrom: ({ amount, owner, recipient, }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    sendFrom: ({ amount, contract, msg, owner, }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burnFrom: ({ amount, owner, }: {
        amount: Uint128;
        owner: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ amount, recipient, }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMinter: ({ newMinter, }: {
        newMinter: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMarketing: ({ description, marketing, project, }: {
        description?: string;
        marketing?: string;
        project?: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    uploadLogo: (msg: Logo, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class Cw20Client extends Cw20QueryClient implements Cw20Interface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    transfer: ({ amount, recipient, }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burn: ({ amount, }: {
        amount: Uint128;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    send: ({ amount, contract, msg, }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    increaseAllowance: ({ amount, expires, spender, }: {
        amount: Uint128;
        expires?: Expiration | undefined;
        spender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    decreaseAllowance: ({ amount, expires, spender, }: {
        amount: Uint128;
        expires?: Expiration | undefined;
        spender: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    transferFrom: ({ amount, owner, recipient, }: {
        amount: Uint128;
        owner: string;
        recipient: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    sendFrom: ({ amount, contract, msg, owner, }: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    burnFrom: ({ amount, owner, }: {
        amount: Uint128;
        owner: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    mint: ({ amount, recipient, }: {
        amount: Uint128;
        recipient: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMinter: ({ newMinter, }: {
        newMinter: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateMarketing: ({ description, marketing, project, }: {
        description?: string | undefined;
        marketing?: string | undefined;
        project?: string | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    uploadLogo: (msg: Logo, fee?: number | StdFee | 'auto', memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
