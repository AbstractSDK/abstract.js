/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee } from '@cosmjs/amino';
import { CosmosMsgForEmpty, Coin, Expiration, Vote, MemberChangedHookMsg, ThresholdResponse, ListProposalsResponse, ListVotersResponse, ListVotesResponse, ProposalResponse, ReverseProposalsResponse, VoteResponse, VoterResponse } from './Cw3FlexMultisig.types';
import { Cw3FlexMultisigQueryClient, Cw3FlexMultisigClient } from './Cw3FlexMultisig.client';
export declare const cw3FlexMultisigQueryKeys: {
    contract: readonly [{
        readonly contract: "cw3FlexMultisig";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    threshold: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "threshold";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    proposal: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "proposal";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    listProposals: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "list_proposals";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    reverseProposals: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "reverse_proposals";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    vote: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "vote";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    listVotes: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "list_votes";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    voter: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "voter";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
    listVoters: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "list_voters";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw3FlexMultisig";
    }];
};
export declare const cw3FlexMultisigQueries: {
    threshold: <TData = ThresholdResponse>({ client, options, }: Cw3FlexMultisigThresholdQuery<TData>) => UseQueryOptions<ThresholdResponse, Error, TData, import("@tanstack/react-query").QueryKey>;
    proposal: <TData_1 = ProposalResponse>({ client, options, args, }: Cw3FlexMultisigProposalQuery<TData_1>) => UseQueryOptions<ProposalResponse, Error, TData_1, import("@tanstack/react-query").QueryKey>;
    listProposals: <TData_2 = ListProposalsResponse>({ client, options, args, }: Cw3FlexMultisigListProposalsQuery<TData_2>) => UseQueryOptions<ListProposalsResponse, Error, TData_2, import("@tanstack/react-query").QueryKey>;
    reverseProposals: <TData_3 = ReverseProposalsResponse>({ client, options, args, }: Cw3FlexMultisigReverseProposalsQuery<TData_3>) => UseQueryOptions<ReverseProposalsResponse, Error, TData_3, import("@tanstack/react-query").QueryKey>;
    vote: <TData_4 = VoteResponse>({ client, options, args, }: Cw3FlexMultisigVoteQuery<TData_4>) => UseQueryOptions<VoteResponse, Error, TData_4, import("@tanstack/react-query").QueryKey>;
    listVotes: <TData_5 = ListVotesResponse>({ client, options, args, }: Cw3FlexMultisigListVotesQuery<TData_5>) => UseQueryOptions<ListVotesResponse, Error, TData_5, import("@tanstack/react-query").QueryKey>;
    voter: <TData_6 = VoterResponse>({ client, options, args, }: Cw3FlexMultisigVoterQuery<TData_6>) => UseQueryOptions<VoterResponse, Error, TData_6, import("@tanstack/react-query").QueryKey>;
    listVoters: <TData_7 = ListVotersResponse>({ client, options, args, }: Cw3FlexMultisigListVotersQuery<TData_7>) => UseQueryOptions<ListVotersResponse, Error, TData_7, import("@tanstack/react-query").QueryKey>;
};
export interface Cw3FlexMultisigReactQuery<TResponse, TData = TResponse> {
    client: Cw3FlexMultisigQueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Cw3FlexMultisigListVotersQuery<TData> extends Cw3FlexMultisigReactQuery<ListVotersResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw3FlexMultisigListVotersQuery<TData = ListVotersResponse>({ client, args, options, }: Cw3FlexMultisigListVotersQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigVoterQuery<TData> extends Cw3FlexMultisigReactQuery<VoterResponse, TData> {
    args: {
        address: string;
    };
}
export declare function useCw3FlexMultisigVoterQuery<TData = VoterResponse>({ client, args, options, }: Cw3FlexMultisigVoterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigListVotesQuery<TData> extends Cw3FlexMultisigReactQuery<ListVotesResponse, TData> {
    args: {
        limit?: number;
        proposalId: number;
        startAfter?: string;
    };
}
export declare function useCw3FlexMultisigListVotesQuery<TData = ListVotesResponse>({ client, args, options, }: Cw3FlexMultisigListVotesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigVoteQuery<TData> extends Cw3FlexMultisigReactQuery<VoteResponse, TData> {
    args: {
        proposalId: number;
        voter: string;
    };
}
export declare function useCw3FlexMultisigVoteQuery<TData = VoteResponse>({ client, args, options, }: Cw3FlexMultisigVoteQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigReverseProposalsQuery<TData> extends Cw3FlexMultisigReactQuery<ReverseProposalsResponse, TData> {
    args: {
        limit?: number;
        startBefore?: number;
    };
}
export declare function useCw3FlexMultisigReverseProposalsQuery<TData = ReverseProposalsResponse>({ client, args, options, }: Cw3FlexMultisigReverseProposalsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigListProposalsQuery<TData> extends Cw3FlexMultisigReactQuery<ListProposalsResponse, TData> {
    args: {
        limit?: number;
        startAfter?: number;
    };
}
export declare function useCw3FlexMultisigListProposalsQuery<TData = ListProposalsResponse>({ client, args, options, }: Cw3FlexMultisigListProposalsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigProposalQuery<TData> extends Cw3FlexMultisigReactQuery<ProposalResponse, TData> {
    args: {
        proposalId: number;
    };
}
export declare function useCw3FlexMultisigProposalQuery<TData = ProposalResponse>({ client, args, options, }: Cw3FlexMultisigProposalQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigThresholdQuery<TData> extends Cw3FlexMultisigReactQuery<ThresholdResponse, TData> {
}
export declare function useCw3FlexMultisigThresholdQuery<TData = ThresholdResponse>({ client, options, }: Cw3FlexMultisigThresholdQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw3FlexMultisigMemberChangedHookMutation {
    client: Cw3FlexMultisigClient;
    msg: MemberChangedHookMsg;
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw3FlexMultisigMemberChangedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigMemberChangedHookMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigMemberChangedHookMutation, unknown>;
export interface Cw3FlexMultisigCloseMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        proposalId: number;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw3FlexMultisigCloseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigCloseMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigCloseMutation, unknown>;
export interface Cw3FlexMultisigExecuteMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        proposalId: number;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw3FlexMultisigExecuteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigExecuteMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigExecuteMutation, unknown>;
export interface Cw3FlexMultisigVoteMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        proposalId: number;
        vote: Vote;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw3FlexMultisigVoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigVoteMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigVoteMutation, unknown>;
export interface Cw3FlexMultisigProposeMutation {
    client: Cw3FlexMultisigClient;
    msg: {
        description: string;
        latest?: Expiration;
        msgs: CosmosMsgForEmpty[];
        title: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw3FlexMultisigProposeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw3FlexMultisigProposeMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw3FlexMultisigProposeMutation, unknown>;
