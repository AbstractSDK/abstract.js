/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { UseQueryOptions, UseMutationOptions } from '@tanstack/react-query';
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee, Coin } from '@cosmjs/amino';
import { AllAccountsResponse, Uint128, Expiration, AllAllowancesResponse, AllowanceResponse, BalanceResponse, Binary, DownloadLogoResponse, Logo, MinterResponse, MarketingInfoResponse, TokenInfoResponse } from './Cw20.types';
import { Cw20QueryClient, Cw20Client } from './Cw20.client';
export declare const cw20QueryKeys: {
    contract: readonly [{
        readonly contract: "cw20";
    }];
    address: (contractAddress: string | undefined) => readonly [{
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    balance: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "balance";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    tokenInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "token_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    minter: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "minter";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    allowance: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "allowance";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    allAllowances: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_allowances";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    allAccounts: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "all_accounts";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    marketingInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "marketing_info";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
    downloadLogo: (contractAddress: string | undefined, args?: Record<string, unknown>) => readonly [{
        readonly method: "download_logo";
        readonly args: Record<string, unknown> | undefined;
        readonly address: string | undefined;
        readonly contract: "cw20";
    }];
};
export interface Cw20ReactQuery<TResponse, TData = TResponse> {
    client: Cw20QueryClient | undefined;
    options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
        initialData?: undefined;
    };
}
export interface Cw20DownloadLogoQuery<TData> extends Cw20ReactQuery<DownloadLogoResponse, TData> {
}
export declare function useCw20DownloadLogoQuery<TData = DownloadLogoResponse>({ client, options, }: Cw20DownloadLogoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20MarketingInfoQuery<TData> extends Cw20ReactQuery<MarketingInfoResponse, TData> {
}
export declare function useCw20MarketingInfoQuery<TData = MarketingInfoResponse>({ client, options, }: Cw20MarketingInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20AllAccountsQuery<TData> extends Cw20ReactQuery<AllAccountsResponse, TData> {
    args: {
        limit?: number;
        startAfter?: string;
    };
}
export declare function useCw20AllAccountsQuery<TData = AllAccountsResponse>({ client, args, options, }: Cw20AllAccountsQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20AllAllowancesQuery<TData> extends Cw20ReactQuery<AllAllowancesResponse, TData> {
    args: {
        limit?: number;
        owner: string;
        startAfter?: string;
    };
}
export declare function useCw20AllAllowancesQuery<TData = AllAllowancesResponse>({ client, args, options, }: Cw20AllAllowancesQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20AllowanceQuery<TData> extends Cw20ReactQuery<AllowanceResponse, TData> {
    args: {
        owner: string;
        spender: string;
    };
}
export declare function useCw20AllowanceQuery<TData = AllowanceResponse>({ client, args, options, }: Cw20AllowanceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20MinterQuery<TData> extends Cw20ReactQuery<MinterResponse, TData> {
}
export declare function useCw20MinterQuery<TData = MinterResponse>({ client, options, }: Cw20MinterQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20TokenInfoQuery<TData> extends Cw20ReactQuery<TokenInfoResponse, TData> {
}
export declare function useCw20TokenInfoQuery<TData = TokenInfoResponse>({ client, options, }: Cw20TokenInfoQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20BalanceQuery<TData> extends Cw20ReactQuery<BalanceResponse, TData> {
    args: {
        address: string;
    };
}
export declare function useCw20BalanceQuery<TData = BalanceResponse>({ client, args, options, }: Cw20BalanceQuery<TData>): import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface Cw20UploadLogoMutation {
    client: Cw20Client;
    msg: Logo;
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20UploadLogoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UploadLogoMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20UploadLogoMutation, unknown>;
export interface Cw20UpdateMarketingMutation {
    client: Cw20Client;
    msg: {
        description?: string;
        marketing?: string;
        project?: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20UpdateMarketingMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UpdateMarketingMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20UpdateMarketingMutation, unknown>;
export interface Cw20UpdateMinterMutation {
    client: Cw20Client;
    msg: {
        newMinter: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20UpdateMinterMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UpdateMinterMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20UpdateMinterMutation, unknown>;
export interface Cw20MintMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20MintMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20MintMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20MintMutation, unknown>;
export interface Cw20BurnFromMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20BurnFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20BurnFromMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20BurnFromMutation, unknown>;
export interface Cw20SendFromMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        contract: string;
        msg: Binary;
        owner: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20SendFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20SendFromMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20SendFromMutation, unknown>;
export interface Cw20TransferFromMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        owner: string;
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20TransferFromMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20TransferFromMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20TransferFromMutation, unknown>;
export interface Cw20DecreaseAllowanceMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20DecreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20DecreaseAllowanceMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20DecreaseAllowanceMutation, unknown>;
export interface Cw20IncreaseAllowanceMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        expires?: Expiration;
        spender: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20IncreaseAllowanceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IncreaseAllowanceMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20IncreaseAllowanceMutation, unknown>;
export interface Cw20SendMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        contract: string;
        msg: Binary;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20SendMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20SendMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20SendMutation, unknown>;
export interface Cw20BurnMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20BurnMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20BurnMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20BurnMutation, unknown>;
export interface Cw20TransferMutation {
    client: Cw20Client;
    msg: {
        amount: Uint128;
        recipient: string;
    };
    args?: {
        fee?: number | StdFee | 'auto';
        memo?: string;
        funds?: Coin[];
    };
}
export declare function useCw20TransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20TransferMutation>, 'mutationFn'>): import("@tanstack/react-query").UseMutationResult<ExecuteResult, Error, Cw20TransferMutation, unknown>;
