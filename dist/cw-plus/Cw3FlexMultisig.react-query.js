"use strict";
/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCw3FlexMultisigProposeMutation = exports.useCw3FlexMultisigVoteMutation = exports.useCw3FlexMultisigExecuteMutation = exports.useCw3FlexMultisigCloseMutation = exports.useCw3FlexMultisigMemberChangedHookMutation = exports.useCw3FlexMultisigThresholdQuery = exports.useCw3FlexMultisigProposalQuery = exports.useCw3FlexMultisigListProposalsQuery = exports.useCw3FlexMultisigReverseProposalsQuery = exports.useCw3FlexMultisigVoteQuery = exports.useCw3FlexMultisigListVotesQuery = exports.useCw3FlexMultisigVoterQuery = exports.useCw3FlexMultisigListVotersQuery = exports.cw3FlexMultisigQueries = exports.cw3FlexMultisigQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.cw3FlexMultisigQueryKeys = {
    contract: [
        {
            contract: 'cw3FlexMultisig',
        },
    ],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.contract[0]), { address: contractAddress })],
    threshold: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'threshold', args }),
    ],
    proposal: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'proposal', args }),
    ],
    listProposals: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'list_proposals', args }),
    ],
    reverseProposals: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'reverse_proposals', args }),
    ],
    vote: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'vote', args })],
    listVotes: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'list_votes', args }),
    ],
    voter: (contractAddress, args) => [Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'voter', args })],
    listVoters: (contractAddress, args) => [
        Object.assign(Object.assign({}, exports.cw3FlexMultisigQueryKeys.address(contractAddress)[0]), { method: 'list_voters', args }),
    ],
};
exports.cw3FlexMultisigQueries = {
    threshold: ({ client, options, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.threshold(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => (client ? client.threshold() : Promise.reject(new Error('Invalid client'))) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    proposal: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.proposal(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.proposal({
                proposalId: args.proposalId,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    listProposals: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.listProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.listProposals({
                limit: args.limit,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    reverseProposals: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.reverseProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.reverseProposals({
                limit: args.limit,
                startBefore: args.startBefore,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    vote: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.vote(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.queryVote({
                proposalId: args.proposalId,
                voter: args.voter,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    listVotes: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.listVotes(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.listVotes({
                limit: args.limit,
                proposalId: args.proposalId,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    voter: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.voter(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.voter({
                address: args.address,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    listVoters: ({ client, options, args, }) => (Object.assign(Object.assign({ queryKey: exports.cw3FlexMultisigQueryKeys.listVoters(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client
            ? client.listVoters({
                limit: args.limit,
                startAfter: args.startAfter,
            })
            : Promise.reject(new Error('Invalid client')) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
};
function useCw3FlexMultisigListVotersQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.listVoters(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.listVoters({
            limit: args.limit,
            startAfter: args.startAfter,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigListVotersQuery = useCw3FlexMultisigListVotersQuery;
function useCw3FlexMultisigVoterQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.voter(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.voter({
            address: args.address,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigVoterQuery = useCw3FlexMultisigVoterQuery;
function useCw3FlexMultisigListVotesQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.listVotes(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.listVotes({
            limit: args.limit,
            proposalId: args.proposalId,
            startAfter: args.startAfter,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigListVotesQuery = useCw3FlexMultisigListVotesQuery;
function useCw3FlexMultisigVoteQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.vote(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.queryVote({
            proposalId: args.proposalId,
            voter: args.voter,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigVoteQuery = useCw3FlexMultisigVoteQuery;
function useCw3FlexMultisigReverseProposalsQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.reverseProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.reverseProposals({
            limit: args.limit,
            startBefore: args.startBefore,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigReverseProposalsQuery = useCw3FlexMultisigReverseProposalsQuery;
function useCw3FlexMultisigListProposalsQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.listProposals(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.listProposals({
            limit: args.limit,
            startAfter: args.startAfter,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigListProposalsQuery = useCw3FlexMultisigListProposalsQuery;
function useCw3FlexMultisigProposalQuery({ client, args, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.proposal(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client
        ? client.proposal({
            proposalId: args.proposalId,
        })
        : Promise.reject(new Error('Invalid client')), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigProposalQuery = useCw3FlexMultisigProposalQuery;
function useCw3FlexMultisigThresholdQuery({ client, options, }) {
    return (0, react_query_1.useQuery)(exports.cw3FlexMultisigQueryKeys.threshold(client === null || client === void 0 ? void 0 : client.contractAddress), () => (client ? client.threshold() : Promise.reject(new Error('Invalid client'))), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useCw3FlexMultisigThresholdQuery = useCw3FlexMultisigThresholdQuery;
function useCw3FlexMultisigMemberChangedHookMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.memberChangedHook(msg, fee, memo, funds), options);
}
exports.useCw3FlexMultisigMemberChangedHookMutation = useCw3FlexMultisigMemberChangedHookMutation;
function useCw3FlexMultisigCloseMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.close(msg, fee, memo, funds), options);
}
exports.useCw3FlexMultisigCloseMutation = useCw3FlexMultisigCloseMutation;
function useCw3FlexMultisigExecuteMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.execute(msg, fee, memo, funds), options);
}
exports.useCw3FlexMultisigExecuteMutation = useCw3FlexMultisigExecuteMutation;
function useCw3FlexMultisigVoteMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.vote(msg, fee, memo, funds), options);
}
exports.useCw3FlexMultisigVoteMutation = useCw3FlexMultisigVoteMutation;
function useCw3FlexMultisigProposeMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.propose(msg, fee, memo, funds), options);
}
exports.useCw3FlexMultisigProposeMutation = useCw3FlexMultisigProposeMutation;
//# sourceMappingURL=Cw3FlexMultisig.react-query.js.map