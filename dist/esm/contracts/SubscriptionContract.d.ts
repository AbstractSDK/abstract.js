/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/
import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
export declare type Addr = string;
export interface AddOnState {
    memory: Memory;
    proxy_address: Addr;
}
export interface Memory {
    address: Addr;
}
export declare type AssetInfoBaseFor_Addr = {
    cw20: Addr;
} | {
    native: string;
};
export declare type AssetInfoBaseFor_String = {
    cw20: string;
} | {
    native: string;
};
export declare type BaseResponse = {
    config: {};
} | {
    admin: {};
};
export declare type Decimal = string;
export declare type Uint128 = string;
export declare type EmissionType = "None" | {
    BlockShared: [Decimal, AssetInfoBaseFor_Addr];
} | {
    BlockPerUser: [Decimal, AssetInfoBaseFor_Addr];
} | {
    IncomeBased: AssetInfoBaseFor_Addr;
};
export interface ConfigResponse {
    contribution: ContributionConfig;
    subscription: SubscriptionConfig;
}
export interface ContributionConfig {
    emission_user_share: Decimal;
    emissions_amp_factor: Uint128;
    emissions_offset: Uint128;
    max_emissions_multiple: Decimal;
    protocol_income_share: Decimal;
    token_info: AssetInfoBaseFor_Addr;
}
export interface SubscriptionConfig {
    factory_address: Addr;
    payment_asset: AssetInfoBaseFor_Addr;
    subscription_cost_per_block: Decimal;
    subscription_per_block_emissions: EmissionType;
    version_control_address: Addr;
}
export declare type Uint64 = string;
export interface ContributorStateResponse {
    compensation: Compensation;
}
export interface Compensation {
    base_per_block: Decimal;
    expiration_block: Uint64;
    last_claim_block: Uint64;
    weight: number;
}
export declare type ExecuteMsg = {
    base: AddOnExecuteMsg;
} | {
    receive: Cw20ReceiveMsg;
} | {
    pay: {
        os_id: number;
    };
} | {
    unsubscribe: {
        os_ids: number[];
    };
} | {
    claim_compensation: {
        os_id: number;
    };
} | {
    claim_emissions: {
        os_id: number;
    };
} | {
    update_contributor: {
        base_per_block?: Decimal | null;
        contributor_os_id: number;
        expiration_block?: Uint64 | null;
        weight?: Uint64 | null;
    };
} | {
    remove_contributor: {
        os_id: number;
    };
} | {
    update_subscription_config: {
        factory_address?: string | null;
        payment_asset?: AssetInfoBaseFor_String | null;
        subscription_cost?: Decimal | null;
        version_control_address?: string | null;
    };
} | {
    update_contribution_config: {
        emission_user_share?: Decimal | null;
        emissions_amp_factor?: Uint128 | null;
        emissions_offset?: Uint128 | null;
        max_emissions_multiple?: Decimal | null;
        project_token_info?: AssetInfoBaseFor_String | null;
        protocol_income_share?: Decimal | null;
    };
};
export declare type AddOnExecuteMsg = {
    update_config: {
        memory_address?: string | null;
    };
};
export declare type Binary = string;
export interface Cw20ReceiveMsg {
    amount: Uint128;
    msg: Binary;
    sender: string;
}
export interface FeeResponse {
    fee: Asset;
}
export interface Asset {
    amount: Uint128;
    info: AssetInfoBaseFor_Addr;
}
export declare type UncheckedEmissionType = "None" | {
    BlockShared: [Decimal, AssetInfoBaseFor_String];
} | {
    BlockPerUser: [Decimal, AssetInfoBaseFor_String];
} | {
    IncomeBased: AssetInfoBaseFor_String;
};
export interface InstantiateMsg {
    base: AddOnInstantiateMsg;
    contribution?: ContributionInstantiateMsg | null;
    subscription: SubscriptionInstantiateMsg;
}
export interface AddOnInstantiateMsg {
    memory_address: string;
}
export interface ContributionInstantiateMsg {
    emission_user_share: Decimal;
    emissions_amp_factor: Uint128;
    emissions_offset: Uint128;
    income_averaging_period: Uint64;
    max_emissions_multiple: Decimal;
    protocol_income_share: Decimal;
    token_info: AssetInfoBaseFor_String;
}
export interface SubscriptionInstantiateMsg {
    factory_addr: string;
    payment_asset: AssetInfoBaseFor_String;
    subscription_cost_per_block: Decimal;
    subscription_per_block_emissions: UncheckedEmissionType;
    version_control_addr: string;
}
export declare type QueryMsg = {
    base: AddOnQueryMsg;
} | {
    state: {};
} | {
    config: {};
} | {
    fee: {};
} | {
    subscriber_state: {
        os_id: number;
    };
} | {
    contributor_state: {
        os_id: number;
    };
};
export declare type AddOnQueryMsg = {
    config: {};
} | {
    admin: {};
};
export interface StateResponse {
    contribution: ContributionState;
    subscription: SubscriptionState;
}
export interface ContributionState {
    emissions: Decimal;
    expense: Decimal;
    income_target: Decimal;
    total_weight: Uint128;
}
export interface SubscriptionState {
    active_subs: number;
}
export interface SubscriberStateResponse {
    currently_subscribed: boolean;
    subscriber_details: Subscriber;
}
export interface Subscriber {
    expiration_block: number;
    last_emission_claim_block: number;
    manager_addr: Addr;
}
export interface SubscriptionReadOnlyInterface {
    contractAddress: string;
    queryBase: () => Promise<BaseResponse>;
    state: () => Promise<StateResponse>;
    config: () => Promise<ConfigResponse>;
    fee: () => Promise<FeeResponse>;
    subscriberState: ({ osId }: {
        osId: number;
    }) => Promise<SubscriberStateResponse>;
    contributorState: ({ osId }: {
        osId: number;
    }) => Promise<ContributorStateResponse>;
}
export declare class SubscriptionQueryClient implements SubscriptionReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    queryBase: () => Promise<BaseResponse>;
    state: () => Promise<StateResponse>;
    config: () => Promise<ConfigResponse>;
    fee: () => Promise<FeeResponse>;
    subscriberState: ({ osId }: {
        osId: number;
    }) => Promise<SubscriberStateResponse>;
    contributorState: ({ osId }: {
        osId: number;
    }) => Promise<ContributorStateResponse>;
}
export interface SubscriptionInterface extends SubscriptionReadOnlyInterface {
    contractAddress: string;
    sender: string;
    base: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    pay: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    unsubscribe: ({ osIds }: {
        osIds: number[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    claimCompensation: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    claimEmissions: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateContributor: ({ basePerBlock, contributorOsId, expirationBlock, weight }: {
        basePerBlock?: Decimal;
        contributorOsId: number;
        expirationBlock?: Uint64;
        weight?: Uint64;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    removeContributor: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateSubscriptionConfig: ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress }: {
        factoryAddress?: string;
        paymentAsset?: AssetInfoBaseFor_String;
        subscriptionCost?: Decimal;
        versionControlAddress?: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateContributionConfig: ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare }: {
        emissionUserShare?: Decimal;
        emissionsAmpFactor?: Uint128;
        emissionsOffset?: Uint128;
        maxEmissionsMultiple?: Decimal;
        projectTokenInfo?: AssetInfoBaseFor_String;
        protocolIncomeShare?: Decimal;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
export declare class SubscriptionClient extends SubscriptionQueryClient implements SubscriptionInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    base: (fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    receive: ({ amount, msg, sender }: {
        amount: string;
        msg: string;
        sender: string;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    pay: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    unsubscribe: ({ osIds }: {
        osIds: number[];
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    claimCompensation: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    claimEmissions: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateContributor: ({ basePerBlock, contributorOsId, expirationBlock, weight }: {
        basePerBlock?: string | undefined;
        contributorOsId: number;
        expirationBlock?: string | undefined;
        weight?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    removeContributor: ({ osId }: {
        osId: number;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateSubscriptionConfig: ({ factoryAddress, paymentAsset, subscriptionCost, versionControlAddress }: {
        factoryAddress?: string | undefined;
        paymentAsset?: AssetInfoBaseFor_String | undefined;
        subscriptionCost?: string | undefined;
        versionControlAddress?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
    updateContributionConfig: ({ emissionUserShare, emissionsAmpFactor, emissionsOffset, maxEmissionsMultiple, projectTokenInfo, protocolIncomeShare }: {
        emissionUserShare?: string | undefined;
        emissionsAmpFactor?: string | undefined;
        emissionsOffset?: string | undefined;
        maxEmissionsMultiple?: string | undefined;
        projectTokenInfo?: AssetInfoBaseFor_String | undefined;
        protocolIncomeShare?: string | undefined;
    }, fee?: number | StdFee | "auto", memo?: string, funds?: readonly Coin[]) => Promise<ExecuteResult>;
}
