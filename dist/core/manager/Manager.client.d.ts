/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { Coin, StdFee } from '@cosmjs/amino';
import { Binary, ModuleInfo, Module, ConfigResponse, InfoResponse, ModuleAddressesResponse, ModuleInfosResponse, ModuleVersionsResponse } from './Manager.types';
export interface ManagerReadOnlyInterface {
    contractAddress: string;
    moduleVersions: ({ names }: {
        names: string[];
    }) => Promise<ModuleVersionsResponse>;
    moduleAddresses: ({ names }: {
        names: string[];
    }) => Promise<ModuleAddressesResponse>;
    moduleInfos: ({ pageSize, pageToken, }: {
        pageSize?: number;
        pageToken?: string;
    }) => Promise<ModuleInfosResponse>;
    config: () => Promise<ConfigResponse>;
    info: () => Promise<InfoResponse>;
}
export declare class ManagerQueryClient implements ManagerReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    moduleVersions: ({ names }: {
        names: string[];
    }) => Promise<ModuleVersionsResponse>;
    moduleAddresses: ({ names }: {
        names: string[];
    }) => Promise<ModuleAddressesResponse>;
    moduleInfos: ({ pageSize, pageToken, }: {
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    }) => Promise<ModuleInfosResponse>;
    config: () => Promise<ConfigResponse>;
    info: () => Promise<InfoResponse>;
}
export interface ManagerInterface extends ManagerReadOnlyInterface {
    contractAddress: string;
    sender: string;
    execOnModule: ({ execMsg, moduleId, }: {
        execMsg: Binary;
        moduleId: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateModuleAddresses: ({ toAdd, toRemove, }: {
        toAdd?: string[][][];
        toRemove?: string[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createModule: ({ initMsg, module, }: {
        initMsg?: Binary;
        module: ModuleInfo;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    registerModule: ({ module, moduleAddr, }: {
        module: Module;
        moduleAddr: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeModule: ({ moduleId, }: {
        moduleId: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    upgrade: ({ migrateMsg, module, }: {
        migrateMsg?: Binary;
        module: ModuleInfo;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateInfo: ({ description, link, name, }: {
        description?: string;
        link?: string;
        name?: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setRoot: ({ governanceType, root, }: {
        governanceType?: string;
        root: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    suspendOs: ({ newStatus, }: {
        newStatus: boolean;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class ManagerClient extends ManagerQueryClient implements ManagerInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    execOnModule: ({ execMsg, moduleId, }: {
        execMsg: Binary;
        moduleId: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateModuleAddresses: ({ toAdd, toRemove, }: {
        toAdd?: string[][][] | undefined;
        toRemove?: string[] | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    createModule: ({ initMsg, module, }: {
        initMsg?: string | undefined;
        module: ModuleInfo;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    registerModule: ({ module, moduleAddr, }: {
        module: Module;
        moduleAddr: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeModule: ({ moduleId, }: {
        moduleId: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    upgrade: ({ migrateMsg, module, }: {
        migrateMsg?: string | undefined;
        module: ModuleInfo;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateInfo: ({ description, link, name, }: {
        description?: string | undefined;
        link?: string | undefined;
        name?: string | undefined;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    setRoot: ({ governanceType, root, }: {
        governanceType?: string | undefined;
        root: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    suspendOs: ({ newStatus, }: {
        newStatus: boolean;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
