/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate';
import { StdFee } from '@cosmjs/amino';
import { CosmosMsgForEmpty, Coin, UncheckedProxyAsset, AssetConfigResponse, AssetsResponse, BaseAssetResponse, ValidityResponse, ConfigResponse, HoldingAmountResponse, HoldingValueResponse, TotalValueResponse } from './Proxy.types';
export interface ProxyReadOnlyInterface {
    contractAddress: string;
    config: () => Promise<ConfigResponse>;
    totalValue: () => Promise<TotalValueResponse>;
    holdingValue: ({ identifier }: {
        identifier: string;
    }) => Promise<HoldingValueResponse>;
    holdingAmount: ({ identifier }: {
        identifier: string;
    }) => Promise<HoldingAmountResponse>;
    assetConfig: ({ identifier }: {
        identifier: string;
    }) => Promise<AssetConfigResponse>;
    assets: ({ pageSize, pageToken, }: {
        pageSize?: number;
        pageToken?: string;
    }) => Promise<AssetsResponse>;
    checkValidity: () => Promise<ValidityResponse>;
    baseAsset: () => Promise<BaseAssetResponse>;
}
export declare class ProxyQueryClient implements ProxyReadOnlyInterface {
    client: CosmWasmClient;
    contractAddress: string;
    constructor(client: CosmWasmClient, contractAddress: string);
    config: () => Promise<ConfigResponse>;
    totalValue: () => Promise<TotalValueResponse>;
    holdingValue: ({ identifier }: {
        identifier: string;
    }) => Promise<HoldingValueResponse>;
    holdingAmount: ({ identifier, }: {
        identifier: string;
    }) => Promise<HoldingAmountResponse>;
    assetConfig: ({ identifier }: {
        identifier: string;
    }) => Promise<AssetConfigResponse>;
    assets: ({ pageSize, pageToken, }: {
        pageSize?: number | undefined;
        pageToken?: string | undefined;
    }) => Promise<AssetsResponse>;
    checkValidity: () => Promise<ValidityResponse>;
    baseAsset: () => Promise<BaseAssetResponse>;
}
export interface ProxyInterface extends ProxyReadOnlyInterface {
    contractAddress: string;
    sender: string;
    setAdmin: ({ admin, }: {
        admin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    moduleAction: ({ msgs, }: {
        msgs: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addModule: ({ module, }: {
        module: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeModule: ({ module, }: {
        module: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateAssets: ({ toAdd, toRemove, }: {
        toAdd: UncheckedProxyAsset[];
        toRemove: string[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export declare class ProxyClient extends ProxyQueryClient implements ProxyInterface {
    client: SigningCosmWasmClient;
    sender: string;
    contractAddress: string;
    constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string);
    setAdmin: ({ admin, }: {
        admin: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    moduleAction: ({ msgs, }: {
        msgs: CosmosMsgForEmpty[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    addModule: ({ module, }: {
        module: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    removeModule: ({ module, }: {
        module: string;
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
    updateAssets: ({ toAdd, toRemove, }: {
        toAdd: UncheckedProxyAsset[];
        toRemove: string[];
    }, fee?: number | StdFee | 'auto', memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
