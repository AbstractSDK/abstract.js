"use strict";
/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.useProxySetAdminMutation = exports.useProxyModuleActionMutation = exports.useProxyAddModuleMutation = exports.useProxyRemoveModuleMutation = exports.useProxyUpdateAssetsMutation = exports.useProxyConfigQuery = exports.useProxyTotalValueQuery = exports.useProxyHoldingValueQuery = exports.useProxyHoldingAmountQuery = exports.useProxyAssetConfigQuery = exports.useProxyAssetsQuery = exports.useProxyCheckValidityQuery = exports.useProxyBaseAssetQuery = exports.proxyQueries = exports.proxyQueryKeys = void 0;
const react_query_1 = require("@tanstack/react-query");
exports.proxyQueryKeys = {
    contract: [{
            contract: "proxy"
        }],
    address: (contractAddress) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.contract[0]), { address: contractAddress })],
    config: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "config", args })],
    totalValue: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "total_value", args })],
    holdingValue: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "holding_value", args })],
    holdingAmount: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "holding_amount", args })],
    assetConfig: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "asset_config", args })],
    assets: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "assets", args })],
    checkValidity: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "check_validity", args })],
    baseAsset: (contractAddress, args) => [Object.assign(Object.assign({}, exports.proxyQueryKeys.address(contractAddress)[0]), { method: "base_asset", args })]
};
exports.proxyQueries = {
    config: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    totalValue: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.totalValue(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.totalValue() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    holdingValue: ({ client, options, args }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.holdingValue(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client ? client.holdingValue({
            identifier: args.identifier
        }) : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    holdingAmount: ({ client, options, args }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.holdingAmount(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client ? client.holdingAmount({
            identifier: args.identifier
        }) : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    assetConfig: ({ client, options, args }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.assetConfig(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client ? client.assetConfig({
            identifier: args.identifier
        }) : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    assets: ({ client, options, args }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.assets(client === null || client === void 0 ? void 0 : client.contractAddress, args), queryFn: () => client ? client.assets({
            pageSize: args.pageSize,
            pageToken: args.pageToken
        }) : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    checkValidity: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.checkValidity(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.checkValidity() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) })),
    baseAsset: ({ client, options }) => (Object.assign(Object.assign({ queryKey: exports.proxyQueryKeys.baseAsset(client === null || client === void 0 ? void 0 : client.contractAddress), queryFn: () => client ? client.baseAsset() : Promise.reject(new Error("Invalid client")) }, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }))
};
function useProxyBaseAssetQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.baseAsset(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.baseAsset() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyBaseAssetQuery = useProxyBaseAssetQuery;
function useProxyCheckValidityQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.checkValidity(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.checkValidity() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyCheckValidityQuery = useProxyCheckValidityQuery;
function useProxyAssetsQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.assets(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.assets({
        pageSize: args.pageSize,
        pageToken: args.pageToken
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyAssetsQuery = useProxyAssetsQuery;
function useProxyAssetConfigQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.assetConfig(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.assetConfig({
        identifier: args.identifier
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyAssetConfigQuery = useProxyAssetConfigQuery;
function useProxyHoldingAmountQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.holdingAmount(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.holdingAmount({
        identifier: args.identifier
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyHoldingAmountQuery = useProxyHoldingAmountQuery;
function useProxyHoldingValueQuery({ client, args, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.holdingValue(client === null || client === void 0 ? void 0 : client.contractAddress, args), () => client ? client.holdingValue({
        identifier: args.identifier
    }) : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyHoldingValueQuery = useProxyHoldingValueQuery;
function useProxyTotalValueQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.totalValue(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.totalValue() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyTotalValueQuery = useProxyTotalValueQuery;
function useProxyConfigQuery({ client, options }) {
    return (0, react_query_1.useQuery)(exports.proxyQueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), Object.assign(Object.assign({}, options), { enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true) }));
}
exports.useProxyConfigQuery = useProxyConfigQuery;
function useProxyUpdateAssetsMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAssets(msg, fee, memo, funds), options);
}
exports.useProxyUpdateAssetsMutation = useProxyUpdateAssetsMutation;
function useProxyRemoveModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.removeModule(msg, fee, memo, funds), options);
}
exports.useProxyRemoveModuleMutation = useProxyRemoveModuleMutation;
function useProxyAddModuleMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.addModule(msg, fee, memo, funds), options);
}
exports.useProxyAddModuleMutation = useProxyAddModuleMutation;
function useProxyModuleActionMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.moduleAction(msg, fee, memo, funds), options);
}
exports.useProxyModuleActionMutation = useProxyModuleActionMutation;
function useProxySetAdminMutation(options) {
    return (0, react_query_1.useMutation)(({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds), options);
}
exports.useProxySetAdminMutation = useProxySetAdminMutation;
//# sourceMappingURL=Proxy.react-query.js.map