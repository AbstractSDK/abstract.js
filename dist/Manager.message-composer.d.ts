/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { Coin } from '@cosmjs/amino';
import { MsgExecuteContractEncodeObject } from 'cosmwasm';
import { Binary, Module } from './types/Manager.types';
export interface RawManagerMessage {
    setAdmin: ({ admin, governanceType, }: {
        admin: string;
        governanceType?: string;
    }) => Record<string, unknown>;
    createModule: ({ initMsg, module, }: {
        initMsg?: Binary;
        module: Module;
    }) => Record<string, unknown>;
}
export declare class RawManagerMessageComposer implements RawManagerMessage {
    constructor();
    setAdmin: ({ admin, governanceType, }: {
        admin: string;
        governanceType?: string | undefined;
    }) => Record<string, unknown>;
    createModule: ({ initMsg, module, }: {
        initMsg?: string | undefined;
        module: Module;
    }) => Record<string, unknown>;
}
export interface ManagerMessage {
    contractAddress: string;
    sender: string;
    setAdmin: ({ admin, governanceType, }: {
        admin: string;
        governanceType?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    createModule: ({ initMsg, module, }: {
        initMsg?: Binary;
        module: Module;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    registerModule: ({ module, moduleAddr, }: {
        module: Module;
        moduleAddr: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeModule: ({ moduleName, }: {
        moduleName: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    execOnModule: ({ execMsg, moduleName, }: {
        execMsg: Binary;
        moduleName: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ root, vcAddr, }: {
        root?: string;
        vcAddr?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    upgrade: ({ migrateMsg, module, }: {
        migrateMsg?: Binary;
        module: Module;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    suspendOs: ({ newStatus, }: {
        newStatus: boolean;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateInfo: ({ description, link, name, }: {
        description?: string;
        link?: string;
        name?: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export declare class ManagerMessageComposer implements ManagerMessage {
    sender: string;
    contractAddress: string;
    constructor(sender: string, contractAddress: string);
    setAdmin: ({ admin, governanceType, }: {
        admin: string;
        governanceType?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    createModule: ({ initMsg, module, }: {
        initMsg?: string | undefined;
        module: Module;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    registerModule: ({ module, moduleAddr, }: {
        module: Module;
        moduleAddr: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    removeModule: ({ moduleName, }: {
        moduleName: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    execOnModule: ({ execMsg, moduleName, }: {
        execMsg: Binary;
        moduleName: string;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateConfig: ({ root, vcAddr, }: {
        root?: string | undefined;
        vcAddr?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    upgrade: ({ migrateMsg, module, }: {
        migrateMsg?: string | undefined;
        module: Module;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    suspendOs: ({ newStatus, }: {
        newStatus: boolean;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
    updateInfo: ({ description, link, name, }: {
        description?: string | undefined;
        link?: string | undefined;
        name?: string | undefined;
    }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
