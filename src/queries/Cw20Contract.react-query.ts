/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.5.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { useQuery, UseQueryOptions, UseMutationOptions, useMutation } from "@tanstack/react-query";
import { AllAccountsResponse, Uint128, Expiration, Timestamp, Uint64, AllAllowancesResponse, AllowanceInfo, AllowanceResponse, BalanceResponse, Binary, DownloadLogoResponse, ExecuteMsg, Logo, EmbeddedLogo, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, MinterResponse, LogoInfo, Addr, MarketingInfoResponse, QueryMsg, TokenInfoResponse } from "../contracts/Cw20Contract";
import { Cw20QueryClient, Cw20Client } from "../contracts/Cw20Contract";
export interface Cw20DownloadLogoQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<DownloadLogoResponse | undefined, Error, DownloadLogoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20DownloadLogoQuery({
  client,
  options
}: Cw20DownloadLogoQuery) {
  return useQuery<DownloadLogoResponse | undefined, Error, DownloadLogoResponse, (string | undefined)[]>(["cw20DownloadLogo", client?.contractAddress], () => client ? client.downloadLogo() : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20MarketingInfoQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<MarketingInfoResponse | undefined, Error, MarketingInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20MarketingInfoQuery({
  client,
  options
}: Cw20MarketingInfoQuery) {
  return useQuery<MarketingInfoResponse | undefined, Error, MarketingInfoResponse, (string | undefined)[]>(["cw20MarketingInfo", client?.contractAddress], () => client ? client.marketingInfo() : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20AllAccountsQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<AllAccountsResponse | undefined, Error, AllAccountsResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw20AllAccountsQuery({
  client,
  args,
  options
}: Cw20AllAccountsQuery) {
  return useQuery<AllAccountsResponse | undefined, Error, AllAccountsResponse, (string | undefined)[]>(["cw20AllAccounts", client?.contractAddress, JSON.stringify(args)], () => client ? client.allAccounts({
    limit: args.limit,
    startAfter: args.startAfter
  }) : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20AllAllowancesQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<AllAllowancesResponse | undefined, Error, AllAllowancesResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useCw20AllAllowancesQuery({
  client,
  args,
  options
}: Cw20AllAllowancesQuery) {
  return useQuery<AllAllowancesResponse | undefined, Error, AllAllowancesResponse, (string | undefined)[]>(["cw20AllAllowances", client?.contractAddress, JSON.stringify(args)], () => client ? client.allAllowances({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20AllowanceQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<AllowanceResponse | undefined, Error, AllowanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    owner: string;
    spender: string;
  };
}
export function useCw20AllowanceQuery({
  client,
  args,
  options
}: Cw20AllowanceQuery) {
  return useQuery<AllowanceResponse | undefined, Error, AllowanceResponse, (string | undefined)[]>(["cw20Allowance", client?.contractAddress, JSON.stringify(args)], () => client ? client.allowance({
    owner: args.owner,
    spender: args.spender
  }) : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20MinterQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<MinterResponse | undefined, Error, MinterResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20MinterQuery({
  client,
  options
}: Cw20MinterQuery) {
  return useQuery<MinterResponse | undefined, Error, MinterResponse, (string | undefined)[]>(["cw20Minter", client?.contractAddress], () => client ? client.minter() : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20TokenInfoQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<TokenInfoResponse | undefined, Error, TokenInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20TokenInfoQuery({
  client,
  options
}: Cw20TokenInfoQuery) {
  return useQuery<TokenInfoResponse | undefined, Error, TokenInfoResponse, (string | undefined)[]>(["cw20TokenInfo", client?.contractAddress], () => client ? client.tokenInfo() : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20BalanceQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<BalanceResponse | undefined, Error, BalanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    address: string;
  };
}
export function useCw20BalanceQuery({
  client,
  args,
  options
}: Cw20BalanceQuery) {
  return useQuery<BalanceResponse | undefined, Error, BalanceResponse, (string | undefined)[]>(["cw20Balance", client?.contractAddress, JSON.stringify(args)], () => client ? client.balance({
    address: args.address
  }) : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw20UploadLogoMutation {
  client: Cw20Client;
}
export function useCw20UploadLogoMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UploadLogoMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20UploadLogoMutation>(({
    client
  }) => client.uploadLogo(), options);
}
export interface Cw20UpdateMarketingMutation {
  client: Cw20Client;
  args: {
    description?: string;
    marketing?: string;
    project?: string;
  };
}
export function useCw20UpdateMarketingMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UpdateMarketingMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20UpdateMarketingMutation>(({
    client,
    args
  }) => client.updateMarketing(args), options);
}
export interface Cw20UpdateMinterMutation {
  client: Cw20Client;
  args: {
    newMinter: string;
  };
}
export function useCw20UpdateMinterMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20UpdateMinterMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20UpdateMinterMutation>(({
    client,
    args
  }) => client.updateMinter(args), options);
}
export interface Cw20MintMutation {
  client: Cw20Client;
  args: {
    amount: string;
    recipient: string;
  };
}
export function useCw20MintMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20MintMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20MintMutation>(({
    client,
    args
  }) => client.mint(args), options);
}
export interface Cw20BurnFromMutation {
  client: Cw20Client;
  args: {
    amount: string;
    owner: string;
  };
}
export function useCw20BurnFromMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20BurnFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20BurnFromMutation>(({
    client,
    args
  }) => client.burnFrom(args), options);
}
export interface Cw20SendFromMutation {
  client: Cw20Client;
  args: {
    amount: string;
    contract: string;
    msg: string;
    owner: string;
  };
}
export function useCw20SendFromMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20SendFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20SendFromMutation>(({
    client,
    args
  }) => client.sendFrom(args), options);
}
export interface Cw20TransferFromMutation {
  client: Cw20Client;
  args: {
    amount: string;
    owner: string;
    recipient: string;
  };
}
export function useCw20TransferFromMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20TransferFromMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20TransferFromMutation>(({
    client,
    args
  }) => client.transferFrom(args), options);
}
export interface Cw20DecreaseAllowanceMutation {
  client: Cw20Client;
  args: {
    amount: string;
    expires?: Expiration;
    spender: string;
  };
}
export function useCw20DecreaseAllowanceMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20DecreaseAllowanceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20DecreaseAllowanceMutation>(({
    client,
    args
  }) => client.decreaseAllowance(args), options);
}
export interface Cw20IncreaseAllowanceMutation {
  client: Cw20Client;
  args: {
    amount: string;
    expires?: Expiration;
    spender: string;
  };
}
export function useCw20IncreaseAllowanceMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IncreaseAllowanceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20IncreaseAllowanceMutation>(({
    client,
    args
  }) => client.increaseAllowance(args), options);
}
export interface Cw20SendMutation {
  client: Cw20Client;
  args: {
    amount: string;
    contract: string;
    msg: string;
  };
}
export function useCw20SendMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20SendMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20SendMutation>(({
    client,
    args
  }) => client.send(args), options);
}
export interface Cw20BurnMutation {
  client: Cw20Client;
  args: {
    amount: string;
  };
}
export function useCw20BurnMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20BurnMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20BurnMutation>(({
    client,
    args
  }) => client.burn(args), options);
}
export interface Cw20TransferMutation {
  client: Cw20Client;
  args: {
    amount: string;
    recipient: string;
  };
}
export function useCw20TransferMutation(options: Omit<UseMutationOptions<ExecuteResult, Error, Cw20TransferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20TransferMutation>(({
    client,
    args
  }) => client.transfer(args), options);
}
