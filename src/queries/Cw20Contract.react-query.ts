/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { useQuery, UseQueryOptions } from "@tanstack/react-query";
import { AllAccountsResponse, AllAllowancesResponse, AllowanceResponse, BalanceResponse, DownloadLogoResponse,  MinterResponse,  MarketingInfoResponse, TokenInfoResponse } from "../contracts/Cw20Contract";
import { Cw20QueryClient } from "../contracts/Cw20Contract";
export interface Cw20DownloadLogoQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<DownloadLogoResponse | undefined, Error, DownloadLogoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20DownloadLogoQuery({
  client,
  options
}: Cw20DownloadLogoQuery) {
  return useQuery<DownloadLogoResponse | undefined, Error, DownloadLogoResponse, (string | undefined)[]>(["cw20DownloadLogo", client?.contractAddress], () => client ? client.downloadLogo() : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
export interface Cw20MarketingInfoQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<MarketingInfoResponse | undefined, Error, MarketingInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20MarketingInfoQuery({
  client,
  options
}: Cw20MarketingInfoQuery) {
  return useQuery<MarketingInfoResponse | undefined, Error, MarketingInfoResponse, (string | undefined)[]>(["cw20MarketingInfo", client?.contractAddress], () => client ? client.marketingInfo() : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
export interface Cw20AllAccountsQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<AllAccountsResponse | undefined, Error, AllAccountsResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw20AllAccountsQuery({
  client,
  args,
  options
}: Cw20AllAccountsQuery) {
  return useQuery<AllAccountsResponse | undefined, Error, AllAccountsResponse, (string | undefined)[]>(["cw20AllAccounts", client?.contractAddress, JSON.stringify(args)], () => client ? client.allAccounts({
    limit: args.limit,
    startAfter: args.startAfter
  }) : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
export interface Cw20AllAllowancesQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<AllAllowancesResponse | undefined, Error, AllAllowancesResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useCw20AllAllowancesQuery({
  client,
  args,
  options
}: Cw20AllAllowancesQuery) {
  return useQuery<AllAllowancesResponse | undefined, Error, AllAllowancesResponse, (string | undefined)[]>(["cw20AllAllowances", client?.contractAddress, JSON.stringify(args)], () => client ? client.allAllowances({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }) : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
export interface Cw20AllowanceQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<AllowanceResponse | undefined, Error, AllowanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    owner: string;
    spender: string;
  };
}
export function useCw20AllowanceQuery({
  client,
  args,
  options
}: Cw20AllowanceQuery) {
  return useQuery<AllowanceResponse | undefined, Error, AllowanceResponse, (string | undefined)[]>(["cw20Allowance", client?.contractAddress, JSON.stringify(args)], () => client ? client.allowance({
    owner: args.owner,
    spender: args.spender
  }) : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
export interface Cw20MinterQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<MinterResponse | undefined, Error, MinterResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20MinterQuery({
  client,
  options
}: Cw20MinterQuery) {
  return useQuery<MinterResponse | undefined, Error, MinterResponse, (string | undefined)[]>(["cw20Minter", client?.contractAddress], () => client ? client.minter() : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
export interface Cw20TokenInfoQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<TokenInfoResponse | undefined, Error, TokenInfoResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20TokenInfoQuery({
  client,
  options
}: Cw20TokenInfoQuery) {
  return useQuery<TokenInfoResponse | undefined, Error, TokenInfoResponse, (string | undefined)[]>(["cw20TokenInfo", client?.contractAddress], () => client ? client.tokenInfo() : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
export interface Cw20BalanceQuery {
  client?: Cw20QueryClient;
  options?: Omit<UseQueryOptions<BalanceResponse | undefined, Error, BalanceResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    address: string;
  };
}
export function useCw20BalanceQuery({
  client,
  args,
  options
}: Cw20BalanceQuery) {
  return useQuery<BalanceResponse | undefined, Error, BalanceResponse, (string | undefined)[]>(["cw20Balance", client?.contractAddress, JSON.stringify(args)], () => client ? client.balance({
    address: args.address
  }) : undefined, {
    enabled: !!client && options?.enabled,
    ...options
  });
}
