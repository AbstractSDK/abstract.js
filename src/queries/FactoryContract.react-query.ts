/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.6.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { useQuery, UseQueryOptions, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ConfigResponse, ExecuteMsg, Uint128, Binary, GovernanceDetails, Cw20ReceiveMsg, InstantiateMsg, QueryMsg } from "../contracts/FactoryContract";
import { FactoryQueryClient, FactoryClient } from "../contracts/FactoryContract";
export interface FactoryConfigQuery {
  client?: FactoryQueryClient;
  options?: Omit<UseQueryOptions<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useFactoryConfigQuery({
  client,
  options
}: FactoryConfigQuery) {
  return useQuery<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>(["factoryConfig", client?.contractAddress], () => client ? client.config() : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface FactoryCreateOsMutation {
  client: FactoryClient;
  msg: {
    description?: string;
    governance: GovernanceDetails;
    link?: string;
    name: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useFactoryCreateOsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryCreateOsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryCreateOsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createOs(msg, fee, memo, funds), options);
}
export interface FactoryUpdateConfigMutation {
  client: FactoryClient;
  msg: {
    admin?: string;
    memoryContract?: string;
    moduleFactoryAddress?: string;
    subscriptionAddress?: string;
    versionControlContract?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useFactoryUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface FactoryReceiveMutation {
  client: FactoryClient;
  msg: {
    amount: string;
    msg: string;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useFactoryReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, FactoryReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, FactoryReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
