/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import { useQuery, UseQueryOptions } from '@tanstack/react-query'
import {
  ConfigResponse,
  InfoResponse,
  ModuleAddressesResponse,
  ModuleInfosResponse,
  ModuleVersionsResponse,
} from '../contracts/ManagerContract'
import { ManagerQueryClient } from '../contracts/ManagerContract'
export interface ManagerInfoQuery {
  client?: ManagerQueryClient
  options?: Omit<
    UseQueryOptions<InfoResponse | undefined, Error, InfoResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export function useManagerInfoQuery({ client, options }: ManagerInfoQuery) {
  return useQuery<InfoResponse | undefined, Error, InfoResponse, (string | undefined)[]>(
    ['managerInfo', client?.contractAddress],
    () => (client ? client.info() : undefined),
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface ManagerConfigQuery {
  client?: ManagerQueryClient
  options?: Omit<
    UseQueryOptions<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export function useManagerConfigQuery({ client, options }: ManagerConfigQuery) {
  return useQuery<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>(
    ['managerConfig', client?.contractAddress],
    () => (client ? client.config() : undefined),
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface ManagerModuleInfosQuery {
  client?: ManagerQueryClient
  options?: Omit<
    UseQueryOptions<
      ModuleInfosResponse | undefined,
      Error,
      ModuleInfosResponse,
      (string | undefined)[]
    >,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    iterLimit?: number
    lastModuleName?: string
  }
}
export function useManagerModuleInfosQuery({ client, args, options }: ManagerModuleInfosQuery) {
  return useQuery<
    ModuleInfosResponse | undefined,
    Error,
    ModuleInfosResponse,
    (string | undefined)[]
  >(
    ['managerModuleInfos', client?.contractAddress],
    () =>
      client
        ? client.moduleInfos({
            iterLimit: args.iterLimit,
            lastModuleName: args.lastModuleName,
          })
        : undefined,
    {
      enabled: !!client,
      ...options,
    }
  )
}
export interface ManagerModuleAddressesQuery {
  client?: ManagerQueryClient
  options?: Omit<
    UseQueryOptions<
      ModuleAddressesResponse | undefined,
      Error,
      ModuleAddressesResponse,
      (string | undefined)[]
    >,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    names: string[]
  }
}
export function useManagerModuleAddressesQuery({
  client,
  args,
  options,
}: ManagerModuleAddressesQuery) {
  return useQuery<
    ModuleAddressesResponse | undefined,
    Error,
    ModuleAddressesResponse,
    (string | undefined)[]
  >(
    ['managerModuleAddresses', client?.contractAddress],
    () =>
      client
        ? client.moduleAddresses({
            names: args.names,
          })
        : undefined,
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface ManagerModuleVersionsQuery {
  client?: ManagerQueryClient
  options?: Omit<
    UseQueryOptions<
      ModuleVersionsResponse | undefined,
      Error,
      ModuleVersionsResponse,
      (string | undefined)[]
    >,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    names: string[]
  }
}
export function useManagerModuleVersionsQuery({
  client,
  args,
  options,
}: ManagerModuleVersionsQuery) {
  return useQuery<
    ModuleVersionsResponse | undefined,
    Error,
    ModuleVersionsResponse,
    (string | undefined)[]
  >(
    ['managerModuleVersions', client?.contractAddress],
    () =>
      client
        ? client.moduleVersions({
            names: args.names,
          })
        : undefined,
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
