/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.15.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { useQuery, UseQueryOptions } from "react-query";
import { Binary, Uint64, ConfigResponse, InfoResponse, OsInfo, InstantiateMsg, ManagerModuleInfo, ContractVersion, ModuleAddressesResponse, ModuleInfosResponse, ModuleVersionsResponse, ModuleKind, Module, ModuleInfo, QueryOsConfigResponse } from "./ManagerContract";
import { ManagerQueryClient } from "./ManagerContract";
export interface ManagerInfoQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<InfoResponse, Error, InfoResponse, (string | undefined)[]>;
}
export function useManagerInfoQuery({
  client,
  options
}: ManagerInfoQuery) {
  return useQuery<InfoResponse, Error, InfoResponse, (string | undefined)[]>(["managerInfo", client.contractAddress], () => client.info(), options);
}
export interface ManagerConfigQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>;
}
export function useManagerConfigQuery({
  client,
  options
}: ManagerConfigQuery) {
  return useQuery<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>(["managerConfig", client.contractAddress], () => client.config(), options);
}
export interface ManagerModuleInfosQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<ModuleInfosResponse, Error, ModuleInfosResponse, (string | undefined)[]>;
  args: {
    iterLimit?: number;
    lastModuleName?: string;
  };
}
export function useManagerModuleInfosQuery({
  client,
  args,
  options
}: ManagerModuleInfosQuery) {
  return useQuery<ModuleInfosResponse, Error, ModuleInfosResponse, (string | undefined)[]>(["managerModuleInfos", client.contractAddress], () => client.moduleInfos({
    iterLimit: args.iterLimit,
    lastModuleName: args.lastModuleName
  }), options);
}
export interface ManagerModuleAddressesQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<ModuleAddressesResponse, Error, ModuleAddressesResponse, (string | undefined)[]>;
  args: {
    names: string[];
  };
}
export function useManagerModuleAddressesQuery({
  client,
  args,
  options
}: ManagerModuleAddressesQuery) {
  return useQuery<ModuleAddressesResponse, Error, ModuleAddressesResponse, (string | undefined)[]>(["managerModuleAddresses", client.contractAddress], () => client.moduleAddresses({
    names: args.names
  }), options);
}
export interface ManagerModuleVersionsQuery {
  client: ManagerQueryClient;
  options?: UseQueryOptions<ModuleVersionsResponse, Error, ModuleVersionsResponse, (string | undefined)[]>;
  args: {
    names: string[];
  };
}
export function useManagerModuleVersionsQuery({
  client,
  args,
  options
}: ManagerModuleVersionsQuery) {
  return useQuery<ModuleVersionsResponse, Error, ModuleVersionsResponse, (string | undefined)[]>(["managerModuleVersions", client.contractAddress], () => client.moduleVersions({
    names: args.names
  }), options);
}
