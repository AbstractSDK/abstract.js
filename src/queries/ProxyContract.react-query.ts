/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.2.14.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import { useQuery, UseQueryOptions } from 'react-query'
import {
  AssetInfoBase_for_Addr,
  Addr,
  ConfigResponse,
  CosmosMsg_for_Empty,
  BankMsg,
  Uint128,
  StakingMsg,
  DistributionMsg,
  Binary,
  IbcMsg,
  Timestamp,
  Uint64,
  WasmMsg,
  GovMsg,
  VoteOption,
  Coin,
  Empty,
  IbcTimeout,
  IbcTimeoutBlock,
  HoldingAmountResponse,
  HoldingValueResponse,
  InstantiateMsg,
  ValueRef,
  Decimal,
  ProxyAsset,
  AssetBase_for_Addr,
  State,
  TotalValueResponse,
  VaultAssetConfigResponse,
} from '../contracts/ProxyContract'
import { ProxyQueryClient } from '../contracts/ProxyContract'
export interface ProxyVaultAssetConfigQuery {
  client: ProxyQueryClient
  options?: UseQueryOptions<
    VaultAssetConfigResponse,
    Error,
    VaultAssetConfigResponse,
    (string | undefined)[]
  >
  args: {
    identifier: string
  }
}
export function useProxyVaultAssetConfigQuery({
  client,
  args,
  options,
}: ProxyVaultAssetConfigQuery) {
  return useQuery<
    VaultAssetConfigResponse,
    Error,
    VaultAssetConfigResponse,
    (string | undefined)[]
  >(
    ['proxyVaultAssetConfig', client.contractAddress],
    () =>
      client.vaultAssetConfig({
        identifier: args.identifier,
      }),
    options
  )
}
export interface ProxyHoldingAmountQuery {
  client: ProxyQueryClient
  options?: UseQueryOptions<
    HoldingAmountResponse,
    Error,
    HoldingAmountResponse,
    (string | undefined)[]
  >
  args: {
    identifier: string
  }
}
export function useProxyHoldingAmountQuery({ client, args, options }: ProxyHoldingAmountQuery) {
  return useQuery<HoldingAmountResponse, Error, HoldingAmountResponse, (string | undefined)[]>(
    ['proxyHoldingAmount', client.contractAddress],
    () =>
      client.holdingAmount({
        identifier: args.identifier,
      }),
    options
  )
}
export interface ProxyHoldingValueQuery {
  client: ProxyQueryClient
  options?: UseQueryOptions<
    HoldingValueResponse,
    Error,
    HoldingValueResponse,
    (string | undefined)[]
  >
  args: {
    identifier: string
  }
}
export function useProxyHoldingValueQuery({ client, args, options }: ProxyHoldingValueQuery) {
  return useQuery<HoldingValueResponse, Error, HoldingValueResponse, (string | undefined)[]>(
    ['proxyHoldingValue', client.contractAddress],
    () =>
      client.holdingValue({
        identifier: args.identifier,
      }),
    options
  )
}
export interface ProxyTotalValueQuery {
  client: ProxyQueryClient
  options?: UseQueryOptions<TotalValueResponse, Error, TotalValueResponse, (string | undefined)[]>
}
export function useProxyTotalValueQuery({ client, options }: ProxyTotalValueQuery) {
  return useQuery<TotalValueResponse, Error, TotalValueResponse, (string | undefined)[]>(
    ['proxyTotalValue', client.contractAddress],
    () => client.totalValue(),
    options
  )
}
export interface ProxyConfigQuery {
  client: ProxyQueryClient
  options?: UseQueryOptions<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>
}
export function useProxyConfigQuery({ client, options }: ProxyConfigQuery) {
  return useQuery<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>(
    ['proxyConfig', client.contractAddress],
    () => client.config(),
    options
  )
}
