/**
* This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { useQuery, UseQueryOptions } from "react-query";
import { ConfigResponse,HoldingAmountResponse, HoldingValueResponse,  ProxyAssetConfigResponse, ProxyAssetsResponse, TotalValueResponse } from "../contracts/ProxyContract";
import { ProxyQueryClient } from "../contracts/ProxyContract";
export interface ProxyProxyAssetsQuery {
  client?: ProxyQueryClient;
  options?: UseQueryOptions<ProxyAssetsResponse | undefined, Error, ProxyAssetsResponse, (string | undefined)[]>;
  args: {
    iterLimit?: number;
    lastAssetName?: string;
  };
}
export function useProxyProxyAssetsQuery({
  client,
  args,
  options
}: ProxyProxyAssetsQuery) {
  return useQuery<ProxyAssetsResponse | undefined, Error, ProxyAssetsResponse, (string | undefined)[]>(["proxyProxyAssets", client?.contractAddress], () => client ? client.proxyAssets({
    iterLimit: args.iterLimit,
    lastAssetName: args.lastAssetName
  }) : undefined, {
    ...options,
    enabled: !!client  && options?.enabled
  });
}
export interface ProxyProxyAssetConfigQuery {
  client?: ProxyQueryClient;
  options?: UseQueryOptions<ProxyAssetConfigResponse | undefined, Error, ProxyAssetConfigResponse, (string | undefined)[]>;
  args: {
    identifier: string;
  };
}
export function useProxyProxyAssetConfigQuery({
  client,
  args,
  options
}: ProxyProxyAssetConfigQuery) {
  return useQuery<ProxyAssetConfigResponse | undefined, Error, ProxyAssetConfigResponse, (string | undefined)[]>(["proxyProxyAssetConfig", client?.contractAddress], () => client ? client.proxyAssetConfig({
    identifier: args.identifier
  }) : undefined, {
    ...options,
    enabled: !!client  && options?.enabled
  });
}
export interface ProxyHoldingAmountQuery {
  client?: ProxyQueryClient;
  options?: UseQueryOptions<HoldingAmountResponse | undefined, Error, HoldingAmountResponse, (string | undefined)[]>;
  args: {
    identifier: string;
  };
}
export function useProxyHoldingAmountQuery({
  client,
  args,
  options
}: ProxyHoldingAmountQuery) {
  return useQuery<HoldingAmountResponse | undefined, Error, HoldingAmountResponse, (string | undefined)[]>(["proxyHoldingAmount", client?.contractAddress], () => client ? client.holdingAmount({
    identifier: args.identifier
  }) : undefined, {
    ...options,
    enabled: !!client  && options?.enabled
  });
}
export interface ProxyHoldingValueQuery {
  client?: ProxyQueryClient;
  options?: UseQueryOptions<HoldingValueResponse | undefined, Error, HoldingValueResponse, (string | undefined)[]>;
  args: {
    identifier: string;
  };
}
export function useProxyHoldingValueQuery({
  client,
  args,
  options
}: ProxyHoldingValueQuery) {
  return useQuery<HoldingValueResponse | undefined, Error, HoldingValueResponse, (string | undefined)[]>(["proxyHoldingValue", client?.contractAddress], () => client ? client.holdingValue({
    identifier: args.identifier
  }) : undefined, {
    ...options,
    enabled: !!client  && options?.enabled
  });
}
export interface ProxyTotalValueQuery {
  client?: ProxyQueryClient;
  options?: UseQueryOptions<TotalValueResponse | undefined, Error, TotalValueResponse, (string | undefined)[]>;
}
export function useProxyTotalValueQuery({
  client,
  options
}: ProxyTotalValueQuery) {
  return useQuery<TotalValueResponse | undefined, Error, TotalValueResponse, (string | undefined)[]>(["proxyTotalValue", client?.contractAddress], () => client ? client.totalValue() : undefined, {
    ...options,
    enabled: !!client  && options?.enabled
  });
}
export interface ProxyConfigQuery {
  client?: ProxyQueryClient;
  options?: UseQueryOptions<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>;
}
export function useProxyConfigQuery({
  client,
  options
}: ProxyConfigQuery) {
  return useQuery<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>(["proxyConfig", client?.contractAddress], () => client ? client.config() : undefined, {
    ...options,
    enabled: !!client  && options?.enabled
  });
}
