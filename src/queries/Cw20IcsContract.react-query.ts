/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.6.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { useQuery, UseQueryOptions, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { AdminResponse, AllowedResponse, Amount, Uint128, ChannelResponse, Coin, Cw20Coin, ChannelInfo, IbcEndpoint, ConfigResponse, ExecuteMsg, Binary, Cw20ReceiveMsg, TransferMsg, AllowMsg, InitMsg, ListAllowedResponse, AllowedInfo, ListChannelsResponse, PortResponse, QueryMsg } from "../contracts/Cw20IcsContract";
import { Cw20IcsQueryClient, Cw20IcsClient } from "../contracts/Cw20IcsContract";
export interface Cw20IcsListAllowedQuery {
  client?: Cw20IcsQueryClient;
  options?: Omit<UseQueryOptions<ListAllowedResponse | undefined, Error, ListAllowedResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw20IcsListAllowedQuery({
  client,
  args,
  options
}: Cw20IcsListAllowedQuery) {
  return useQuery<ListAllowedResponse | undefined, Error, ListAllowedResponse, (string | undefined)[]>(["cw20IcsListAllowed", client?.contractAddress, JSON.stringify(args)], () => client ? client.listAllowed({
    limit: args.limit,
    startAfter: args.startAfter
  }) : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20IcsAllowedQuery {
  client?: Cw20IcsQueryClient;
  options?: Omit<UseQueryOptions<AllowedResponse | undefined, Error, AllowedResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    contract: string;
  };
}
export function useCw20IcsAllowedQuery({
  client,
  args,
  options
}: Cw20IcsAllowedQuery) {
  return useQuery<AllowedResponse | undefined, Error, AllowedResponse, (string | undefined)[]>(["cw20IcsAllowed", client?.contractAddress, JSON.stringify(args)], () => client ? client.allowed({
    contract: args.contract
  }) : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20IcsAdminQuery {
  client?: Cw20IcsQueryClient;
  options?: Omit<UseQueryOptions<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20IcsAdminQuery({
  client,
  options
}: Cw20IcsAdminQuery) {
  return useQuery<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>(["cw20IcsAdmin", client?.contractAddress], () => client ? client.admin() : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20IcsConfigQuery {
  client?: Cw20IcsQueryClient;
  options?: Omit<UseQueryOptions<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20IcsConfigQuery({
  client,
  options
}: Cw20IcsConfigQuery) {
  return useQuery<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>(["cw20IcsConfig", client?.contractAddress], () => client ? client.config() : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20IcsChannelQuery {
  client?: Cw20IcsQueryClient;
  options?: Omit<UseQueryOptions<ChannelResponse | undefined, Error, ChannelResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    id: string;
  };
}
export function useCw20IcsChannelQuery({
  client,
  args,
  options
}: Cw20IcsChannelQuery) {
  return useQuery<ChannelResponse | undefined, Error, ChannelResponse, (string | undefined)[]>(["cw20IcsChannel", client?.contractAddress, JSON.stringify(args)], () => client ? client.channel({
    id: args.id
  }) : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20IcsListChannelsQuery {
  client?: Cw20IcsQueryClient;
  options?: Omit<UseQueryOptions<ListChannelsResponse | undefined, Error, ListChannelsResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20IcsListChannelsQuery({
  client,
  options
}: Cw20IcsListChannelsQuery) {
  return useQuery<ListChannelsResponse | undefined, Error, ListChannelsResponse, (string | undefined)[]>(["cw20IcsListChannels", client?.contractAddress], () => client ? client.listChannels() : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20IcsPortQuery {
  client?: Cw20IcsQueryClient;
  options?: Omit<UseQueryOptions<PortResponse | undefined, Error, PortResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw20IcsPortQuery({
  client,
  options
}: Cw20IcsPortQuery) {
  return useQuery<PortResponse | undefined, Error, PortResponse, (string | undefined)[]>(["cw20IcsPort", client?.contractAddress], () => client ? client.port() : undefined, { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20IcsUpdateAdminMutation {
  client: Cw20IcsClient;
  msg: {
    admin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useCw20IcsUpdateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsUpdateAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20IcsUpdateAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateAdmin(msg, fee, memo, funds), options);
}
export interface Cw20IcsAllowMutation {
  client: Cw20IcsClient;
  msg: {
    contract: string;
    gasLimit?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useCw20IcsAllowMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsAllowMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20IcsAllowMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.allow(msg, fee, memo, funds), options);
}
export interface Cw20IcsTransferMutation {
  client: Cw20IcsClient;
  msg: {
    channel: string;
    remoteAddress: string;
    timeout?: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useCw20IcsTransferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsTransferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20IcsTransferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transfer(msg, fee, memo, funds), options);
}
export interface Cw20IcsReceiveMutation {
  client: Cw20IcsClient;
  msg: {
    amount: string;
    msg: string;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useCw20IcsReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20IcsReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
