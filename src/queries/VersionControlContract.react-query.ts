/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.10.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Addr,
  ApiAddressResponse,
  ContractVersion,
  ApiAddressesResponse,
  Uint64,
  CodeIdResponse,
  CodeIdsResponse,
  ConfigResponse,
  ExecuteMsg,
  InstantiateMsg,
  ModuleInfo,
  OsCoreResponse,
  Core,
  QueryMsg,
} from '../types/VersionControl.types'
import { VersionControlQueryClient, VersionControlClient } from '../contracts/VersionControl.client'
export interface VersionControlReactQuery<TResponse> {
  client: VersionControlQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface VersionControlApiAddressesQuery
  extends VersionControlReactQuery<ApiAddressesResponse> {
  args: {
    iterLimit?: number
    lastApiModule?: ContractVersion
  }
}
export function useVersionControlApiAddressesQuery({
  client,
  args,
  options,
}: VersionControlApiAddressesQuery) {
  return useQuery<ApiAddressesResponse, Error>(
    ['versionControlApiAddresses', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.apiAddresses({
            iterLimit: args.iterLimit,
            lastApiModule: args.lastApiModule,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlCodeIdsQuery extends VersionControlReactQuery<CodeIdsResponse> {
  args: {
    iterLimit?: number
    lastModule?: ContractVersion
  }
}
export function useVersionControlCodeIdsQuery({
  client,
  args,
  options,
}: VersionControlCodeIdsQuery) {
  return useQuery<CodeIdsResponse, Error>(
    ['versionControlCodeIds', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.codeIds({
            iterLimit: args.iterLimit,
            lastModule: args.lastModule,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlConfigQuery extends VersionControlReactQuery<ConfigResponse> {}
export function useVersionControlConfigQuery({ client, options }: VersionControlConfigQuery) {
  return useQuery<ConfigResponse, Error>(
    ['versionControlConfig', client?.contractAddress],
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlApiAddressQuery
  extends VersionControlReactQuery<ApiAddressResponse> {
  args: {
    module: ModuleInfo
  }
}
export function useVersionControlApiAddressQuery({
  client,
  args,
  options,
}: VersionControlApiAddressQuery) {
  return useQuery<ApiAddressResponse, Error>(
    ['versionControlApiAddress', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.apiAddress({
            module: args.module,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlCodeIdQuery extends VersionControlReactQuery<CodeIdResponse> {
  args: {
    module: ModuleInfo
  }
}
export function useVersionControlCodeIdQuery({ client, args, options }: VersionControlCodeIdQuery) {
  return useQuery<CodeIdResponse, Error>(
    ['versionControlCodeId', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.codeId({
            module: args.module,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlOsCoreQuery extends VersionControlReactQuery<OsCoreResponse> {
  args: {
    osId: number
  }
}
export function useVersionControlOsCoreQuery({ client, args, options }: VersionControlOsCoreQuery) {
  return useQuery<OsCoreResponse, Error>(
    ['versionControlOsCore', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.osCore({
            osId: args.osId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlSetFactoryMutation {
  client: VersionControlClient
  msg: {
    newFactory: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlSetFactoryMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlSetFactoryMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlSetFactoryMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setFactory(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlSetAdminMutation {
  client: VersionControlClient
  msg: {
    newAdmin: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlSetAdminMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlSetAdminMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlSetAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlAddOsMutation {
  client: VersionControlClient
  msg: {
    managerAddress: string
    osId: number
    proxyAddress: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlAddOsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlAddOsMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlAddOsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.addOs(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlRemoveApiMutation {
  client: VersionControlClient
  msg: {
    module: string
    version: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlRemoveApiMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlRemoveApiMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlRemoveApiMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.removeApi(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlAddApiMutation {
  client: VersionControlClient
  msg: {
    address: string
    module: string
    version: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlAddApiMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlAddApiMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlAddApiMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.addApi(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlRemoveCodeIdMutation {
  client: VersionControlClient
  msg: {
    module: string
    version: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlRemoveCodeIdMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeCodeId(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlAddCodeIdMutation {
  client: VersionControlClient
  msg: {
    codeId: number
    module: string
    version: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlAddCodeIdMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlAddCodeIdMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlAddCodeIdMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.addCodeId(msg, fee, memo, funds),
    options
  )
}
