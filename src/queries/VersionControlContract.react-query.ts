/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.2.15.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

 import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
 import { Coin, StdFee } from "@cosmjs/amino";
 import { useQuery, UseQueryOptions, useMutation, UseMutationOptions } from "@tanstack/react-query";
 import { Addr, ApiAddressResponse, ContractVersion, ApiAddressesResponse, Uint64, CodeIdResponse, CodeIdsResponse, ConfigResponse, InstantiateMsg, ModuleInfo, OsCoreResponse, Core } from "../contracts/VersionControlContract";
 import { VersionControlQueryClient, VersionControlClient } from "../contracts/VersionControlContract";
 export interface VersionControlApiAddressesQuery {
  client?: VersionControlQueryClient
  options?: Omit<
    UseQueryOptions<ApiAddressesResponse | undefined, Error, ApiAddressesResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    iterLimit?: number
    lastApiModule?: ContractVersion
  }
}
export function useVersionControlApiAddressesQuery({
  client,
  args,
  options,
}: VersionControlApiAddressesQuery) {
  return useQuery<ApiAddressesResponse | undefined, Error, ApiAddressesResponse, (string | undefined)[]>(
    ['versionControlApiAddresses', client?.contractAddress],
    () =>
      client ? client.apiAddresses({
        iterLimit: args.iterLimit,
        lastApiModule: args.lastApiModule,
      }) : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlCodeIdsQuery {
  client?: VersionControlQueryClient
  options?: Omit<
    UseQueryOptions<CodeIdsResponse | undefined, Error, CodeIdsResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    iterLimit?: number
    lastModule?: ContractVersion
  }
}
export function useVersionControlCodeIdsQuery({
  client,
  args,
  options,
}: VersionControlCodeIdsQuery) {
  return useQuery<CodeIdsResponse | undefined, Error, CodeIdsResponse, (string | undefined)[]>(
    ['versionControlCodeIds', client?.contractAddress],
    () =>
      client ? client.codeIds({
        iterLimit: args.iterLimit,
        lastModule: args.lastModule,
      }) : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlConfigQuery {
  client?: VersionControlQueryClient
  options?: Omit<
    UseQueryOptions<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export function useVersionControlConfigQuery({ client, options }: VersionControlConfigQuery) {
  return useQuery<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>(
    ['versionControlConfig', client?.contractAddress],
    () => client?  client.config() : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlApiAddressQuery {
  client?: VersionControlQueryClient
  options?: Omit<
    UseQueryOptions<ApiAddressResponse | undefined, Error, ApiAddressResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    module: ModuleInfo
  }
}
export function useVersionControlApiAddressQuery({
  client,
  args,
  options,
}: VersionControlApiAddressQuery) {
  return useQuery<ApiAddressResponse | undefined, Error, ApiAddressResponse, (string | undefined)[]>(
    ['versionControlApiAddress', client?.contractAddress],
    () =>
      client ? client.apiAddress({
        module: args.module,
      }) : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlCodeIdQuery {
  client?: VersionControlQueryClient
  options?: Omit<
    UseQueryOptions<CodeIdResponse | undefined, Error, CodeIdResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    module: ModuleInfo
  }
}
export function useVersionControlCodeIdQuery({ client, args, options }: VersionControlCodeIdQuery) {
  return useQuery<CodeIdResponse | undefined, Error, CodeIdResponse, (string | undefined)[]>(
    ['versionControlCodeId', client?.contractAddress],
    () =>
      client ? client.codeId({
        module: args.module,
      }) : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}

interface VersionControlReactQuery<QueryResponse> {
  client?: VersionControlQueryClient
  options?: Omit<
    UseQueryOptions<QueryResponse | undefined, Error, QueryResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export interface VersionControlOsCoreQuery extends VersionControlReactQuery<OsCoreResponse> {
  args: {
    osId: number
  }
}
export function useVersionControlOsCoreQuery({ client, args, options }: VersionControlOsCoreQuery) {
  return useQuery<OsCoreResponse | undefined, Error, OsCoreResponse, (string | undefined)[]>(
    ['versionControlOsCore', client?.contractAddress],
    () =>
      client ? client.osCore({
        osId: args.osId,
      }) : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}


export interface VersionControlSetFactoryMutation {
  client: VersionControlClient;
  msg: {
    newFactory: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useVersionControlSetFactoryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetFactoryMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlSetFactoryMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setFactory(msg, fee, memo, funds), options);
}
export interface VersionControlSetAdminMutation {
  client: VersionControlClient;
  msg: {
    newAdmin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useVersionControlSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlSetAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setAdmin(msg, fee, memo, funds), options);
}
export interface VersionControlAddOsMutation {
  client: VersionControlClient;
  msg: {
    managerAddress: string;
    osId: number;
    proxyAddress: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useVersionControlAddOsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddOsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlAddOsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addOs(msg, fee, memo, funds), options);
}
export interface VersionControlRemoveApiMutation {
  client: VersionControlClient;
  msg: {
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useVersionControlRemoveApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveApiMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlRemoveApiMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeApi(msg, fee, memo, funds), options);
}
export interface VersionControlAddApiMutation {
  client: VersionControlClient;
  msg: {
    address: string;
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useVersionControlAddApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddApiMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlAddApiMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addApi(msg, fee, memo, funds), options);
}
export interface VersionControlRemoveCodeIdMutation {
  client: VersionControlClient;
  msg: {
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useVersionControlRemoveCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeCodeId(msg, fee, memo, funds), options);
}
export interface VersionControlAddCodeIdMutation {
  client: VersionControlClient;
  msg: {
    codeId: number;
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: readonly Coin[];
  };
}
export function useVersionControlAddCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlAddCodeIdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addCodeId(msg, fee, memo, funds), options);
}
