/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.3.9.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import { useQuery, UseQueryOptions } from '@tanstack/react-query'
import {
  BaseResponse,
  ConfigResponse,
  ContributorStateResponse,
  FeeResponse,
  StateResponse,
  SubscriberStateResponse,
} from '../contracts/SubscriptionContract'
import { SubscriptionQueryClient } from '../contracts/SubscriptionContract'
export interface SubscriptionContributorStateQuery {
  client?: SubscriptionQueryClient
  options?: Omit<
    UseQueryOptions<
      ContributorStateResponse | undefined,
      Error,
      ContributorStateResponse,
      (string | undefined)[]
    >,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    osId: number
  }
}
export function useSubscriptionContributorStateQuery({
  client,
  args,
  options,
}: SubscriptionContributorStateQuery) {
  return useQuery<
    ContributorStateResponse | undefined,
    Error,
    ContributorStateResponse,
    (string | undefined)[]
  >(
    ['subscriptionContributorState', client?.contractAddress],
    () =>
      client
        ? client.contributorState({
            osId: args.osId,
          })
        : undefined,
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface SubscriptionSubscriberStateQuery {
  client?: SubscriptionQueryClient
  options?: Omit<
    UseQueryOptions<
      SubscriberStateResponse | undefined,
      Error,
      SubscriberStateResponse,
      (string | undefined)[]
    >,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
  args: {
    osId: number
  }
}
export function useSubscriptionSubscriberStateQuery({
  client,
  args,
  options,
}: SubscriptionSubscriberStateQuery) {
  return useQuery<
    SubscriberStateResponse | undefined,
    Error,
    SubscriberStateResponse,
    (string | undefined)[]
  >(
    ['subscriptionSubscriberState', client?.contractAddress],
    () =>
      client
        ? client.subscriberState({
            osId: args.osId,
          })
        : undefined,
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface SubscriptionFeeQuery {
  client?: SubscriptionQueryClient
  options?: Omit<
    UseQueryOptions<FeeResponse | undefined, Error, FeeResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export function useSubscriptionFeeQuery({ client, options }: SubscriptionFeeQuery) {
  return useQuery<FeeResponse | undefined, Error, FeeResponse, (string | undefined)[]>(
    ['subscriptionFee', client?.contractAddress],
    () => (client ? client.fee() : undefined),
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface SubscriptionConfigQuery {
  client?: SubscriptionQueryClient
  options?: Omit<
    UseQueryOptions<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export function useSubscriptionConfigQuery({ client, options }: SubscriptionConfigQuery) {
  return useQuery<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>(
    ['subscriptionConfig', client?.contractAddress],
    () => (client ? client.config() : undefined),
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface SubscriptionStateQuery {
  client?: SubscriptionQueryClient
  options?: Omit<
    UseQueryOptions<StateResponse | undefined, Error, StateResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export function useSubscriptionStateQuery({ client, options }: SubscriptionStateQuery) {
  return useQuery<StateResponse | undefined, Error, StateResponse, (string | undefined)[]>(
    ['subscriptionState', client?.contractAddress],
    () => (client ? client.state() : undefined),
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
export interface SubscriptionBaseQuery {
  client?: SubscriptionQueryClient
  options?: Omit<
    UseQueryOptions<BaseResponse | undefined, Error, BaseResponse, (string | undefined)[]>,
    'queryKey' | 'queryFn' | 'initialData'
  > & { initialData?: () => undefined }
}
export function useSubscriptionBaseQuery({ client, options }: SubscriptionBaseQuery) {
  return useQuery<BaseResponse | undefined, Error, BaseResponse, (string | undefined)[]>(
    ['subscriptionBase', client?.contractAddress],
    () => (client ? client.queryBase() : undefined),
    {
      ...options,
      enabled: !!client && options?.enabled,
    }
  )
}
