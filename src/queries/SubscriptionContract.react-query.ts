/**
* This file was automatically generated by cosmwasm-typescript-gen@0.2.15.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the cosmwasm-typescript-gen generate command to regenerate this file.
*/

import { useQuery, UseQueryOptions } from "react-query";
import { Addr, AddOnState, Memory, AssetInfoBaseFor_Addr, Decimal, Uint128, Uint64, ConfigResponse, ContributionConfig, SubscriptionConfig, ContributorStateResponse, Compensation, FeeResponse, AssetBaseFor_Addr, AssetInfoBaseFor_String, InstantiateMsg, AddOnInstantiateMsg, ContributionInstantiateMsg, SubscriptionInstantiateMsg, StateResponse, ContributionState, SubscriptionState, SubscriberStateResponse, Subscriber, Deposit } from "../contracts/SubscriptionContract";
import { SubscriptionQueryClient } from "../contracts/SubscriptionContract";
export interface SubscriptionContributorStateQuery {
  client: SubscriptionQueryClient;
  options?: UseQueryOptions<ContributorStateResponse, Error, ContributorStateResponse, (string | undefined)[]>;
  args: {
    contributorAddr: string;
  };
}
export function useSubscriptionContributorStateQuery({
  client,
  args,
  options
}: SubscriptionContributorStateQuery) {
  return useQuery<ContributorStateResponse, Error, ContributorStateResponse, (string | undefined)[]>(["subscriptionContributorState", client.contractAddress], () => client.contributorState({
    contributorAddr: args.contributorAddr
  }), options);
}
export interface SubscriptionSubscriberStateQuery {
  client: SubscriptionQueryClient;
  options?: UseQueryOptions<SubscriberStateResponse, Error, SubscriberStateResponse, (string | undefined)[]>;
  args: {
    osId: number;
  };
}
export function useSubscriptionSubscriberStateQuery({
  client,
  args,
  options
}: SubscriptionSubscriberStateQuery) {
  return useQuery<SubscriberStateResponse, Error, SubscriberStateResponse, (string | undefined)[]>(["subscriptionSubscriberState", client.contractAddress], () => client.subscriberState({
    osId: args.osId
  }), options);
}
export interface SubscriptionFeeQuery {
  client: SubscriptionQueryClient;
  options?: UseQueryOptions<FeeResponse, Error, FeeResponse, (string | undefined)[]>;
}
export function useSubscriptionFeeQuery({
  client,
  options
}: SubscriptionFeeQuery) {
  return useQuery<FeeResponse, Error, FeeResponse, (string | undefined)[]>(["subscriptionFee", client.contractAddress], () => client.fee(), options);
}
export interface SubscriptionConfigQuery {
  client: SubscriptionQueryClient;
  options?: UseQueryOptions<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>;
}
export function useSubscriptionConfigQuery({
  client,
  options
}: SubscriptionConfigQuery) {
  return useQuery<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>(["subscriptionConfig", client.contractAddress], () => client.config(), options);
}
export interface SubscriptionStateQuery {
  client: SubscriptionQueryClient;
  options?: UseQueryOptions<StateResponse, Error, StateResponse, (string | undefined)[]>;
}
export function useSubscriptionStateQuery({
  client,
  options
}: SubscriptionStateQuery) {
  return useQuery<StateResponse, Error, StateResponse, (string | undefined)[]>(["subscriptionState", client.contractAddress], () => client.state(), options);
}
export interface SubscriptionBaseQuery {
  client: SubscriptionQueryClient;
  options?: UseQueryOptions<any, Error, any, (string | undefined)[]>;
}
export function useSubscriptionBaseQuery({
  client,
  options
}: SubscriptionBaseQuery) {
  return useQuery<any, Error, any, (string | undefined)[]>(["subscriptionBase", client.contractAddress], () => client.base(), options);
}
