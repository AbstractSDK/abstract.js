/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.6.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { useQuery, UseQueryOptions } from '@tanstack/react-query'
import {
  AssetEntry,
  AssetInfoBaseForAddr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ContractListResponse,
  ContractEntry,
  ContractsResponse,
  InstantiateMsg,
  QueryMsg,
} from '../contracts/MemoryContract'
import { MemoryQueryClient } from '../contracts/MemoryContract'
export interface MemoryReactQuery<TResponse> {
  client: MemoryQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse | undefined, Error, TResponse, (string | undefined)[]>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MemoryAssetListQuery extends MemoryReactQuery<AssetListResponse> {
  args: {
    iterLimit?: number
    lastAssetName?: string
  }
}
export function useMemoryAssetListQuery({ client, args, options }: MemoryAssetListQuery) {
  return useQuery<AssetListResponse | undefined, Error, AssetListResponse, (string | undefined)[]>(
    ['memoryAssetList', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.assetList({
            iterLimit: args.iterLimit,
            lastAssetName: args.lastAssetName,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryContractListQuery extends MemoryReactQuery<ContractListResponse> {
  args: {
    iterLimit?: number
    lastContract?: ContractEntry
  }
}
export function useMemoryContractListQuery({ client, args, options }: MemoryContractListQuery) {
  return useQuery<
    ContractListResponse | undefined,
    Error,
    ContractListResponse,
    (string | undefined)[]
  >(
    ['memoryContractList', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.contractList({
            iterLimit: args.iterLimit,
            lastContract: args.lastContract,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryContractsQuery extends MemoryReactQuery<ContractsResponse> {
  args: {
    names: ContractEntry[]
  }
}
export function useMemoryContractsQuery({ client, args, options }: MemoryContractsQuery) {
  return useQuery<ContractsResponse | undefined, Error, ContractsResponse, (string | undefined)[]>(
    ['memoryContracts', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.contracts({
            names: args.names,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryAssetsQuery extends MemoryReactQuery<AssetsResponse> {
  args: {
    names: string[]
  }
}
export function useMemoryAssetsQuery({ client, args, options }: MemoryAssetsQuery) {
  return useQuery<AssetsResponse | undefined, Error, AssetsResponse, (string | undefined)[]>(
    ['memoryAssets', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.assets({
            names: args.names,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
