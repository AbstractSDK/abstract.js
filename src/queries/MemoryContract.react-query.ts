/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.4.2.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { useQuery, UseQueryOptions } from '@tanstack/react-query'
import {
  AssetInfoBase_for_Addr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ContractListResponse,
  ContractsResponse,
  InstantiateMsg,
  QueryMsg,
} from '../contracts/MemoryContract'
import { MemoryQueryClient } from '../contracts/MemoryContract'
export interface MemoryAssetListQuery {
  client?: MemoryQueryClient
  options?: Omit<
    UseQueryOptions<
      AssetListResponse | undefined,
      Error,
      AssetListResponse,
      (string | undefined)[]
    >,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
  args: {
    iterLimit?: number
    lastAssetName?: string
  }
}
export function useMemoryAssetListQuery({ client, args, options }: MemoryAssetListQuery) {
  return useQuery<AssetListResponse | undefined, Error, AssetListResponse, (string | undefined)[]>(
    ['memoryAssetList', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.assetList({
            iterLimit: args.iterLimit,
            lastAssetName: args.lastAssetName,
          })
        : undefined,
    {
      enabled: !!client && options?.enabled,
      ...options,
    }
  )
}
export interface MemoryContractListQuery {
  client?: MemoryQueryClient
  options?: Omit<
    UseQueryOptions<
      ContractListResponse | undefined,
      Error,
      ContractListResponse,
      (string | undefined)[]
    >,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
  args: {
    iterLimit?: number
    lastContractName?: string
  }
}
export function useMemoryContractListQuery({ client, args, options }: MemoryContractListQuery) {
  return useQuery<
    ContractListResponse | undefined,
    Error,
    ContractListResponse,
    (string | undefined)[]
  >(
    ['memoryContractList', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.contractList({
            iterLimit: args.iterLimit,
            lastContractName: args.lastContractName,
          })
        : undefined,
    {
      enabled: !!client && options?.enabled,
      ...options,
    }
  )
}
export interface MemoryContractsQuery {
  client?: MemoryQueryClient
  options?: Omit<
    UseQueryOptions<
      ContractsResponse | undefined,
      Error,
      ContractsResponse,
      (string | undefined)[]
    >,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
  args: {
    names: string[]
  }
}
export function useMemoryContractsQuery({ client, args, options }: MemoryContractsQuery) {
  return useQuery<ContractsResponse | undefined, Error, ContractsResponse, (string | undefined)[]>(
    ['memoryContracts', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.contracts({
            names: args.names,
          })
        : undefined,
    {
      enabled: !!client && options?.enabled,
      ...options,
    }
  )
}
export interface MemoryAssetsQuery {
  client?: MemoryQueryClient
  options?: Omit<
    UseQueryOptions<AssetsResponse | undefined, Error, AssetsResponse, (string | undefined)[]>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
  args: {
    names: string[]
  }
}
export function useMemoryAssetsQuery({ client, args, options }: MemoryAssetsQuery) {
  return useQuery<AssetsResponse | undefined, Error, AssetsResponse, (string | undefined)[]>(
    ['memoryAssets', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.assets({
            names: args.names,
          })
        : undefined,
    {
      enabled: !!client && options?.enabled,
      ...options,
    }
  )
}
