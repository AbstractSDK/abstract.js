/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.10.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Binary, Uint64, ConfigResponse, ExecuteMsg, ModuleKind, Module, ModuleInfo, InfoResponse, OsInfo, InstantiateMsg, ManagerModuleInfo, ContractVersion, ModuleAddressesResponse, ModuleInfosResponse, ModuleVersionsResponse, QueryMsg, QueryOsConfigResponse } from "../types/Manager.types";
import { ManagerQueryClient, ManagerClient } from "../contracts/Manager.client";
export interface ManagerReactQuery<TResponse> {
  client: ManagerQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ManagerInfoQuery extends ManagerReactQuery<InfoResponse> {}
export function useManagerInfoQuery({
  client,
  options
}: ManagerInfoQuery) {
  return useQuery<InfoResponse, Error, InfoResponse, (string | undefined)[]>(["managerInfo", client?.contractAddress], () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ManagerConfigQuery extends ManagerReactQuery<ConfigResponse> {}
export function useManagerConfigQuery({
  client,
  options
}: ManagerConfigQuery) {
  return useQuery<ConfigResponse, Error, ConfigResponse, (string | undefined)[]>(["managerConfig", client?.contractAddress], () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ManagerModuleInfosQuery extends ManagerReactQuery<ModuleInfosResponse> {
  args: {
    iterLimit?: number;
    lastModuleName?: string;
  };
}
export function useManagerModuleInfosQuery({
  client,
  args,
  options
}: ManagerModuleInfosQuery) {
  return useQuery<ModuleInfosResponse, Error, ModuleInfosResponse, (string | undefined)[]>(["managerModuleInfos", client?.contractAddress, JSON.stringify(args)], () => client ? client.moduleInfos({
    iterLimit: args.iterLimit,
    lastModuleName: args.lastModuleName
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ManagerModuleAddressesQuery extends ManagerReactQuery<ModuleAddressesResponse> {
  args: {
    names: string[];
  };
}
export function useManagerModuleAddressesQuery({
  client,
  args,
  options
}: ManagerModuleAddressesQuery) {
  return useQuery<ModuleAddressesResponse, Error, ModuleAddressesResponse, (string | undefined)[]>(["managerModuleAddresses", client?.contractAddress, JSON.stringify(args)], () => client ? client.moduleAddresses({
    names: args.names
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ManagerModuleVersionsQuery extends ManagerReactQuery<ModuleVersionsResponse> {
  args: {
    names: string[];
  };
}
export function useManagerModuleVersionsQuery({
  client,
  args,
  options
}: ManagerModuleVersionsQuery) {
  return useQuery<ModuleVersionsResponse, Error, ModuleVersionsResponse, (string | undefined)[]>(["managerModuleVersions", client?.contractAddress, JSON.stringify(args)], () => client ? client.moduleVersions({
    names: args.names
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ManagerUpdateInfoMutation {
  client: ManagerClient;
  msg: {
    description?: string;
    link?: string;
    name?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerUpdateInfoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerUpdateInfoMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerUpdateInfoMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateInfo(msg, fee, memo, funds), options);
}
export interface ManagerSuspendOsMutation {
  client: ManagerClient;
  msg: {
    newStatus: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerSuspendOsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerSuspendOsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerSuspendOsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.suspendOs(msg, fee, memo, funds), options);
}
export interface ManagerUpgradeMutation {
  client: ManagerClient;
  msg: {
    migrateMsg?: Binary;
    module: Module;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerUpgradeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerUpgradeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerUpgradeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.upgrade(msg, fee, memo, funds), options);
}
export interface ManagerUpdateConfigMutation {
  client: ManagerClient;
  msg: {
    root?: string;
    vcAddr?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface ManagerExecOnModuleMutation {
  client: ManagerClient;
  msg: {
    execMsg: Binary;
    moduleName: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerExecOnModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerExecOnModuleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerExecOnModuleMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.execOnModule(msg, fee, memo, funds), options);
}
export interface ManagerRemoveModuleMutation {
  client: ManagerClient;
  msg: {
    moduleName: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerRemoveModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerRemoveModuleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerRemoveModuleMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeModule(msg, fee, memo, funds), options);
}
export interface ManagerRegisterModuleMutation {
  client: ManagerClient;
  msg: {
    module: Module;
    moduleAddr: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerRegisterModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerRegisterModuleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerRegisterModuleMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.registerModule(msg, fee, memo, funds), options);
}
export interface ManagerCreateModuleMutation {
  client: ManagerClient;
  msg: {
    initMsg?: Binary;
    module: Module;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerCreateModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerCreateModuleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerCreateModuleMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createModule(msg, fee, memo, funds), options);
}
export interface ManagerSetAdminMutation {
  client: ManagerClient;
  msg: {
    admin: string;
    governanceType?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useManagerSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerSetAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ManagerSetAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setAdmin(msg, fee, memo, funds), options);
}
