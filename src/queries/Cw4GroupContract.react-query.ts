/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.5.8.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import { useQuery, UseQueryOptions, useMutation, UseMutationOptions } from '@tanstack/react-query'
import {
  AdminResponse,
  ExecuteMsg,
  Member,
  HooksResponse,
  InstantiateMsg,
  ListMembersResponse,
  MemberListResponse,
  MemberResponse,
  QueryMsg,
  TotalWeightResponse,
} from '../contracts/Cw4GroupContract'
import { Cw4GroupQueryClient, Cw4GroupClient } from '../contracts/Cw4GroupContract'
export interface Cw4GroupHooksQuery {
  client?: Cw4GroupQueryClient
  options?: Omit<
    UseQueryOptions<HooksResponse | undefined, Error, HooksResponse, (string | undefined)[]>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export function useCw4GroupHooksQuery({ client, options }: Cw4GroupHooksQuery) {
  return useQuery<HooksResponse | undefined, Error, HooksResponse, (string | undefined)[]>(
    ['cw4GroupHooks', client?.contractAddress],
    () => (client ? client.hooks() : undefined),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupMemberQuery {
  client?: Cw4GroupQueryClient
  options?: Omit<
    UseQueryOptions<MemberResponse | undefined, Error, MemberResponse, (string | undefined)[]>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
  args: {
    addr: string
    atHeight?: number
  }
}
export function useCw4GroupMemberQuery({ client, args, options }: Cw4GroupMemberQuery) {
  return useQuery<MemberResponse | undefined, Error, MemberResponse, (string | undefined)[]>(
    ['cw4GroupMember', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.member({
            addr: args.addr,
            atHeight: args.atHeight,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupListMembersQuery {
  client?: Cw4GroupQueryClient
  options?: Omit<
    UseQueryOptions<
      ListMembersResponse | undefined,
      Error,
      ListMembersResponse,
      (string | undefined)[]
    >,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useCw4GroupListMembersQuery({ client, args, options }: Cw4GroupListMembersQuery) {
  return useQuery<
    ListMembersResponse | undefined,
    Error,
    ListMembersResponse,
    (string | undefined)[]
  >(
    ['cw4GroupListMembers', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.listMembers({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupTotalWeightQuery {
  client?: Cw4GroupQueryClient
  options?: Omit<
    UseQueryOptions<
      TotalWeightResponse | undefined,
      Error,
      TotalWeightResponse,
      (string | undefined)[]
    >,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export function useCw4GroupTotalWeightQuery({ client, options }: Cw4GroupTotalWeightQuery) {
  return useQuery<
    TotalWeightResponse | undefined,
    Error,
    TotalWeightResponse,
    (string | undefined)[]
  >(
    ['cw4GroupTotalWeight', client?.contractAddress],
    () => (client ? client.totalWeight() : undefined),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupAdminQuery {
  client?: Cw4GroupQueryClient
  options?: Omit<
    UseQueryOptions<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export function useCw4GroupAdminQuery({ client, options }: Cw4GroupAdminQuery) {
  return useQuery<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>(
    ['cw4GroupAdmin', client?.contractAddress],
    () => (client ? client.admin() : undefined),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupRemoveHookMutation {
  client: Cw4GroupClient
  msg: {
    addr: string
  }
  args: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw4GroupRemoveHookMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupRemoveHookMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw4GroupRemoveHookMutation>(
    ({ client, msg, args: { fee, memo, funds } }) => client.removeHook(msg, fee, memo, funds),
    options
  )
}
export interface Cw4GroupAddHookMutation {
  client: Cw4GroupClient
  msg: {
    addr: string
  }
  args: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw4GroupAddHookMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupAddHookMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw4GroupAddHookMutation>(
    ({ client, msg, args: { fee, memo, funds } }) => client.addHook(msg, fee, memo, funds),
    options
  )
}
export interface Cw4GroupUpdateMembersMutation {
  client: Cw4GroupClient
  msg: {
    add: Member[]
    remove: string[]
  }
  args: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw4GroupUpdateMembersMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateMembersMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, Cw4GroupUpdateMembersMutation>(
    ({ client, msg, args: { fee, memo, funds } }) => client.updateMembers(msg, fee, memo, funds),
    options
  )
}
export interface Cw4GroupUpdateAdminMutation {
  client: Cw4GroupClient
  msg: {
    admin?: string
  }
  args: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw4GroupUpdateAdminMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateAdminMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, Cw4GroupUpdateAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } }) => client.updateAdmin(msg, fee, memo, funds),
    options
  )
}
