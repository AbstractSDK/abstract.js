/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.5.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { useQuery, UseQueryOptions, UseMutationOptions, useMutation } from "@tanstack/react-query";
import { AdminResponse, ExecuteMsg, Member, HooksResponse, InstantiateMsg, ListMembersResponse, MemberListResponse, MemberResponse, QueryMsg, TotalWeightResponse } from "../contracts/Cw4GroupContract";
import { Cw4GroupQueryClient, Cw4GroupClient } from "../contracts/Cw4GroupContract";
export interface Cw4GroupHooksQuery {
  client?: Cw4GroupQueryClient;
  options?: Omit<UseQueryOptions<HooksResponse | undefined, Error, HooksResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw4GroupHooksQuery({
  client,
  options
}: Cw4GroupHooksQuery) {
  return useQuery<HooksResponse | undefined, Error, HooksResponse, (string | undefined)[]>(["cw4GroupHooks", client?.contractAddress], () => client ? client.hooks() : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw4GroupMemberQuery {
  client?: Cw4GroupQueryClient;
  options?: Omit<UseQueryOptions<MemberResponse | undefined, Error, MemberResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    addr: string;
    atHeight?: number;
  };
}
export function useCw4GroupMemberQuery({
  client,
  args,
  options
}: Cw4GroupMemberQuery) {
  return useQuery<MemberResponse | undefined, Error, MemberResponse, (string | undefined)[]>(["cw4GroupMember", client?.contractAddress, JSON.stringify(args)], () => client ? client.member({
    addr: args.addr,
    atHeight: args.atHeight
  }) : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw4GroupListMembersQuery {
  client?: Cw4GroupQueryClient;
  options?: Omit<UseQueryOptions<ListMembersResponse | undefined, Error, ListMembersResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw4GroupListMembersQuery({
  client,
  args,
  options
}: Cw4GroupListMembersQuery) {
  return useQuery<ListMembersResponse | undefined, Error, ListMembersResponse, (string | undefined)[]>(["cw4GroupListMembers", client?.contractAddress, JSON.stringify(args)], () => client ? client.listMembers({
    limit: args.limit,
    startAfter: args.startAfter
  }) : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw4GroupTotalWeightQuery {
  client?: Cw4GroupQueryClient;
  options?: Omit<UseQueryOptions<TotalWeightResponse | undefined, Error, TotalWeightResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw4GroupTotalWeightQuery({
  client,
  options
}: Cw4GroupTotalWeightQuery) {
  return useQuery<TotalWeightResponse | undefined, Error, TotalWeightResponse, (string | undefined)[]>(["cw4GroupTotalWeight", client?.contractAddress], () => client ? client.totalWeight() : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw4GroupAdminQuery {
  client?: Cw4GroupQueryClient;
  options?: Omit<UseQueryOptions<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export function useCw4GroupAdminQuery({
  client,
  options
}: Cw4GroupAdminQuery) {
  return useQuery<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>(["cw4GroupAdmin", client?.contractAddress], () => client ? client.admin() : undefined, { ...options,
    enabled: !!client && options?.enabled
  });
}
export interface Cw4GroupRemoveHookMutation {
  client: Cw4GroupClient;
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Pick<Cw4GroupRemoveHookMutation, "args">>, "mutationFn">;
  args: {
    addr: string;
  };
}
export function useCw4GroupRemoveHookMutation({
  client,
  options
}: Omit<Cw4GroupRemoveHookMutation, "args">) {
  return useMutation<ExecuteResult, Error, Pick<Cw4GroupRemoveHookMutation, "args">>(({
    args
  }) => client.removeHook(args), options);
}
export interface Cw4GroupAddHookMutation {
  client: Cw4GroupClient;
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Pick<Cw4GroupAddHookMutation, "args">>, "mutationFn">;
  args: {
    addr: string;
  };
}
export function useCw4GroupAddHookMutation({
  client,
  options
}: Omit<Cw4GroupAddHookMutation, "args">) {
  return useMutation<ExecuteResult, Error, Pick<Cw4GroupAddHookMutation, "args">>(({
    args
  }) => client.addHook(args), options);
}
export interface Cw4GroupUpdateMembersMutation {
  client: Cw4GroupClient;
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Pick<Cw4GroupUpdateMembersMutation, "args">>, "mutationFn">;
  args: {
    add: Member[];
    remove: string[];
  };
}
export function useCw4GroupUpdateMembersMutation({
  client,
  options
}: Omit<Cw4GroupUpdateMembersMutation, "args">) {
  return useMutation<ExecuteResult, Error, Pick<Cw4GroupUpdateMembersMutation, "args">>(({
    args
  }) => client.updateMembers(args), options);
}
export interface Cw4GroupUpdateAdminMutation {
  client: Cw4GroupClient;
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Pick<Cw4GroupUpdateAdminMutation, "args">>, "mutationFn">;
  args: {
    admin?: string;
  };
}
export function useCw4GroupUpdateAdminMutation({
  client,
  options
}: Omit<Cw4GroupUpdateAdminMutation, "args">) {
  return useMutation<ExecuteResult, Error, Pick<Cw4GroupUpdateAdminMutation, "args">>(({
    args
  }) => client.updateAdmin(args), options);
}
