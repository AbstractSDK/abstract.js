/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.6.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import { useQuery, UseQueryOptions, useMutation, UseMutationOptions } from '@tanstack/react-query'
import {
  AdminResponse,
  AllowedResponse,
  Amount,
  Uint128,
  ChannelResponse,
  Coin,
  Cw20Coin,
  ChannelInfo,
  IbcEndpoint,
  ConfigResponse,
  ExecuteMsg,
  Binary,
  Cw20ReceiveMsg,
  TransferMsg,
  AllowMsg,
  InitMsg,
  ListAllowedResponse,
  AllowedInfo,
  ListChannelsResponse,
  PortResponse,
  QueryMsg,
} from './Cw20Ics.types'
import { Cw20IcsQueryClient, Cw20IcsClient } from './Cw20Ics.client'
export interface Cw20IcsReactQuery<TResponse> {
  client: Cw20IcsQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse | undefined, Error, TResponse, (string | undefined)[]>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface Cw20IcsListAllowedQuery extends Cw20IcsReactQuery<ListAllowedResponse> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useCw20IcsListAllowedQuery({ client, args, options }: Cw20IcsListAllowedQuery) {
  return useQuery<
    ListAllowedResponse | undefined,
    Error,
    ListAllowedResponse,
    (string | undefined)[]
  >(
    ['cw20IcsListAllowed', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.listAllowed({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw20IcsAllowedQuery extends Cw20IcsReactQuery<AllowedResponse> {
  args: {
    contract: string
  }
}
export function useCw20IcsAllowedQuery({ client, args, options }: Cw20IcsAllowedQuery) {
  return useQuery<AllowedResponse | undefined, Error, AllowedResponse, (string | undefined)[]>(
    ['cw20IcsAllowed', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.allowed({
            contract: args.contract,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw20IcsAdminQuery extends Cw20IcsReactQuery<AdminResponse> {}
export function useCw20IcsAdminQuery({ client, options }: Cw20IcsAdminQuery) {
  return useQuery<AdminResponse | undefined, Error, AdminResponse, (string | undefined)[]>(
    ['cw20IcsAdmin', client?.contractAddress],
    () => (client ? client.admin() : undefined),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw20IcsConfigQuery extends Cw20IcsReactQuery<ConfigResponse> {}
export function useCw20IcsConfigQuery({ client, options }: Cw20IcsConfigQuery) {
  return useQuery<ConfigResponse | undefined, Error, ConfigResponse, (string | undefined)[]>(
    ['cw20IcsConfig', client?.contractAddress],
    () => (client ? client.config() : undefined),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw20IcsChannelQuery extends Cw20IcsReactQuery<ChannelResponse> {
  args: {
    id: string
  }
}
export function useCw20IcsChannelQuery({ client, args, options }: Cw20IcsChannelQuery) {
  return useQuery<ChannelResponse | undefined, Error, ChannelResponse, (string | undefined)[]>(
    ['cw20IcsChannel', client?.contractAddress, JSON.stringify(args)],
    () =>
      client
        ? client.channel({
            id: args.id,
          })
        : undefined,
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw20IcsListChannelsQuery extends Cw20IcsReactQuery<ListChannelsResponse> {}
export function useCw20IcsListChannelsQuery({ client, options }: Cw20IcsListChannelsQuery) {
  return useQuery<
    ListChannelsResponse | undefined,
    Error,
    ListChannelsResponse,
    (string | undefined)[]
  >(
    ['cw20IcsListChannels', client?.contractAddress],
    () => (client ? client.listChannels() : undefined),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw20IcsPortQuery extends Cw20IcsReactQuery<PortResponse> {}
export function useCw20IcsPortQuery({ client, options }: Cw20IcsPortQuery) {
  return useQuery<PortResponse | undefined, Error, PortResponse, (string | undefined)[]>(
    ['cw20IcsPort', client?.contractAddress],
    () => (client ? client.port() : undefined),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw20IcsUpdateAdminMutation {
  client: Cw20IcsClient
  msg: {
    admin: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw20IcsUpdateAdminMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsUpdateAdminMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw20IcsUpdateAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAdmin(msg, fee, memo, funds),
    options
  )
}
export interface Cw20IcsAllowMutation {
  client: Cw20IcsClient
  msg: {
    contract: string
    gasLimit?: number
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw20IcsAllowMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsAllowMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw20IcsAllowMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.allow(msg, fee, memo, funds),
    options
  )
}
export interface Cw20IcsTransferMutation {
  client: Cw20IcsClient
  msg: {
    channel: string
    remoteAddress: string
    timeout?: number
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw20IcsTransferMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsTransferMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw20IcsTransferMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.transfer(msg, fee, memo, funds),
    options
  )
}
export interface Cw20IcsReceiveMutation {
  client: Cw20IcsClient
  msg: {
    amount: string
    msg: string
    sender: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: readonly Coin[]
  }
}
export function useCw20IcsReceiveMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20IcsReceiveMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw20IcsReceiveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.receive(msg, fee, memo, funds),
    options
  )
}
