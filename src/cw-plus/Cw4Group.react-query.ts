/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  AdminResponse,
  ExecuteMsg,
  Member,
  HooksResponse,
  InstantiateMsg,
  ListMembersResponse,
  MemberListResponse,
  MemberResponse,
  QueryMsg,
  TotalWeightResponse,
} from './Cw4Group.types'
import { Cw4GroupQueryClient, Cw4GroupClient } from './Cw4Group.client'
export const cw4GroupQueryKeys = {
  contract: [
    {
      contract: 'cw4Group',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...cw4GroupQueryKeys.contract[0], address: contractAddress }] as const,
  admin: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw4GroupQueryKeys.address(contractAddress)[0], method: 'admin', args }] as const,
  totalWeight: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw4GroupQueryKeys.address(contractAddress)[0], method: 'total_weight', args }] as const,
  listMembers: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw4GroupQueryKeys.address(contractAddress)[0], method: 'list_members', args }] as const,
  member: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw4GroupQueryKeys.address(contractAddress)[0], method: 'member', args }] as const,
  hooks: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...cw4GroupQueryKeys.address(contractAddress)[0], method: 'hooks', args }] as const,
}
export interface Cw4GroupReactQuery<TResponse, TData = TResponse> {
  client: Cw4GroupQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface Cw4GroupHooksQuery<TData> extends Cw4GroupReactQuery<HooksResponse, TData> {}
export function useCw4GroupHooksQuery<TData = HooksResponse>({
  client,
  options,
}: Cw4GroupHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(
    cw4GroupQueryKeys.hooks(client?.contractAddress),
    () => (client ? client.hooks() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupMemberQuery<TData> extends Cw4GroupReactQuery<MemberResponse, TData> {
  args: {
    addr: string
    atHeight?: number
  }
}
export function useCw4GroupMemberQuery<TData = MemberResponse>({
  client,
  args,
  options,
}: Cw4GroupMemberQuery<TData>) {
  return useQuery<MemberResponse, Error, TData>(
    cw4GroupQueryKeys.member(client?.contractAddress, args),
    () =>
      client
        ? client.member({
            addr: args.addr,
            atHeight: args.atHeight,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupListMembersQuery<TData>
  extends Cw4GroupReactQuery<ListMembersResponse, TData> {
  args: {
    limit?: number
    startAfter?: string
  }
}
export function useCw4GroupListMembersQuery<TData = ListMembersResponse>({
  client,
  args,
  options,
}: Cw4GroupListMembersQuery<TData>) {
  return useQuery<ListMembersResponse, Error, TData>(
    cw4GroupQueryKeys.listMembers(client?.contractAddress, args),
    () =>
      client
        ? client.listMembers({
            limit: args.limit,
            startAfter: args.startAfter,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupTotalWeightQuery<TData>
  extends Cw4GroupReactQuery<TotalWeightResponse, TData> {}
export function useCw4GroupTotalWeightQuery<TData = TotalWeightResponse>({
  client,
  options,
}: Cw4GroupTotalWeightQuery<TData>) {
  return useQuery<TotalWeightResponse, Error, TData>(
    cw4GroupQueryKeys.totalWeight(client?.contractAddress),
    () => (client ? client.totalWeight() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupAdminQuery<TData> extends Cw4GroupReactQuery<AdminResponse, TData> {}
export function useCw4GroupAdminQuery<TData = AdminResponse>({
  client,
  options,
}: Cw4GroupAdminQuery<TData>) {
  return useQuery<AdminResponse, Error, TData>(
    cw4GroupQueryKeys.admin(client?.contractAddress),
    () => (client ? client.admin() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface Cw4GroupRemoveHookMutation {
  client: Cw4GroupClient
  msg: {
    addr: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useCw4GroupRemoveHookMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupRemoveHookMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw4GroupRemoveHookMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.removeHook(msg, fee, memo, funds),
    options
  )
}
export interface Cw4GroupAddHookMutation {
  client: Cw4GroupClient
  msg: {
    addr: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useCw4GroupAddHookMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw4GroupAddHookMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, Cw4GroupAddHookMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.addHook(msg, fee, memo, funds),
    options
  )
}
export interface Cw4GroupUpdateMembersMutation {
  client: Cw4GroupClient
  msg: {
    add: Member[]
    remove: string[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useCw4GroupUpdateMembersMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateMembersMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, Cw4GroupUpdateMembersMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateMembers(msg, fee, memo, funds),
    options
  )
}
export interface Cw4GroupUpdateAdminMutation {
  client: Cw4GroupClient
  msg: {
    admin?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useCw4GroupUpdateAdminMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, Cw4GroupUpdateAdminMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, Cw4GroupUpdateAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateAdmin(msg, fee, memo, funds),
    options
  )
}
