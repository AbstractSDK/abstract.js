/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Addr,
  ConfigResponse,
  ExecuteMsg,
  RequestMsg,
  AssetEntry,
  Uint128,
  Decimal,
  ApiRequestMsgForRequestMsg,
  QueryMsg,
  TradersResponse,
} from './Dex.types'
import { DexQueryClient, DexClient } from './Dex.client'
export const dexQueryKeys = {
  contract: [
    {
      contract: 'dex',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...dexQueryKeys.contract[0], address: contractAddress }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...dexQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  traders: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...dexQueryKeys.address(contractAddress)[0], method: 'traders', args }] as const,
}
export interface DexReactQuery<TResponse, TData = TResponse> {
  client: DexQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface DexTradersQuery<TData> extends DexReactQuery<TradersResponse, TData> {
  args: {
    proxyAddress: string
  }
}
export function useDexTradersQuery<TData = TradersResponse>({
  client,
  args,
  options,
}: DexTradersQuery<TData>) {
  return useQuery<TradersResponse, Error, TData>(
    dexQueryKeys.traders(client?.contractAddress, args),
    () =>
      client
        ? client.traders({
            proxyAddress: args.proxyAddress,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface DexConfigQuery<TData> extends DexReactQuery<ConfigResponse, TData> {}
export function useDexConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: DexConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    dexQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface DexRequestMutation {
  client: DexClient
  msg: ApiRequestMsgForRequestMsg
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useDexRequestMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, DexRequestMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, DexRequestMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.request(msg, fee, memo, funds),
    options
  )
}
