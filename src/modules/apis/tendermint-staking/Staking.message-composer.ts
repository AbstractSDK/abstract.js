/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Addr, ConfigResponse, ExecuteMsg, BaseExecuteMsg, RequestMsg, Uint128, StdAck, Binary, ExtensionRequestMsgForRequestMsg, IbcResponseMsg, Empty, InstantiateMsg, BaseInstantiateMsg, QueryMsg, BaseQueryMsg, TradersResponse } from "./Staking.types";
export interface StakingMessage {
  contractAddress: string;
  sender: string;
  base: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
  app: ({
    proxyAddress,
    request
  }: {
    proxyAddress?: string;
    request: RequestMsg;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  ibcCallback: ({
    id,
    msg
  }: {
    id: string;
    msg: StdAck;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  receive: (funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class StakingMessageComposer implements StakingMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.base = this.base.bind(this);
    this.app = this.app.bind(this);
    this.ibcCallback = this.ibcCallback.bind(this);
    this.receive = this.receive.bind(this);
  }

  base = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          base: {}
        })),
        funds
      })
    };
  };
  app = ({
    proxyAddress,
    request
  }: {
    proxyAddress?: string;
    request: RequestMsg;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          app: {
            proxy_address: proxyAddress,
            request
          }
        })),
        funds
      })
    };
  };
  ibcCallback = ({
    id,
    msg
  }: {
    id: string;
    msg: StdAck;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          ibc_callback: {
            id,
            msg
          }
        })),
        funds
      })
    };
  };
  receive = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          receive: {}
        })),
        funds
      })
    };
  };
}