/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Addr, ConfigResponse, ExecuteMsg, RequestMsg, AssetEntry, Uint128, Decimal, BaseExecuteMsg, ApiRequestMsgForRequestMsg, QueryMsg, BaseQueryMsg, Empty, TradersResponse } from "./Dex.types";
export interface DexReadOnlyInterface {
  contractAddress: string;
  api: () => Promise<ApiResponse>;
  base: () => Promise<BaseResponse>;
}
export class DexQueryClient implements DexReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.api = this.api.bind(this);
    this.base = this.base.bind(this);
  }

  api = async (): Promise<ApiResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      api: {}
    });
  };
  base = async (): Promise<BaseResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      base: {}
    });
  };
}
export interface DexInterface extends DexReadOnlyInterface {
  contractAddress: string;
  sender: string;
  request: ({
    proxyAddress,
    request
  }: {
    proxyAddress?: string;
    request: RequestMsg;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  configure: (fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class DexClient extends DexQueryClient implements DexInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.request = this.request.bind(this);
    this.configure = this.configure.bind(this);
  }

  request = async ({
    proxyAddress,
    request
  }: {
    proxyAddress?: string;
    request: RequestMsg;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      request: {
        proxy_address: proxyAddress,
        request
      }
    }, fee, memo, funds);
  };
  configure = async (fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      configure: {}
    }, fee, memo, funds);
  };
}