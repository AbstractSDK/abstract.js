/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, ConfigResponse, ExecuteMsg, RequestMsg, AssetEntry, Uint128, Decimal, BaseExecuteMsg, ApiRequestMsgForRequestMsg, QueryMsg, BaseQueryMsg, Empty, TradersResponse } from "./Dex.types";
import { DexQueryClient, DexClient } from "./Dex.client";
export const dexQueryKeys = {
  contract: ([{
    contract: "dex"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...dexQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  api: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...dexQueryKeys.address(contractAddress)[0],
    method: "api",
    args
  }] as const),
  base: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...dexQueryKeys.address(contractAddress)[0],
    method: "base",
    args
  }] as const)
};
export interface DexReactQuery<TResponse, TData = TResponse> {
  client: DexQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DexBaseQuery<TData> extends DexReactQuery<BaseResponse, TData> {}
export function useDexBaseQuery<TData = BaseResponse>({
  client,
  options
}: DexBaseQuery<TData>) {
  return useQuery<BaseResponse, Error, TData>(dexQueryKeys.base(client?.contractAddress), () => client ? client.base() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DexApiQuery<TData> extends DexReactQuery<ApiResponse, TData> {}
export function useDexApiQuery<TData = ApiResponse>({
  client,
  options
}: DexApiQuery<TData>) {
  return useQuery<ApiResponse, Error, TData>(dexQueryKeys.api(client?.contractAddress), () => client ? client.api() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DexConfigureMutation {
  client: DexClient;
  msg: BaseExecuteMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDexConfigureMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DexConfigureMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DexConfigureMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.configure(msg, fee, memo, funds), options);
}
export interface DexRequestMutation {
  client: DexClient;
  msg: ApiRequestMsgForRequestMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDexRequestMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DexRequestMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DexRequestMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.request(msg, fee, memo, funds), options);
}