/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import {
  Addr,
  ConfigResponse,
  ExecuteMsg,
  RequestMsg,
  AssetEntry,
  Uint128,
  Decimal,
  ApiRequestMsgForRequestMsg,
  QueryMsg,
  TradersResponse,
} from './Dex.types'
export interface DexReadOnlyInterface {
  contractAddress: string
  config: () => Promise<ConfigResponse>
  traders: ({ proxyAddress }: { proxyAddress: string }) => Promise<TradersResponse>
}
export class DexQueryClient implements DexReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.config = this.config.bind(this)
    this.traders = this.traders.bind(this)
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  traders = async ({ proxyAddress }: { proxyAddress: string }): Promise<TradersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      traders: {
        proxy_address: proxyAddress,
      },
    })
  }
}
export interface DexInterface extends DexReadOnlyInterface {
  contractAddress: string
  sender: string
  request: (
    {
      proxyAddress,
      request,
    }: {
      proxyAddress?: string
      request: RequestMsg
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class DexClient extends DexQueryClient implements DexInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.request = this.request.bind(this)
  }

  request = async (
    {
      proxyAddress,
      request,
    }: {
      proxyAddress?: string
      request: RequestMsg
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        Request: {
          proxy_address: proxyAddress,
          request,
        },
      },
      fee,
      memo,
      funds
    )
  }
}
