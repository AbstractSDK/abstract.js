/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from '@cosmjs/amino'
import { MsgExecuteContractEncodeObject } from 'cosmwasm'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  Addr,
  AddOnState,
  Memory,
  AssetInfoBaseForAddr,
  AssetInfoBaseForString,
  BaseResponse,
  Decimal,
  Uint128,
  EmissionType,
  ConfigResponse,
  ContributionConfig,
  SubscriptionConfig,
  Uint64,
  ContributorStateResponse,
  Compensation,
  ExecuteMsg,
  AddOnExecuteMsg,
  Binary,
  Cw20ReceiveMsg,
  FeeResponse,
  AssetBaseForAddr,
  UncheckedEmissionType,
  InstantiateMsg,
  AddOnInstantiateMsg,
  ContributionInstantiateMsg,
  SubscriptionInstantiateMsg,
  QueryMsg,
  AddOnQueryMsg,
  StateResponse,
  ContributionState,
  SubscriptionState,
  SubscriberStateResponse,
  Subscriber,
} from './Subscription.types'
export interface SubscriptionMessage {
  contractAddress: string
  sender: string
  base: (funds?: Coin[]) => MsgExecuteContractEncodeObject
  receive: (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128
      msg: Binary
      sender: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  pay: (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  unsubscribe: (
    {
      osIds,
    }: {
      osIds: number[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  claimCompensation: (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  claimEmissions: (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateContributor: (
    {
      basePerBlock,
      contributorOsId,
      expirationBlock,
      weight,
    }: {
      basePerBlock?: Decimal
      contributorOsId: number
      expirationBlock?: Uint64
      weight?: Uint64
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  removeContributor: (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateSubscriptionConfig: (
    {
      factoryAddress,
      paymentAsset,
      subscriptionCost,
      versionControlAddress,
    }: {
      factoryAddress?: string
      paymentAsset?: AssetInfoBaseForString
      subscriptionCost?: Decimal
      versionControlAddress?: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateContributionConfig: (
    {
      emissionUserShare,
      emissionsAmpFactor,
      emissionsOffset,
      maxEmissionsMultiple,
      projectTokenInfo,
      protocolIncomeShare,
    }: {
      emissionUserShare?: Decimal
      emissionsAmpFactor?: Uint128
      emissionsOffset?: Uint128
      maxEmissionsMultiple?: Decimal
      projectTokenInfo?: AssetInfoBaseForString
      protocolIncomeShare?: Decimal
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
}
export class SubscriptionMessageComposer implements SubscriptionMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.base = this.base.bind(this)
    this.receive = this.receive.bind(this)
    this.pay = this.pay.bind(this)
    this.unsubscribe = this.unsubscribe.bind(this)
    this.claimCompensation = this.claimCompensation.bind(this)
    this.claimEmissions = this.claimEmissions.bind(this)
    this.updateContributor = this.updateContributor.bind(this)
    this.removeContributor = this.removeContributor.bind(this)
    this.updateSubscriptionConfig = this.updateSubscriptionConfig.bind(this)
    this.updateContributionConfig = this.updateContributionConfig.bind(this)
  }

  base = (funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            base: {},
          })
        ),
        funds,
      }),
    }
  }
  receive = (
    {
      amount,
      msg,
      sender,
    }: {
      amount: Uint128
      msg: Binary
      sender: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            receive: {
              amount,
              msg,
              sender,
            },
          })
        ),
        funds,
      }),
    }
  }
  pay = (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            pay: {
              os_id: osId,
            },
          })
        ),
        funds,
      }),
    }
  }
  unsubscribe = (
    {
      osIds,
    }: {
      osIds: number[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            unsubscribe: {
              os_ids: osIds,
            },
          })
        ),
        funds,
      }),
    }
  }
  claimCompensation = (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            claim_compensation: {
              os_id: osId,
            },
          })
        ),
        funds,
      }),
    }
  }
  claimEmissions = (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            claim_emissions: {
              os_id: osId,
            },
          })
        ),
        funds,
      }),
    }
  }
  updateContributor = (
    {
      basePerBlock,
      contributorOsId,
      expirationBlock,
      weight,
    }: {
      basePerBlock?: Decimal
      contributorOsId: number
      expirationBlock?: Uint64
      weight?: Uint64
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_contributor: {
              base_per_block: basePerBlock,
              contributor_os_id: contributorOsId,
              expiration_block: expirationBlock,
              weight,
            },
          })
        ),
        funds,
      }),
    }
  }
  removeContributor = (
    {
      osId,
    }: {
      osId: number
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            remove_contributor: {
              os_id: osId,
            },
          })
        ),
        funds,
      }),
    }
  }
  updateSubscriptionConfig = (
    {
      factoryAddress,
      paymentAsset,
      subscriptionCost,
      versionControlAddress,
    }: {
      factoryAddress?: string
      paymentAsset?: AssetInfoBaseForString
      subscriptionCost?: Decimal
      versionControlAddress?: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_subscription_config: {
              factory_address: factoryAddress,
              payment_asset: paymentAsset,
              subscription_cost: subscriptionCost,
              version_control_address: versionControlAddress,
            },
          })
        ),
        funds,
      }),
    }
  }
  updateContributionConfig = (
    {
      emissionUserShare,
      emissionsAmpFactor,
      emissionsOffset,
      maxEmissionsMultiple,
      projectTokenInfo,
      protocolIncomeShare,
    }: {
      emissionUserShare?: Decimal
      emissionsAmpFactor?: Uint128
      emissionsOffset?: Uint128
      maxEmissionsMultiple?: Decimal
      projectTokenInfo?: AssetInfoBaseForString
      protocolIncomeShare?: Decimal
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_contribution_config: {
              emission_user_share: emissionUserShare,
              emissions_amp_factor: emissionsAmpFactor,
              emissions_offset: emissionsOffset,
              max_emissions_multiple: maxEmissionsMultiple,
              project_token_info: projectTokenInfo,
              protocol_income_share: protocolIncomeShare,
            },
          })
        ),
        funds,
      }),
    }
  }
}
