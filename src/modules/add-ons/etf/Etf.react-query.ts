/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  Addr,
  AddOnState,
  Memory,
  BaseResponse,
  ExecuteMsg,
  AddOnExecuteMsg,
  Uint128,
  Binary,
  AssetInfoBaseForString,
  Decimal,
  Cw20ReceiveMsg,
  AssetBaseForString,
  InstantiateMsg,
  AddOnInstantiateMsg,
  QueryMsg,
  AddOnQueryMsg,
  StateResponse,
} from './Etf.types'
import { EtfQueryClient, EtfClient } from './Etf.client'
export const etfQueryKeys = {
  contract: [
    {
      contract: 'etf',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...etfQueryKeys.contract[0], address: contractAddress }] as const,
  base: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...etfQueryKeys.address(contractAddress)[0], method: 'base', args }] as const,
  state: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...etfQueryKeys.address(contractAddress)[0], method: 'state', args }] as const,
}
export interface EtfReactQuery<TResponse, TData = TResponse> {
  client: EtfQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface EtfStateQuery<TData> extends EtfReactQuery<StateResponse, TData> {}
export function useEtfStateQuery<TData = StateResponse>({ client, options }: EtfStateQuery<TData>) {
  return useQuery<StateResponse, Error, TData>(
    etfQueryKeys.state(client?.contractAddress),
    () => (client ? client.state() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface EtfBaseQuery<TData> extends EtfReactQuery<BaseResponse, TData> {}
export function useEtfBaseQuery<TData = BaseResponse>({ client, options }: EtfBaseQuery<TData>) {
  return useQuery<BaseResponse, Error, TData>(
    etfQueryKeys.base(client?.contractAddress),
    () => (client ? client.queryBase() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface EtfSetFeeMutation {
  client: EtfClient
  msg: {
    fee: Decimal
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useEtfSetFeeMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfSetFeeMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, EtfSetFeeMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setFee(msg, fee, memo, funds),
    options
  )
}
export interface EtfImportMutation {
  client: EtfClient
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useEtfImportMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfImportMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, EtfImportMutation>(
    ({ client, args: { fee, memo, funds } = {} }) => client.import(fee, memo, funds),
    options
  )
}
export interface EtfUpdatePoolMutation {
  client: EtfClient
  msg: {
    assetsToAdd: string[]
    assetsToRemove: string[]
    depositAsset?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useEtfUpdatePoolMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfUpdatePoolMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, EtfUpdatePoolMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updatePool(msg, fee, memo, funds),
    options
  )
}
export interface EtfProvideLiquidityMutation {
  client: EtfClient
  msg: {
    asset: AssetBaseForString
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useEtfProvideLiquidityMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, EtfProvideLiquidityMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, EtfProvideLiquidityMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.provideLiquidity(msg, fee, memo, funds),
    options
  )
}
export interface EtfReceiveMutation {
  client: EtfClient
  msg: Cw20ReceiveMsg
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useEtfReceiveMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, EtfReceiveMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, EtfReceiveMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.receive(msg, fee, memo, funds),
    options
  )
}
