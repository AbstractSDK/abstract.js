/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { MsgExecuteContractEncodeObject } from 'cosmwasm'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  InstantiateMsg,
  ExecuteMsg,
  CosmosMsgForEmpty,
  BankMsg,
  Uint128,
  StakingMsg,
  DistributionMsg,
  WasmMsg,
  Binary,
  UncheckedValueRef,
  Decimal,
  Coin,
  Empty,
  UncheckedProxyAsset,
  QueryMsg,
  MigrateMsg,
  AssetEntry,
  ValueRef,
  AssetConfigResponse,
  ProxyAsset,
  ContractEntry,
  AssetsResponse,
  BaseAssetResponse,
  ValidityResponse,
  ConfigResponse,
  HoldingAmountResponse,
  HoldingValueResponse,
  TotalValueResponse,
} from './Proxy.types'
export interface ProxyMessage {
  contractAddress: string
  sender: string
  setAdmin: (
    {
      admin,
    }: {
      admin: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  moduleAction: (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  addModule: (
    {
      module,
    }: {
      module: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  removeModule: (
    {
      module,
    }: {
      module: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateAssets: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedProxyAsset[]
      toRemove: string[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
}
export class ProxyMessageComposer implements ProxyMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.setAdmin = this.setAdmin.bind(this)
    this.moduleAction = this.moduleAction.bind(this)
    this.addModule = this.addModule.bind(this)
    this.removeModule = this.removeModule.bind(this)
    this.updateAssets = this.updateAssets.bind(this)
  }

  setAdmin = (
    {
      admin,
    }: {
      admin: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            set_admin: {
              admin,
            },
          })
        ),
        funds,
      }),
    }
  }
  moduleAction = (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            module_action: {
              msgs,
            },
          })
        ),
        funds,
      }),
    }
  }
  addModule = (
    {
      module,
    }: {
      module: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            add_module: {
              module,
            },
          })
        ),
        funds,
      }),
    }
  }
  removeModule = (
    {
      module,
    }: {
      module: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            remove_module: {
              module,
            },
          })
        ),
        funds,
      }),
    }
  }
  updateAssets = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedProxyAsset[]
      toRemove: string[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_assets: {
              to_add: toAdd,
              to_remove: toRemove,
            },
          })
        ),
        funds,
      }),
    }
  }
}
