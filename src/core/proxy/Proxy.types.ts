/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type AssetInfoBaseForAddr = {
  native: string;
} | {
  cw20: Addr;
} | {
  cw1155: [Addr, string];
};
export type Addr = string;
export type AssetEntry = string;
export type ValueRef = {
  pool: {
    pair: ContractEntry;
    [k: string]: unknown;
  };
} | {
  liquidity_token: {
    [k: string]: unknown;
  };
} | {
  value_as: {
    asset: AssetEntry;
    multiplier: Decimal;
    [k: string]: unknown;
  };
} | {
  external: {
    api_name: string;
    [k: string]: unknown;
  };
};
export type Decimal = string;
export interface BaseAssetResponse {
  base_asset: ProxyAsset;
  [k: string]: unknown;
}
export interface ProxyAsset {
  asset: AssetEntry;
  value_reference?: ValueRef | null;
  [k: string]: unknown;
}
export interface ContractEntry {
  contract: string;
  protocol: string;
  [k: string]: unknown;
}
export interface CheckValidityResponse {
  missing_dependencies?: AssetEntry[] | null;
  unresolvable_assets?: AssetEntry[] | null;
  [k: string]: unknown;
}
export interface ConfigResponse {
  modules: string[];
  [k: string]: unknown;
}
export type CosmosMsgForEmpty = {
  bank: BankMsg;
} | {
  custom: Empty;
} | {
  staking: StakingMsg;
} | {
  distribution: DistributionMsg;
} | {
  wasm: WasmMsg;
};
export type BankMsg = {
  send: {
    amount: Coin[];
    to_address: string;
    [k: string]: unknown;
  };
} | {
  burn: {
    amount: Coin[];
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export type StakingMsg = {
  delegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  undelegate: {
    amount: Coin;
    validator: string;
    [k: string]: unknown;
  };
} | {
  redelegate: {
    amount: Coin;
    dst_validator: string;
    src_validator: string;
    [k: string]: unknown;
  };
};
export type DistributionMsg = {
  set_withdraw_address: {
    address: string;
    [k: string]: unknown;
  };
} | {
  withdraw_delegator_reward: {
    validator: string;
    [k: string]: unknown;
  };
};
export type WasmMsg = {
  execute: {
    contract_addr: string;
    funds: Coin[];
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  instantiate: {
    admin?: string | null;
    code_id: number;
    funds: Coin[];
    label: string;
    msg: Binary;
    [k: string]: unknown;
  };
} | {
  migrate: {
    contract_addr: string;
    msg: Binary;
    new_code_id: number;
    [k: string]: unknown;
  };
} | {
  update_admin: {
    admin: string;
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  clear_admin: {
    contract_addr: string;
    [k: string]: unknown;
  };
};
export type Binary = string;
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface Empty {
  [k: string]: unknown;
}
export type ExecuteMsg = {
  set_admin: {
    admin: string;
    [k: string]: unknown;
  };
} | {
  module_action: {
    msgs: CosmosMsgForEmpty[];
    [k: string]: unknown;
  };
} | {
  add_module: {
    module: string;
    [k: string]: unknown;
  };
} | {
  remove_module: {
    module: string;
    [k: string]: unknown;
  };
} | {
  update_assets: {
    to_add: UncheckedProxyAsset[];
    to_remove: string[];
    [k: string]: unknown;
  };
};
export type UncheckedValueRef = {
  pool: {
    exchange: string;
    pair: string;
    [k: string]: unknown;
  };
} | {
  liquidity_token: {
    [k: string]: unknown;
  };
} | {
  value_as: {
    asset: string;
    multiplier: Decimal;
    [k: string]: unknown;
  };
} | {
  external: {
    api_name: string;
    [k: string]: unknown;
  };
};
export interface UncheckedProxyAsset {
  asset: string;
  value_reference?: UncheckedValueRef | null;
  [k: string]: unknown;
}
export interface HoldingAmountResponse {
  amount: Uint128;
  [k: string]: unknown;
}
export interface HoldingValueResponse {
  value: Uint128;
  [k: string]: unknown;
}
export interface InstantiateMsg {
  memory_address: string;
  os_id: number;
  [k: string]: unknown;
}
export interface ProxyAssetConfigResponse {
  proxy_asset: ProxyAsset;
  [k: string]: unknown;
}
export interface ProxyAssetsResponse {
  assets: [AssetEntry, ProxyAsset][];
  [k: string]: unknown;
}
export type QueryMsg = {
  config: {
    [k: string]: unknown;
  };
} | {
  total_value: {
    [k: string]: unknown;
  };
} | {
  holding_value: {
    identifier: string;
    [k: string]: unknown;
  };
} | {
  holding_amount: {
    identifier: string;
    [k: string]: unknown;
  };
} | {
  asset_config: {
    identifier: string;
    [k: string]: unknown;
  };
} | {
  assets: {
    page_size?: number | null;
    page_token?: string | null;
    [k: string]: unknown;
  };
} | {
  check_validity: {
    [k: string]: unknown;
  };
} | {
  base_asset: {
    [k: string]: unknown;
  };
};
export interface State {
  modules: Addr[];
  [k: string]: unknown;
}
export interface TotalValueResponse {
  value: Uint128;
  [k: string]: unknown;
}