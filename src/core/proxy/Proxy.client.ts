/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee } from '@cosmjs/amino'
import {
  AssetInfoBaseForAddr,
  Addr,
  AssetEntry,
  CheckValidityResponse,
  ConfigResponse,
  CosmosMsgForEmpty,
  BankMsg,
  Uint128,
  StakingMsg,
  DistributionMsg,
  WasmMsg,
  Binary,
  Coin,
  Empty,
  ExecuteMsg,
  UncheckedValueRef,
  Decimal,
  UncheckedProxyAsset,
  HoldingAmountResponse,
  HoldingValueResponse,
  InstantiateMsg,
  ValueRef,
  ProxyAssetConfigResponse,
  ProxyAsset,
  ContractEntry,
  ProxyAssetsResponse,
  QueryMsg,
  State,
  TotalValueResponse,
} from './Proxy.types'
export interface ProxyReadOnlyInterface {
  contractAddress: string
  config: () => Promise<ConfigResponse>
  totalValue: () => Promise<TotalValueResponse>
  holdingValue: ({ identifier }: { identifier: string }) => Promise<HoldingValueResponse>
  holdingAmount: ({ identifier }: { identifier: string }) => Promise<HoldingAmountResponse>
  proxyAssetConfig: ({ identifier }: { identifier: string }) => Promise<ProxyAssetConfigResponse>
  proxyAssets: ({
    iterLimit,
    lastAssetName,
  }: {
    iterLimit?: number
    lastAssetName?: string
  }) => Promise<ProxyAssetsResponse>
  checkValidity: () => Promise<CheckValidityResponse>
}
export class ProxyQueryClient implements ProxyReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.config = this.config.bind(this)
    this.totalValue = this.totalValue.bind(this)
    this.holdingValue = this.holdingValue.bind(this)
    this.holdingAmount = this.holdingAmount.bind(this)
    this.proxyAssetConfig = this.proxyAssetConfig.bind(this)
    this.proxyAssets = this.proxyAssets.bind(this)
    this.checkValidity = this.checkValidity.bind(this)
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  totalValue = async (): Promise<TotalValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_value: {},
    })
  }
  holdingValue = async ({ identifier }: { identifier: string }): Promise<HoldingValueResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      holding_value: {
        identifier,
      },
    })
  }
  holdingAmount = async ({
    identifier,
  }: {
    identifier: string
  }): Promise<HoldingAmountResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      holding_amount: {
        identifier,
      },
    })
  }
  proxyAssetConfig = async ({
    identifier,
  }: {
    identifier: string
  }): Promise<ProxyAssetConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proxy_asset_config: {
        identifier,
      },
    })
  }
  proxyAssets = async ({
    iterLimit,
    lastAssetName,
  }: {
    iterLimit?: number
    lastAssetName?: string
  }): Promise<ProxyAssetsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      proxy_assets: {
        iter_limit: iterLimit,
        last_asset_name: lastAssetName,
      },
    })
  }
  checkValidity = async (): Promise<CheckValidityResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      check_validity: {},
    })
  }
}
export interface ProxyInterface extends ProxyReadOnlyInterface {
  contractAddress: string
  sender: string
  setAdmin: (
    {
      admin,
    }: {
      admin: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  moduleAction: (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  addModule: (
    {
      module,
    }: {
      module: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  removeModule: (
    {
      module,
    }: {
      module: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateAssets: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedProxyAsset[]
      toRemove: string[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class ProxyClient extends ProxyQueryClient implements ProxyInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.setAdmin = this.setAdmin.bind(this)
    this.moduleAction = this.moduleAction.bind(this)
    this.addModule = this.addModule.bind(this)
    this.removeModule = this.removeModule.bind(this)
    this.updateAssets = this.updateAssets.bind(this)
  }

  setAdmin = async (
    {
      admin,
    }: {
      admin: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_admin: {
          admin,
        },
      },
      fee,
      memo,
      funds
    )
  }
  moduleAction = async (
    {
      msgs,
    }: {
      msgs: CosmosMsgForEmpty[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        module_action: {
          msgs,
        },
      },
      fee,
      memo,
      funds
    )
  }
  addModule = async (
    {
      module,
    }: {
      module: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_module: {
          module,
        },
      },
      fee,
      memo,
      funds
    )
  }
  removeModule = async (
    {
      module,
    }: {
      module: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_module: {
          module,
        },
      },
      fee,
      memo,
      funds
    )
  }
  updateAssets = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedProxyAsset[]
      toRemove: string[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_assets: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      funds
    )
  }
}
