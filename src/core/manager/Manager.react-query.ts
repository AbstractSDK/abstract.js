/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  Binary,
  ModuleVersion,
  ModuleReference,
  Addr,
  ModuleInfo,
  Module,
  QueryMsg,
  MigrateMsg,
  Uint64,
  ConfigResponse,
  InfoResponse,
  OsInfo,
  ModuleAddressesResponse,
  ModuleInfosResponse,
  ManagerModuleInfo,
  ContractVersion,
  ModuleVersionsResponse,
} from './Manager.types'
import { ManagerQueryClient, ManagerClient } from './Manager.client'
export const managerQueryKeys = {
  contract: [
    {
      contract: 'manager',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...managerQueryKeys.contract[0], address: contractAddress }] as const,
  moduleVersions: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...managerQueryKeys.address(contractAddress)[0], method: 'module_versions', args }] as const,
  moduleAddresses: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [
      { ...managerQueryKeys.address(contractAddress)[0], method: 'module_addresses', args },
    ] as const,
  moduleInfos: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...managerQueryKeys.address(contractAddress)[0], method: 'module_infos', args }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...managerQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...managerQueryKeys.address(contractAddress)[0], method: 'info', args }] as const,
}
export const managerQueries = {
  moduleVersions: <TData = ModuleVersionsResponse>({
    client,
    options,
    args,
  }: ManagerModuleVersionsQuery<TData>): UseQueryOptions<ModuleVersionsResponse, Error, TData> => ({
    queryKey: managerQueryKeys.moduleVersions(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.moduleVersions({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  moduleAddresses: <TData = ModuleAddressesResponse>({
    client,
    options,
    args,
  }: ManagerModuleAddressesQuery<TData>): UseQueryOptions<
    ModuleAddressesResponse,
    Error,
    TData
  > => ({
    queryKey: managerQueryKeys.moduleAddresses(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.moduleAddresses({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  moduleInfos: <TData = ModuleInfosResponse>({
    client,
    options,
    args,
  }: ManagerModuleInfosQuery<TData>): UseQueryOptions<ModuleInfosResponse, Error, TData> => ({
    queryKey: managerQueryKeys.moduleInfos(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.moduleInfos({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  config: <TData = ConfigResponse>({
    client,
    options,
  }: ManagerConfigQuery<TData>): UseQueryOptions<ConfigResponse, Error, TData> => ({
    queryKey: managerQueryKeys.config(client?.contractAddress),
    queryFn: () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  info: <TData = InfoResponse>({
    client,
    options,
  }: ManagerInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: managerQueryKeys.info(client?.contractAddress),
    queryFn: () => (client ? client.info() : Promise.reject(new Error('Invalid client'))),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
}
export interface ManagerReactQuery<TResponse, TData = TResponse> {
  client: ManagerQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface ManagerInfoQuery<TData> extends ManagerReactQuery<InfoResponse, TData> {}
export function useManagerInfoQuery<TData = InfoResponse>({
  client,
  options,
}: ManagerInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(
    managerQueryKeys.info(client?.contractAddress),
    () => (client ? client.info() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface ManagerConfigQuery<TData> extends ManagerReactQuery<ConfigResponse, TData> {}
export function useManagerConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: ManagerConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    managerQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface ManagerModuleInfosQuery<TData>
  extends ManagerReactQuery<ModuleInfosResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: string
  }
}
export function useManagerModuleInfosQuery<TData = ModuleInfosResponse>({
  client,
  args,
  options,
}: ManagerModuleInfosQuery<TData>) {
  return useQuery<ModuleInfosResponse, Error, TData>(
    managerQueryKeys.moduleInfos(client?.contractAddress, args),
    () =>
      client
        ? client.moduleInfos({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface ManagerModuleAddressesQuery<TData>
  extends ManagerReactQuery<ModuleAddressesResponse, TData> {
  args: {
    names: string[]
  }
}
export function useManagerModuleAddressesQuery<TData = ModuleAddressesResponse>({
  client,
  args,
  options,
}: ManagerModuleAddressesQuery<TData>) {
  return useQuery<ModuleAddressesResponse, Error, TData>(
    managerQueryKeys.moduleAddresses(client?.contractAddress, args),
    () =>
      client
        ? client.moduleAddresses({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface ManagerModuleVersionsQuery<TData>
  extends ManagerReactQuery<ModuleVersionsResponse, TData> {
  args: {
    names: string[]
  }
}
export function useManagerModuleVersionsQuery<TData = ModuleVersionsResponse>({
  client,
  args,
  options,
}: ManagerModuleVersionsQuery<TData>) {
  return useQuery<ModuleVersionsResponse, Error, TData>(
    managerQueryKeys.moduleVersions(client?.contractAddress, args),
    () =>
      client
        ? client.moduleVersions({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface ManagerSuspendOsMutation {
  client: ManagerClient
  msg: {
    newStatus: boolean
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerSuspendOsMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerSuspendOsMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, ManagerSuspendOsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.suspendOs(msg, fee, memo, funds),
    options
  )
}
export interface ManagerSetRootMutation {
  client: ManagerClient
  msg: {
    governanceType?: string
    root: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerSetRootMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerSetRootMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, ManagerSetRootMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setRoot(msg, fee, memo, funds),
    options
  )
}
export interface ManagerUpdateInfoMutation {
  client: ManagerClient
  msg: {
    description?: string
    link?: string
    name?: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerUpdateInfoMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerUpdateInfoMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, ManagerUpdateInfoMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateInfo(msg, fee, memo, funds),
    options
  )
}
export interface ManagerUpgradeMutation {
  client: ManagerClient
  msg: {
    migrateMsg?: Binary
    module: ModuleInfo
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerUpgradeMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, ManagerUpgradeMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, ManagerUpgradeMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.upgrade(msg, fee, memo, funds),
    options
  )
}
export interface ManagerRemoveModuleMutation {
  client: ManagerClient
  msg: {
    moduleId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerRemoveModuleMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, ManagerRemoveModuleMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, ManagerRemoveModuleMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeModule(msg, fee, memo, funds),
    options
  )
}
export interface ManagerRegisterModuleMutation {
  client: ManagerClient
  msg: {
    module: Module
    moduleAddr: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerRegisterModuleMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, ManagerRegisterModuleMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, ManagerRegisterModuleMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.registerModule(msg, fee, memo, funds),
    options
  )
}
export interface ManagerCreateModuleMutation {
  client: ManagerClient
  msg: {
    initMsg?: Binary
    module: ModuleInfo
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerCreateModuleMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, ManagerCreateModuleMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, ManagerCreateModuleMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.createModule(msg, fee, memo, funds),
    options
  )
}
export interface ManagerUpdateModuleAddressesMutation {
  client: ManagerClient
  msg: {
    toAdd?: string[][][]
    toRemove?: string[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerUpdateModuleAddressesMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, ManagerUpdateModuleAddressesMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, ManagerUpdateModuleAddressesMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateModuleAddresses(msg, fee, memo, funds),
    options
  )
}
export interface ManagerExecOnModuleMutation {
  client: ManagerClient
  msg: {
    execMsg: Binary
    moduleId: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useManagerExecOnModuleMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, ManagerExecOnModuleMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, ManagerExecOnModuleMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.execOnModule(msg, fee, memo, funds),
    options
  )
}
