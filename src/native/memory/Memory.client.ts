/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient } from '@cosmjs/cosmwasm-stargate'
import {
  AssetEntry,
  AssetInfoBaseForAddr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ContractListResponse,
  ContractEntry,
  ContractsResponse,
  InstantiateMsg,
  QueryMsg,
} from './Memory.types'
export interface MemoryReadOnlyInterface {
  contractAddress: string
  assets: ({ names }: { names: string[] }) => Promise<AssetsResponse>
  contracts: ({ names }: { names: ContractEntry[] }) => Promise<ContractsResponse>
  contractList: ({
    iterLimit,
    lastContract,
  }: {
    iterLimit?: number
    lastContract?: ContractEntry
  }) => Promise<ContractListResponse>
  assetList: ({
    iterLimit,
    lastAssetName,
  }: {
    iterLimit?: number
    lastAssetName?: string
  }) => Promise<AssetListResponse>
}
export class MemoryQueryClient implements MemoryReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.assets = this.assets.bind(this)
    this.contracts = this.contracts.bind(this)
    this.contractList = this.contractList.bind(this)
    this.assetList = this.assetList.bind(this)
  }

  assets = async ({ names }: { names: string[] }): Promise<AssetsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assets: {
        names,
      },
    })
  }
  contracts = async ({ names }: { names: ContractEntry[] }): Promise<ContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contracts: {
        names,
      },
    })
  }
  contractList = async ({
    iterLimit,
    lastContract,
  }: {
    iterLimit?: number
    lastContract?: ContractEntry
  }): Promise<ContractListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_list: {
        iter_limit: iterLimit,
        last_contract: lastContract,
      },
    })
  }
  assetList = async ({
    iterLimit,
    lastAssetName,
  }: {
    iterLimit?: number
    lastAssetName?: string
  }): Promise<AssetListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      asset_list: {
        iter_limit: iterLimit,
        last_asset_name: lastAssetName,
      },
    })
  }
}
