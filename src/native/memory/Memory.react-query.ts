/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery } from '@tanstack/react-query'
import {
  AssetEntry,
  AssetInfoBaseForAddr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ContractListResponse,
  ContractEntry,
  ContractsResponse,
  InstantiateMsg,
  QueryMsg,
} from './Memory.types'
import { MemoryQueryClient } from './Memory.client'
export const memoryQueryKeys = {
  contract: [
    {
      contract: 'memory',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...memoryQueryKeys.contract[0], address: contractAddress }] as const,
  assets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'assets', args }] as const,
  contracts: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'contracts', args }] as const,
  contractList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'contract_list', args }] as const,
  assetList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'asset_list', args }] as const,
}
export interface MemoryReactQuery<TResponse, TData = TResponse> {
  client: MemoryQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MemoryAssetListQuery<TData> extends MemoryReactQuery<AssetListResponse, TData> {
  args: {
    iterLimit?: number
    lastAssetName?: string
  }
}
export function useMemoryAssetListQuery<TData = AssetListResponse>({
  client,
  args,
  options,
}: MemoryAssetListQuery<TData>) {
  return useQuery<AssetListResponse, Error, TData>(
    memoryQueryKeys.assetList(client?.contractAddress, args),
    () =>
      client
        ? client.assetList({
            iterLimit: args.iterLimit,
            lastAssetName: args.lastAssetName,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryContractListQuery<TData>
  extends MemoryReactQuery<ContractListResponse, TData> {
  args: {
    iterLimit?: number
    lastContract?: ContractEntry
  }
}
export function useMemoryContractListQuery<TData = ContractListResponse>({
  client,
  args,
  options,
}: MemoryContractListQuery<TData>) {
  return useQuery<ContractListResponse, Error, TData>(
    memoryQueryKeys.contractList(client?.contractAddress, args),
    () =>
      client
        ? client.contractList({
            iterLimit: args.iterLimit,
            lastContract: args.lastContract,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryContractsQuery<TData> extends MemoryReactQuery<ContractsResponse, TData> {
  args: {
    names: ContractEntry[]
  }
}
export function useMemoryContractsQuery<TData = ContractsResponse>({
  client,
  args,
  options,
}: MemoryContractsQuery<TData>) {
  return useQuery<ContractsResponse, Error, TData>(
    memoryQueryKeys.contracts(client?.contractAddress, args),
    () =>
      client
        ? client.contracts({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryAssetsQuery<TData> extends MemoryReactQuery<AssetsResponse, TData> {
  args: {
    names: string[]
  }
}
export function useMemoryAssetsQuery<TData = AssetsResponse>({
  client,
  args,
  options,
}: MemoryAssetsQuery<TData>) {
  return useQuery<AssetsResponse, Error, TData>(
    memoryQueryKeys.assets(client?.contractAddress, args),
    () =>
      client
        ? client.assets({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
