/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  AssetInfoBaseForString,
  UncheckedContractEntry,
  UncheckedChannelEntry,
  QueryMsg,
  ContractEntry,
  ChannelEntry,
  MigrateMsg,
  AssetEntry,
  AssetInfoBaseForAddr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ChannelListResponse,
  ChannelsResponse,
  ContractListResponse,
  ContractsResponse,
} from './Memory.types'
import { MemoryQueryClient, MemoryClient } from './Memory.client'
export const memoryQueryKeys = {
  contract: [
    {
      contract: 'memory',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...memoryQueryKeys.contract[0], address: contractAddress }] as const,
  assets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'assets', args }] as const,
  assetList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'asset_list', args }] as const,
  contracts: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'contracts', args }] as const,
  contractList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'contract_list', args }] as const,
  channels: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'channels', args }] as const,
  channelList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...memoryQueryKeys.address(contractAddress)[0], method: 'channel_list', args }] as const,
}
export const memoryQueries = {
  assets: <TData = AssetsResponse>({
    client,
    args,
    options,
  }: MemoryAssetsQuery<TData>): UseQueryOptions<AssetsResponse, Error, TData> => ({
    queryKey: memoryQueryKeys.assets(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.assets({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  assetList: <TData = AssetListResponse>({
    client,
    args,
    options,
  }: MemoryAssetListQuery<TData>): UseQueryOptions<AssetListResponse, Error, TData> => ({
    queryKey: memoryQueryKeys.assetList(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.assetList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  contracts: <TData = ContractsResponse>({
    client,
    args,
    options,
  }: MemoryContractsQuery<TData>): UseQueryOptions<ContractsResponse, Error, TData> => ({
    queryKey: memoryQueryKeys.contracts(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.contracts({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  contractList: <TData = ContractListResponse>({
    client,
    args,
    options,
  }: MemoryContractListQuery<TData>): UseQueryOptions<ContractListResponse, Error, TData> => ({
    queryKey: memoryQueryKeys.contractList(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.contractList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  channels: <TData = ChannelsResponse>({
    client,
    args,
    options,
  }: MemoryChannelsQuery<TData>): UseQueryOptions<ChannelsResponse, Error, TData> => ({
    queryKey: memoryQueryKeys.channels(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.channels({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  channelList: <TData = ChannelListResponse>({
    client,
    args,
    options,
  }: MemoryChannelListQuery<TData>): UseQueryOptions<ChannelListResponse, Error, TData> => ({
    queryKey: memoryQueryKeys.channelList(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.channelList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
}
export interface MemoryReactQuery<TResponse, TData = TResponse> {
  client: MemoryQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface MemoryChannelListQuery<TData>
  extends MemoryReactQuery<ChannelListResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: ChannelEntry
  }
}
export function useMemoryChannelListQuery<TData = ChannelListResponse>({
  client,
  args,
  options,
}: MemoryChannelListQuery<TData>) {
  return useQuery<ChannelListResponse, Error, TData>(
    memoryQueryKeys.channelList(client?.contractAddress, args),
    () =>
      client
        ? client.channelList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryChannelsQuery<TData> extends MemoryReactQuery<ChannelsResponse, TData> {
  args: {
    names: ChannelEntry[]
  }
}
export function useMemoryChannelsQuery<TData = ChannelsResponse>({
  client,
  args,
  options,
}: MemoryChannelsQuery<TData>) {
  return useQuery<ChannelsResponse, Error, TData>(
    memoryQueryKeys.channels(client?.contractAddress, args),
    () =>
      client
        ? client.channels({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryContractListQuery<TData>
  extends MemoryReactQuery<ContractListResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: ContractEntry
  }
}
export function useMemoryContractListQuery<TData = ContractListResponse>({
  client,
  args,
  options,
}: MemoryContractListQuery<TData>) {
  return useQuery<ContractListResponse, Error, TData>(
    memoryQueryKeys.contractList(client?.contractAddress, args),
    () =>
      client
        ? client.contractList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryContractsQuery<TData> extends MemoryReactQuery<ContractsResponse, TData> {
  args: {
    names: ContractEntry[]
  }
}
export function useMemoryContractsQuery<TData = ContractsResponse>({
  client,
  args,
  options,
}: MemoryContractsQuery<TData>) {
  return useQuery<ContractsResponse, Error, TData>(
    memoryQueryKeys.contracts(client?.contractAddress, args),
    () =>
      client
        ? client.contracts({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryAssetListQuery<TData> extends MemoryReactQuery<AssetListResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: string
  }
}
export function useMemoryAssetListQuery<TData = AssetListResponse>({
  client,
  args,
  options,
}: MemoryAssetListQuery<TData>) {
  return useQuery<AssetListResponse, Error, TData>(
    memoryQueryKeys.assetList(client?.contractAddress, args),
    () =>
      client
        ? client.assetList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemoryAssetsQuery<TData> extends MemoryReactQuery<AssetsResponse, TData> {
  args: {
    names: string[]
  }
}
export function useMemoryAssetsQuery<TData = AssetsResponse>({
  client,
  args,
  options,
}: MemoryAssetsQuery<TData>) {
  return useQuery<AssetsResponse, Error, TData>(
    memoryQueryKeys.assets(client?.contractAddress, args),
    () =>
      client
        ? client.assets({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface MemorySetAdminMutation {
  client: MemoryClient
  msg: {
    admin: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMemorySetAdminMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, MemorySetAdminMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, MemorySetAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds),
    options
  )
}
export interface MemoryUpdateChannelsMutation {
  client: MemoryClient
  msg: {
    toAdd: UncheckedChannelEntry[][]
    toRemove: UncheckedChannelEntry[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMemoryUpdateChannelsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MemoryUpdateChannelsMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MemoryUpdateChannelsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateChannels(msg, fee, memo, funds),
    options
  )
}
export interface MemoryUpdateAssetAddressesMutation {
  client: MemoryClient
  msg: {
    toAdd: string[][]
    toRemove: string[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMemoryUpdateAssetAddressesMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MemoryUpdateAssetAddressesMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MemoryUpdateAssetAddressesMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateAssetAddresses(msg, fee, memo, funds),
    options
  )
}
export interface MemoryUpdateContractAddressesMutation {
  client: MemoryClient
  msg: {
    toAdd: UncheckedContractEntry[][]
    toRemove: UncheckedContractEntry[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useMemoryUpdateContractAddressesMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, MemoryUpdateContractAddressesMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, MemoryUpdateContractAddressesMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateContractAddresses(msg, fee, memo, funds),
    options
  )
}
