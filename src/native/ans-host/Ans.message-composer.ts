/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { Coin } from '@cosmjs/amino'
import { MsgExecuteContractEncodeObject } from 'cosmwasm'
import { MsgExecuteContract } from 'cosmjs-types/cosmwasm/wasm/v1/tx'
import { toUtf8 } from '@cosmjs/encoding'
import {
  InstantiateMsg,
  ExecuteMsg,
  AssetInfoBaseForString,
  PoolIdBaseForString,
  PoolType,
  UniquePoolId,
  UncheckedContractEntry,
  UncheckedChannelEntry,
  PoolMetadata,
  QueryMsg,
  DexAssetPairing,
  ContractEntry,
  ChannelEntry,
  AssetPairingFilter,
  PoolMetadataFilter,
  MigrateMsg,
  AssetEntry,
  AssetInfoBaseForAddr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ChannelListResponse,
  ChannelsResponse,
  ContractListResponse,
  ContractsResponse,
  PoolIdBaseForAddr,
  PoolIdListResponse,
  PoolReference,
  PoolMetadataListResponse,
  PoolMetadatasResponse,
  PoolsResponse,
  RegisteredDexesResponse,
} from './Ans.types'
export interface AnsMessage {
  contractAddress: string
  sender: string
  updateContractAddresses: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedContractEntry[][]
      toRemove: UncheckedContractEntry[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateAssetAddresses: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[][]
      toRemove: string[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateChannels: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedChannelEntry[][]
      toRemove: UncheckedChannelEntry[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updateDexes: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[]
      toRemove: string[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  updatePools: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: PoolIdBaseForString[][]
      toRemove: UniquePoolId[]
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
  setAdmin: (
    {
      admin,
    }: {
      admin: string
    },
    funds?: Coin[]
  ) => MsgExecuteContractEncodeObject
}
export class AnsMessageComposer implements AnsMessage {
  sender: string
  contractAddress: string

  constructor(sender: string, contractAddress: string) {
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateContractAddresses = this.updateContractAddresses.bind(this)
    this.updateAssetAddresses = this.updateAssetAddresses.bind(this)
    this.updateChannels = this.updateChannels.bind(this)
    this.updateDexes = this.updateDexes.bind(this)
    this.updatePools = this.updatePools.bind(this)
    this.setAdmin = this.setAdmin.bind(this)
  }

  updateContractAddresses = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedContractEntry[][]
      toRemove: UncheckedContractEntry[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_contract_addresses: {
              to_add: toAdd,
              to_remove: toRemove,
            },
          })
        ),
        funds,
      }),
    }
  }
  updateAssetAddresses = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[][]
      toRemove: string[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_asset_addresses: {
              to_add: toAdd,
              to_remove: toRemove,
            },
          })
        ),
        funds,
      }),
    }
  }
  updateChannels = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedChannelEntry[][]
      toRemove: UncheckedChannelEntry[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_channels: {
              to_add: toAdd,
              to_remove: toRemove,
            },
          })
        ),
        funds,
      }),
    }
  }
  updateDexes = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[]
      toRemove: string[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_dexes: {
              to_add: toAdd,
              to_remove: toRemove,
            },
          })
        ),
        funds,
      }),
    }
  }
  updatePools = (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: PoolIdBaseForString[][]
      toRemove: UniquePoolId[]
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            update_pools: {
              to_add: toAdd,
              to_remove: toRemove,
            },
          })
        ),
        funds,
      }),
    }
  }
  setAdmin = (
    {
      admin,
    }: {
      admin: string
    },
    funds?: Coin[]
  ): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: '/cosmwasm.wasm.v1.MsgExecuteContract',
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(
          JSON.stringify({
            set_admin: {
              admin,
            },
          })
        ),
        funds,
      }),
    }
  }
}
