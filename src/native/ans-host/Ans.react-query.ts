/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  AssetInfoBaseForString,
  PoolIdBaseForString,
  PoolType,
  UniquePoolId,
  UncheckedContractEntry,
  UncheckedChannelEntry,
  PoolMetadata,
  QueryMsg,
  DexAssetPairing,
  ContractEntry,
  ChannelEntry,
  AssetPairingFilter,
  PoolMetadataFilter,
  MigrateMsg,
  AssetEntry,
  AssetInfoBaseForAddr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ChannelListResponse,
  ChannelsResponse,
  ContractListResponse,
  ContractsResponse,
  PoolIdBaseForAddr,
  PoolIdListResponse,
  PoolReference,
  PoolMetadataListResponse,
  PoolMetadatasResponse,
  PoolsResponse,
  RegisteredDexesResponse,
} from './Ans.types'
import { AnsQueryClient, AnsClient } from './Ans.client'
export const ansQueryKeys = {
  contract: [
    {
      contract: 'ans',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...ansQueryKeys.contract[0], address: contractAddress }] as const,
  assets: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'assets', args }] as const,
  assetList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'asset_list', args }] as const,
  contracts: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'contracts', args }] as const,
  contractList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'contract_list', args }] as const,
  channels: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'channels', args }] as const,
  channelList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'channel_list', args }] as const,
  registeredDexes: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'registered_dexes', args }] as const,
  pools: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'pools', args }] as const,
  poolList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'pool_list', args }] as const,
  poolMetadatas: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'pool_metadatas', args }] as const,
  poolMetadataList: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...ansQueryKeys.address(contractAddress)[0], method: 'pool_metadata_list', args }] as const,
}
export interface AnsReactQuery<TResponse, TData = TResponse> {
  client: AnsQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface AnsPoolMetadataListQuery<TData>
  extends AnsReactQuery<PoolMetadataListResponse, TData> {
  args: {
    filter?: PoolMetadataFilter
    pageSize?: number
    pageToken?: UniquePoolId
  }
}
export function useAnsPoolMetadataListQuery<TData = PoolMetadataListResponse>({
  client,
  args,
  options,
}: AnsPoolMetadataListQuery<TData>) {
  return useQuery<PoolMetadataListResponse, Error, TData>(
    ansQueryKeys.poolMetadataList(client?.contractAddress, args),
    () =>
      client
        ? client.poolMetadataList({
            filter: args.filter,
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsPoolMetadatasQuery<TData> extends AnsReactQuery<PoolMetadatasResponse, TData> {
  args: {
    keys: UniquePoolId[]
  }
}
export function useAnsPoolMetadatasQuery<TData = PoolMetadatasResponse>({
  client,
  args,
  options,
}: AnsPoolMetadatasQuery<TData>) {
  return useQuery<PoolMetadatasResponse, Error, TData>(
    ansQueryKeys.poolMetadatas(client?.contractAddress, args),
    () =>
      client
        ? client.poolMetadatas({
            keys: args.keys,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsPoolListQuery<TData> extends AnsReactQuery<PoolIdListResponse, TData> {
  args: {
    filter?: AssetPairingFilter
    pageSize?: number
    pageToken?: DexAssetPairing
  }
}
export function useAnsPoolListQuery<TData = PoolIdListResponse>({
  client,
  args,
  options,
}: AnsPoolListQuery<TData>) {
  return useQuery<PoolIdListResponse, Error, TData>(
    ansQueryKeys.poolList(client?.contractAddress, args),
    () =>
      client
        ? client.poolList({
            filter: args.filter,
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsPoolsQuery<TData> extends AnsReactQuery<PoolsResponse, TData> {
  args: {
    keys: DexAssetPairing[]
  }
}
export function useAnsPoolsQuery<TData = PoolsResponse>({
  client,
  args,
  options,
}: AnsPoolsQuery<TData>) {
  return useQuery<PoolsResponse, Error, TData>(
    ansQueryKeys.pools(client?.contractAddress, args),
    () =>
      client
        ? client.pools({
            keys: args.keys,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsRegisteredDexesQuery<TData>
  extends AnsReactQuery<RegisteredDexesResponse, TData> {}
export function useAnsRegisteredDexesQuery<TData = RegisteredDexesResponse>({
  client,
  options,
}: AnsRegisteredDexesQuery<TData>) {
  return useQuery<RegisteredDexesResponse, Error, TData>(
    ansQueryKeys.registeredDexes(client?.contractAddress),
    () => (client ? client.registeredDexes() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsChannelListQuery<TData> extends AnsReactQuery<ChannelListResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: ChannelEntry
  }
}
export function useAnsChannelListQuery<TData = ChannelListResponse>({
  client,
  args,
  options,
}: AnsChannelListQuery<TData>) {
  return useQuery<ChannelListResponse, Error, TData>(
    ansQueryKeys.channelList(client?.contractAddress, args),
    () =>
      client
        ? client.channelList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsChannelsQuery<TData> extends AnsReactQuery<ChannelsResponse, TData> {
  args: {
    names: ChannelEntry[]
  }
}
export function useAnsChannelsQuery<TData = ChannelsResponse>({
  client,
  args,
  options,
}: AnsChannelsQuery<TData>) {
  return useQuery<ChannelsResponse, Error, TData>(
    ansQueryKeys.channels(client?.contractAddress, args),
    () =>
      client
        ? client.channels({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsContractListQuery<TData> extends AnsReactQuery<ContractListResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: ContractEntry
  }
}
export function useAnsContractListQuery<TData = ContractListResponse>({
  client,
  args,
  options,
}: AnsContractListQuery<TData>) {
  return useQuery<ContractListResponse, Error, TData>(
    ansQueryKeys.contractList(client?.contractAddress, args),
    () =>
      client
        ? client.contractList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsContractsQuery<TData> extends AnsReactQuery<ContractsResponse, TData> {
  args: {
    names: ContractEntry[]
  }
}
export function useAnsContractsQuery<TData = ContractsResponse>({
  client,
  args,
  options,
}: AnsContractsQuery<TData>) {
  return useQuery<ContractsResponse, Error, TData>(
    ansQueryKeys.contracts(client?.contractAddress, args),
    () =>
      client
        ? client.contracts({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsAssetListQuery<TData> extends AnsReactQuery<AssetListResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: string
  }
}
export function useAnsAssetListQuery<TData = AssetListResponse>({
  client,
  args,
  options,
}: AnsAssetListQuery<TData>) {
  return useQuery<AssetListResponse, Error, TData>(
    ansQueryKeys.assetList(client?.contractAddress, args),
    () =>
      client
        ? client.assetList({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsAssetsQuery<TData> extends AnsReactQuery<AssetsResponse, TData> {
  args: {
    names: string[]
  }
}
export function useAnsAssetsQuery<TData = AssetsResponse>({
  client,
  args,
  options,
}: AnsAssetsQuery<TData>) {
  return useQuery<AssetsResponse, Error, TData>(
    ansQueryKeys.assets(client?.contractAddress, args),
    () =>
      client
        ? client.assets({
            names: args.names,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface AnsSetAdminMutation {
  client: AnsClient
  msg: {
    admin: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAnsSetAdminMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsSetAdminMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, AnsSetAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds),
    options
  )
}
export interface AnsUpdatePoolsMutation {
  client: AnsClient
  msg: {
    toAdd: PoolIdBaseForString[][]
    toRemove: UniquePoolId[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAnsUpdatePoolsMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdatePoolsMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, AnsUpdatePoolsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updatePools(msg, fee, memo, funds),
    options
  )
}
export interface AnsUpdateDexesMutation {
  client: AnsClient
  msg: {
    toAdd: string[]
    toRemove: string[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAnsUpdateDexesMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdateDexesMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, AnsUpdateDexesMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.updateDexes(msg, fee, memo, funds),
    options
  )
}
export interface AnsUpdateChannelsMutation {
  client: AnsClient
  msg: {
    toAdd: UncheckedChannelEntry[][]
    toRemove: UncheckedChannelEntry[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAnsUpdateChannelsMutation(
  options?: Omit<UseMutationOptions<ExecuteResult, Error, AnsUpdateChannelsMutation>, 'mutationFn'>
) {
  return useMutation<ExecuteResult, Error, AnsUpdateChannelsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateChannels(msg, fee, memo, funds),
    options
  )
}
export interface AnsUpdateAssetAddressesMutation {
  client: AnsClient
  msg: {
    toAdd: string[][]
    toRemove: string[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAnsUpdateAssetAddressesMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, AnsUpdateAssetAddressesMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, AnsUpdateAssetAddressesMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateAssetAddresses(msg, fee, memo, funds),
    options
  )
}
export interface AnsUpdateContractAddressesMutation {
  client: AnsClient
  msg: {
    toAdd: UncheckedContractEntry[][]
    toRemove: UncheckedContractEntry[]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useAnsUpdateContractAddressesMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, AnsUpdateContractAddressesMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, AnsUpdateContractAddressesMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.updateContractAddresses(msg, fee, memo, funds),
    options
  )
}
