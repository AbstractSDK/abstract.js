/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  AssetInfoBaseForString,
  PoolIdBaseForString,
  PoolType,
  UniquePoolId,
  UncheckedContractEntry,
  UncheckedChannelEntry,
  PoolMetadata,
  QueryMsg,
  DexAssetPairing,
  ContractEntry,
  ChannelEntry,
  AssetPairingFilter,
  PoolMetadataFilter,
  MigrateMsg,
  AssetEntry,
  AssetInfoBaseForAddr,
  Addr,
  AssetListResponse,
  AssetsResponse,
  ChannelListResponse,
  ChannelsResponse,
  ContractListResponse,
  ContractsResponse,
  PoolIdBaseForAddr,
  PoolIdListResponse,
  PoolReference,
  PoolMetadataListResponse,
  PoolMetadatasResponse,
  PoolsResponse,
  RegisteredDexesResponse,
} from './Ans.types'
export interface AnsReadOnlyInterface {
  contractAddress: string
  assets: ({ names }: { names: string[] }) => Promise<AssetsResponse>
  assetList: ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: string
  }) => Promise<AssetListResponse>
  contracts: ({ names }: { names: ContractEntry[] }) => Promise<ContractsResponse>
  contractList: ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: ContractEntry
  }) => Promise<ContractListResponse>
  channels: ({ names }: { names: ChannelEntry[] }) => Promise<ChannelsResponse>
  channelList: ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: ChannelEntry
  }) => Promise<ChannelListResponse>
  registeredDexes: () => Promise<RegisteredDexesResponse>
  pools: ({ keys }: { keys: DexAssetPairing[] }) => Promise<PoolsResponse>
  poolList: ({
    filter,
    pageSize,
    pageToken,
  }: {
    filter?: AssetPairingFilter
    pageSize?: number
    pageToken?: DexAssetPairing
  }) => Promise<PoolIdListResponse>
  poolMetadatas: ({ keys }: { keys: UniquePoolId[] }) => Promise<PoolMetadatasResponse>
  poolMetadataList: ({
    filter,
    pageSize,
    pageToken,
  }: {
    filter?: PoolMetadataFilter
    pageSize?: number
    pageToken?: UniquePoolId
  }) => Promise<PoolMetadataListResponse>
}
export class AnsQueryClient implements AnsReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.assets = this.assets.bind(this)
    this.assetList = this.assetList.bind(this)
    this.contracts = this.contracts.bind(this)
    this.contractList = this.contractList.bind(this)
    this.channels = this.channels.bind(this)
    this.channelList = this.channelList.bind(this)
    this.registeredDexes = this.registeredDexes.bind(this)
    this.pools = this.pools.bind(this)
    this.poolList = this.poolList.bind(this)
    this.poolMetadatas = this.poolMetadatas.bind(this)
    this.poolMetadataList = this.poolMetadataList.bind(this)
  }

  assets = async ({ names }: { names: string[] }): Promise<AssetsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assets: {
        names,
      },
    })
  }
  assetList = async ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: string
  }): Promise<AssetListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      asset_list: {
        page_size: pageSize,
        page_token: pageToken,
      },
    })
  }
  contracts = async ({ names }: { names: ContractEntry[] }): Promise<ContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contracts: {
        names,
      },
    })
  }
  contractList = async ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: ContractEntry
  }): Promise<ContractListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_list: {
        page_size: pageSize,
        page_token: pageToken,
      },
    })
  }
  channels = async ({ names }: { names: ChannelEntry[] }): Promise<ChannelsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channels: {
        names,
      },
    })
  }
  channelList = async ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: ChannelEntry
  }): Promise<ChannelListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      channel_list: {
        page_size: pageSize,
        page_token: pageToken,
      },
    })
  }
  registeredDexes = async (): Promise<RegisteredDexesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      registered_dexes: {},
    })
  }
  pools = async ({ keys }: { keys: DexAssetPairing[] }): Promise<PoolsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pools: {
        keys,
      },
    })
  }
  poolList = async ({
    filter,
    pageSize,
    pageToken,
  }: {
    filter?: AssetPairingFilter
    pageSize?: number
    pageToken?: DexAssetPairing
  }): Promise<PoolIdListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pool_list: {
        filter,
        page_size: pageSize,
        page_token: pageToken,
      },
    })
  }
  poolMetadatas = async ({ keys }: { keys: UniquePoolId[] }): Promise<PoolMetadatasResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pool_metadatas: {
        keys,
      },
    })
  }
  poolMetadataList = async ({
    filter,
    pageSize,
    pageToken,
  }: {
    filter?: PoolMetadataFilter
    pageSize?: number
    pageToken?: UniquePoolId
  }): Promise<PoolMetadataListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      pool_metadata_list: {
        filter,
        page_size: pageSize,
        page_token: pageToken,
      },
    })
  }
}
export interface AnsInterface extends AnsReadOnlyInterface {
  contractAddress: string
  sender: string
  updateContractAddresses: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedContractEntry[][]
      toRemove: UncheckedContractEntry[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateAssetAddresses: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[][]
      toRemove: string[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateChannels: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedChannelEntry[][]
      toRemove: UncheckedChannelEntry[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  updateDexes: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[]
      toRemove: string[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  updatePools: (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: PoolIdBaseForString[][]
      toRemove: UniquePoolId[]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  setAdmin: (
    {
      admin,
    }: {
      admin: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class AnsClient extends AnsQueryClient implements AnsInterface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.updateContractAddresses = this.updateContractAddresses.bind(this)
    this.updateAssetAddresses = this.updateAssetAddresses.bind(this)
    this.updateChannels = this.updateChannels.bind(this)
    this.updateDexes = this.updateDexes.bind(this)
    this.updatePools = this.updatePools.bind(this)
    this.setAdmin = this.setAdmin.bind(this)
  }

  updateContractAddresses = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedContractEntry[][]
      toRemove: UncheckedContractEntry[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_contract_addresses: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      funds
    )
  }
  updateAssetAddresses = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[][]
      toRemove: string[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_asset_addresses: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      funds
    )
  }
  updateChannels = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: UncheckedChannelEntry[][]
      toRemove: UncheckedChannelEntry[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_channels: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      funds
    )
  }
  updateDexes = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: string[]
      toRemove: string[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_dexes: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      funds
    )
  }
  updatePools = async (
    {
      toAdd,
      toRemove,
    }: {
      toAdd: PoolIdBaseForString[][]
      toRemove: UniquePoolId[]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_pools: {
          to_add: toAdd,
          to_remove: toRemove,
        },
      },
      fee,
      memo,
      funds
    )
  }
  setAdmin = async (
    {
      admin,
    }: {
      admin: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_admin: {
          admin,
        },
      },
      fee,
      memo,
      funds
    )
  }
}
