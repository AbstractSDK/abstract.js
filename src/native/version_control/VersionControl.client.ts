/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.16.5.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  ModuleVersion,
  ModuleReference,
  Addr,
  ModuleInfo,
  Core,
  QueryMsg,
  MigrateMsg,
  ConfigResponse,
  ModuleResponse,
  Module,
  ModulesResponse,
  OsCoreResponse,
} from './VersionControl.types'
export interface VersionControlReadOnlyInterface {
  contractAddress: string
  osCore: ({ osId }: { osId: number }) => Promise<OsCoreResponse>
  module: ({ module }: { module: ModuleInfo }) => Promise<ModuleResponse>
  config: () => Promise<ConfigResponse>
  modules: ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: ModuleInfo
  }) => Promise<ModulesResponse>
}
export class VersionControlQueryClient implements VersionControlReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.osCore = this.osCore.bind(this)
    this.module = this.module.bind(this)
    this.config = this.config.bind(this)
    this.modules = this.modules.bind(this)
  }

  osCore = async ({ osId }: { osId: number }): Promise<OsCoreResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      os_core: {
        os_id: osId,
      },
    })
  }
  module = async ({ module }: { module: ModuleInfo }): Promise<ModuleResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      module: {
        module,
      },
    })
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  modules = async ({
    pageSize,
    pageToken,
  }: {
    pageSize?: number
    pageToken?: ModuleInfo
  }): Promise<ModulesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      modules: {
        page_size: pageSize,
        page_token: pageToken,
      },
    })
  }
}
export interface VersionControlInterface extends VersionControlReadOnlyInterface {
  contractAddress: string
  sender: string
  removeModule: (
    {
      module,
    }: {
      module: ModuleInfo
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  addModules: (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  addOs: (
    {
      core,
      osId,
    }: {
      core: Core
      osId: number
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  setAdmin: (
    {
      newAdmin,
    }: {
      newAdmin: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
  setFactory: (
    {
      newFactory,
    }: {
      newFactory: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: Coin[]
  ) => Promise<ExecuteResult>
}
export class VersionControlClient
  extends VersionControlQueryClient
  implements VersionControlInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.removeModule = this.removeModule.bind(this)
    this.addModules = this.addModules.bind(this)
    this.addOs = this.addOs.bind(this)
    this.setAdmin = this.setAdmin.bind(this)
    this.setFactory = this.setFactory.bind(this)
  }

  removeModule = async (
    {
      module,
    }: {
      module: ModuleInfo
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_module: {
          module,
        },
      },
      fee,
      memo,
      funds
    )
  }
  addModules = async (
    {
      modules,
    }: {
      modules: ModuleInfo[][]
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_modules: {
          modules,
        },
      },
      fee,
      memo,
      funds
    )
  }
  addOs = async (
    {
      core,
      osId,
    }: {
      core: Core
      osId: number
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_os: {
          core,
          os_id: osId,
        },
      },
      fee,
      memo,
      funds
    )
  }
  setAdmin = async (
    {
      newAdmin,
    }: {
      newAdmin: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_admin: {
          new_admin: newAdmin,
        },
      },
      fee,
      memo,
      funds
    )
  }
  setFactory = async (
    {
      newFactory,
    }: {
      newFactory: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_factory: {
          new_factory: newFactory,
        },
      },
      fee,
      memo,
      funds
    )
  }
}
