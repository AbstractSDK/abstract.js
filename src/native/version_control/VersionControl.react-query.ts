/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Addr, ApiAddressResponse, ContractVersion, ApiAddressesResponse, Uint64, CodeIdResponse, CodeIdsResponse, ConfigResponse, ExecuteMsg, InstantiateMsg, ModuleInfo, OsCoreResponse, Core, QueryMsg } from "./VersionControl.types";
import { VersionControlQueryClient, VersionControlClient } from "./VersionControl.client";
export const versionControlQueryKeys = {
  contract: ([{
    contract: "versionControl"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...versionControlQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  osCore: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...versionControlQueryKeys.address(contractAddress)[0],
    method: "os_core",
    args
  }] as const),
  codeId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...versionControlQueryKeys.address(contractAddress)[0],
    method: "code_id",
    args
  }] as const),
  apiAddress: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...versionControlQueryKeys.address(contractAddress)[0],
    method: "api_address",
    args
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...versionControlQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  codeIds: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...versionControlQueryKeys.address(contractAddress)[0],
    method: "code_ids",
    args
  }] as const),
  apiAddresses: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...versionControlQueryKeys.address(contractAddress)[0],
    method: "api_addresses",
    args
  }] as const)
};
export interface VersionControlReactQuery<TResponse, TData = TResponse> {
  client: VersionControlQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface VersionControlApiAddressesQuery<TData> extends VersionControlReactQuery<ApiAddressesResponse, TData> {
  args: {
    pageSize?: number;
    pageToken?: ContractVersion;
  };
}
export function useVersionControlApiAddressesQuery<TData = ApiAddressesResponse>({
  client,
  args,
  options
}: VersionControlApiAddressesQuery<TData>) {
  return useQuery<ApiAddressesResponse, Error, TData>(versionControlQueryKeys.apiAddresses(client?.contractAddress, args), () => client ? client.apiAddresses({
    pageSize: args.pageSize,
    pageToken: args.pageToken
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VersionControlCodeIdsQuery<TData> extends VersionControlReactQuery<CodeIdsResponse, TData> {
  args: {
    pageSize?: number;
    pageToken?: ContractVersion;
  };
}
export function useVersionControlCodeIdsQuery<TData = CodeIdsResponse>({
  client,
  args,
  options
}: VersionControlCodeIdsQuery<TData>) {
  return useQuery<CodeIdsResponse, Error, TData>(versionControlQueryKeys.codeIds(client?.contractAddress, args), () => client ? client.codeIds({
    pageSize: args.pageSize,
    pageToken: args.pageToken
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VersionControlConfigQuery<TData> extends VersionControlReactQuery<ConfigResponse, TData> {}
export function useVersionControlConfigQuery<TData = ConfigResponse>({
  client,
  options
}: VersionControlConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(versionControlQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VersionControlApiAddressQuery<TData> extends VersionControlReactQuery<ApiAddressResponse, TData> {
  args: {
    module: ModuleInfo;
  };
}
export function useVersionControlApiAddressQuery<TData = ApiAddressResponse>({
  client,
  args,
  options
}: VersionControlApiAddressQuery<TData>) {
  return useQuery<ApiAddressResponse, Error, TData>(versionControlQueryKeys.apiAddress(client?.contractAddress, args), () => client ? client.apiAddress({
    module: args.module
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VersionControlCodeIdQuery<TData> extends VersionControlReactQuery<CodeIdResponse, TData> {
  args: {
    module: ModuleInfo;
  };
}
export function useVersionControlCodeIdQuery<TData = CodeIdResponse>({
  client,
  args,
  options
}: VersionControlCodeIdQuery<TData>) {
  return useQuery<CodeIdResponse, Error, TData>(versionControlQueryKeys.codeId(client?.contractAddress, args), () => client ? client.codeId({
    module: args.module
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VersionControlOsCoreQuery<TData> extends VersionControlReactQuery<OsCoreResponse, TData> {
  args: {
    osId: number;
  };
}
export function useVersionControlOsCoreQuery<TData = OsCoreResponse>({
  client,
  args,
  options
}: VersionControlOsCoreQuery<TData>) {
  return useQuery<OsCoreResponse, Error, TData>(versionControlQueryKeys.osCore(client?.contractAddress, args), () => client ? client.osCore({
    osId: args.osId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface VersionControlSetFactoryMutation {
  client: VersionControlClient;
  msg: {
    newFactory: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVersionControlSetFactoryMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetFactoryMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlSetFactoryMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setFactory(msg, fee, memo, funds), options);
}
export interface VersionControlSetAdminMutation {
  client: VersionControlClient;
  msg: {
    newAdmin: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVersionControlSetAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlSetAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlSetAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setAdmin(msg, fee, memo, funds), options);
}
export interface VersionControlAddOsMutation {
  client: VersionControlClient;
  msg: {
    managerAddress: string;
    osId: number;
    proxyAddress: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVersionControlAddOsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddOsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlAddOsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addOs(msg, fee, memo, funds), options);
}
export interface VersionControlRemoveApiMutation {
  client: VersionControlClient;
  msg: {
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVersionControlRemoveApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveApiMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlRemoveApiMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeApi(msg, fee, memo, funds), options);
}
export interface VersionControlAddApiMutation {
  client: VersionControlClient;
  msg: {
    address: string;
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVersionControlAddApiMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddApiMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlAddApiMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addApi(msg, fee, memo, funds), options);
}
export interface VersionControlRemoveCodeIdMutation {
  client: VersionControlClient;
  msg: {
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVersionControlRemoveCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlRemoveCodeIdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeCodeId(msg, fee, memo, funds), options);
}
export interface VersionControlAddCodeIdMutation {
  client: VersionControlClient;
  msg: {
    codeId: number;
    module: string;
    version: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useVersionControlAddCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, VersionControlAddCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, VersionControlAddCodeIdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addCodeId(msg, fee, memo, funds), options);
}