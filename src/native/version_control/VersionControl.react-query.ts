/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.21.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from '@tanstack/react-query'
import { ExecuteResult } from '@cosmjs/cosmwasm-stargate'
import { StdFee, Coin } from '@cosmjs/amino'
import {
  InstantiateMsg,
  ExecuteMsg,
  ModuleVersion,
  ModuleReference,
  Addr,
  ModuleInfo,
  Core,
  QueryMsg,
  MigrateMsg,
  ConfigResponse,
  ModuleResponse,
  Module,
  ModulesResponse,
  OsCoreResponse,
} from './VersionControl.types'
import { VersionControlQueryClient, VersionControlClient } from './VersionControl.client'
export const versionControlQueryKeys = {
  contract: [
    {
      contract: 'versionControl',
    },
  ] as const,
  address: (contractAddress: string | undefined) =>
    [{ ...versionControlQueryKeys.contract[0], address: contractAddress }] as const,
  osCore: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...versionControlQueryKeys.address(contractAddress)[0], method: 'os_core', args }] as const,
  module: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...versionControlQueryKeys.address(contractAddress)[0], method: 'module', args }] as const,
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...versionControlQueryKeys.address(contractAddress)[0], method: 'config', args }] as const,
  modules: (contractAddress: string | undefined, args?: Record<string, unknown>) =>
    [{ ...versionControlQueryKeys.address(contractAddress)[0], method: 'modules', args }] as const,
}
export const versionControlQueries = {
  osCore: <TData = OsCoreResponse>({
    client,
    args,
    options,
  }: VersionControlOsCoreQuery<TData>): UseQueryOptions<OsCoreResponse, Error, TData> => ({
    queryKey: versionControlQueryKeys.osCore(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.osCore({
            osId: args.osId,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  module: <TData = ModuleResponse>({
    client,
    args,
    options,
  }: VersionControlModuleQuery<TData>): UseQueryOptions<ModuleResponse, Error, TData> => ({
    queryKey: versionControlQueryKeys.module(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.module({
            module: args.module,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  config: <TData = ConfigResponse>({
    client,
    options,
  }: VersionControlConfigQuery<TData>): UseQueryOptions<ConfigResponse, Error, TData> => ({
    queryKey: versionControlQueryKeys.config(client?.contractAddress),
    queryFn: () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
  modules: <TData = ModulesResponse>({
    client,
    args,
    options,
  }: VersionControlModulesQuery<TData>): UseQueryOptions<ModulesResponse, Error, TData> => ({
    queryKey: versionControlQueryKeys.modules(client?.contractAddress, args),
    queryFn: () =>
      client
        ? client.modules({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true),
  }),
}
export interface VersionControlReactQuery<TResponse, TData = TResponse> {
  client: VersionControlQueryClient | undefined
  options?: Omit<
    UseQueryOptions<TResponse, Error, TData>,
    "'queryKey' | 'queryFn' | 'initialData'"
  > & {
    initialData?: undefined
  }
}
export interface VersionControlModulesQuery<TData>
  extends VersionControlReactQuery<ModulesResponse, TData> {
  args: {
    pageSize?: number
    pageToken?: ModuleInfo
  }
}
export function useVersionControlModulesQuery<TData = ModulesResponse>({
  client,
  args,
  options,
}: VersionControlModulesQuery<TData>) {
  return useQuery<ModulesResponse, Error, TData>(
    versionControlQueryKeys.modules(client?.contractAddress, args),
    () =>
      client
        ? client.modules({
            pageSize: args.pageSize,
            pageToken: args.pageToken,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlConfigQuery<TData>
  extends VersionControlReactQuery<ConfigResponse, TData> {}
export function useVersionControlConfigQuery<TData = ConfigResponse>({
  client,
  options,
}: VersionControlConfigQuery<TData>) {
  return useQuery<ConfigResponse, Error, TData>(
    versionControlQueryKeys.config(client?.contractAddress),
    () => (client ? client.config() : Promise.reject(new Error('Invalid client'))),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlModuleQuery<TData>
  extends VersionControlReactQuery<ModuleResponse, TData> {
  args: {
    module: ModuleInfo
  }
}
export function useVersionControlModuleQuery<TData = ModuleResponse>({
  client,
  args,
  options,
}: VersionControlModuleQuery<TData>) {
  return useQuery<ModuleResponse, Error, TData>(
    versionControlQueryKeys.module(client?.contractAddress, args),
    () =>
      client
        ? client.module({
            module: args.module,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlOsCoreQuery<TData>
  extends VersionControlReactQuery<OsCoreResponse, TData> {
  args: {
    osId: number
  }
}
export function useVersionControlOsCoreQuery<TData = OsCoreResponse>({
  client,
  args,
  options,
}: VersionControlOsCoreQuery<TData>) {
  return useQuery<OsCoreResponse, Error, TData>(
    versionControlQueryKeys.osCore(client?.contractAddress, args),
    () =>
      client
        ? client.osCore({
            osId: args.osId,
          })
        : Promise.reject(new Error('Invalid client')),
    { ...options, enabled: !!client && (options?.enabled != undefined ? options.enabled : true) }
  )
}
export interface VersionControlSetFactoryMutation {
  client: VersionControlClient
  msg: {
    newFactory: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlSetFactoryMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlSetFactoryMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlSetFactoryMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setFactory(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlSetAdminMutation {
  client: VersionControlClient
  msg: {
    newAdmin: string
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlSetAdminMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlSetAdminMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlSetAdminMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.setAdmin(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlAddOsMutation {
  client: VersionControlClient
  msg: {
    core: Core
    osId: number
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlAddOsMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlAddOsMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlAddOsMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.addOs(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlAddModulesMutation {
  client: VersionControlClient
  msg: {
    modules: ModuleInfo[][]
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlAddModulesMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlAddModulesMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlAddModulesMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) => client.addModules(msg, fee, memo, funds),
    options
  )
}
export interface VersionControlRemoveModuleMutation {
  client: VersionControlClient
  msg: {
    module: ModuleInfo
  }
  args?: {
    fee?: number | StdFee | 'auto'
    memo?: string
    funds?: Coin[]
  }
}
export function useVersionControlRemoveModuleMutation(
  options?: Omit<
    UseMutationOptions<ExecuteResult, Error, VersionControlRemoveModuleMutation>,
    'mutationFn'
  >
) {
  return useMutation<ExecuteResult, Error, VersionControlRemoveModuleMutation>(
    ({ client, msg, args: { fee, memo, funds } = {} }) =>
      client.removeModule(msg, fee, memo, funds),
    options
  )
}
