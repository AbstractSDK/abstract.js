/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Binary, Uint64, ConfigResponse, ExecuteMsg, ModuleKind, Module, ModuleInfo, InfoResponse, OsInfo, InstantiateMsg, ManagerModuleInfo, ContractVersion, ModuleAddressesResponse, ModuleInfosResponse, ModuleVersionsResponse, QueryMsg, QueryOsConfigResponse } from "./types/Manager.types";
export interface ManagerMessage {
  contractAddress: string;
  sender: string;
  setAdmin: ({
    admin,
    governanceType
  }: {
    admin: string;
    governanceType?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  createModule: ({
    initMsg,
    module
  }: {
    initMsg?: Binary;
    module: Module;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  registerModule: ({
    module,
    moduleAddr
  }: {
    module: Module;
    moduleAddr: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeModule: ({
    moduleName
  }: {
    moduleName: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  execOnModule: ({
    execMsg,
    moduleName
  }: {
    execMsg: Binary;
    moduleName: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateConfig: ({
    root,
    vcAddr
  }: {
    root?: string;
    vcAddr?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  upgrade: ({
    migrateMsg,
    module
  }: {
    migrateMsg?: Binary;
    module: Module;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  suspendOs: ({
    newStatus
  }: {
    newStatus: boolean;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateInfo: ({
    description,
    link,
    name
  }: {
    description?: string;
    link?: string;
    name?: string;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class ManagerMessageComposer implements ManagerMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setAdmin = this.setAdmin.bind(this);
    this.createModule = this.createModule.bind(this);
    this.registerModule = this.registerModule.bind(this);
    this.removeModule = this.removeModule.bind(this);
    this.execOnModule = this.execOnModule.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.upgrade = this.upgrade.bind(this);
    this.suspendOs = this.suspendOs.bind(this);
    this.updateInfo = this.updateInfo.bind(this);
  }

  setAdmin = ({
    admin,
    governanceType
  }: {
    admin: string;
    governanceType?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_admin: {
            admin,
            governance_type: governanceType
          }
        })),
        funds
      })
    };
  };
  createModule = ({
    initMsg,
    module
  }: {
    initMsg?: Binary;
    module: Module;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_module: {
            init_msg: initMsg,
            module
          }
        })),
        funds
      })
    };
  };
  registerModule = ({
    module,
    moduleAddr
  }: {
    module: Module;
    moduleAddr: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          register_module: {
            module,
            module_addr: moduleAddr
          }
        })),
        funds
      })
    };
  };
  removeModule = ({
    moduleName
  }: {
    moduleName: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_module: {
            module_name: moduleName
          }
        })),
        funds
      })
    };
  };
  execOnModule = ({
    execMsg,
    moduleName
  }: {
    execMsg: Binary;
    moduleName: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          exec_on_module: {
            exec_msg: execMsg,
            module_name: moduleName
          }
        })),
        funds
      })
    };
  };
  updateConfig = ({
    root,
    vcAddr
  }: {
    root?: string;
    vcAddr?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_config: {
            root,
            vc_addr: vcAddr
          }
        })),
        funds
      })
    };
  };
  upgrade = ({
    migrateMsg,
    module
  }: {
    migrateMsg?: Binary;
    module: Module;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          upgrade: {
            migrate_msg: migrateMsg,
            module
          }
        })),
        funds
      })
    };
  };
  suspendOs = ({
    newStatus
  }: {
    newStatus: boolean;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          suspend_os: {
            new_status: newStatus
          }
        })),
        funds
      })
    };
  };
  updateInfo = ({
    description,
    link,
    name
  }: {
    description?: string;
    link?: string;
    name?: string;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_info: {
            description,
            link,
            name
          }
        })),
        funds
      })
    };
  };
}
