/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.5.1.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
export interface AllAccountsResponse {
  accounts: string[]
}
export type Uint128 = string
export type Expiration =
  | {
      at_height: number
    }
  | {
      at_time: Timestamp
    }
  | {
      never: {}
    }
export type Timestamp = Uint64
export type Uint64 = string
export interface AllAllowancesResponse {
  allowances: AllowanceInfo[]
}
export interface AllowanceInfo {
  allowance: Uint128
  expires: Expiration
  spender: string
}
export interface AllowanceResponse {
  allowance: Uint128
  expires: Expiration
}
export interface BalanceResponse {
  balance: Uint128
}
export type Binary = string
export interface DownloadLogoResponse {
  data: Binary
  mime_type: string
}
export type ExecuteMsg =
  | {
      transfer: {
        amount: Uint128
        recipient: string
      }
    }
  | {
      burn: {
        amount: Uint128
      }
    }
  | {
      send: {
        amount: Uint128
        contract: string
        msg: Binary
      }
    }
  | {
      increase_allowance: {
        amount: Uint128
        expires?: Expiration | null
        spender: string
      }
    }
  | {
      decrease_allowance: {
        amount: Uint128
        expires?: Expiration | null
        spender: string
      }
    }
  | {
      transfer_from: {
        amount: Uint128
        owner: string
        recipient: string
      }
    }
  | {
      send_from: {
        amount: Uint128
        contract: string
        msg: Binary
        owner: string
      }
    }
  | {
      burn_from: {
        amount: Uint128
        owner: string
      }
    }
  | {
      mint: {
        amount: Uint128
        recipient: string
      }
    }
  | {
      update_minter: {
        new_minter: string
      }
    }
  | {
      update_marketing: {
        description?: string | null
        marketing?: string | null
        project?: string | null
      }
    }
  | {
      upload_logo: Logo
    }
export type Logo =
  | {
      url: string
    }
  | {
      embedded: EmbeddedLogo
    }
export type EmbeddedLogo =
  | {
      svg: Binary
    }
  | {
      png: Binary
    }
export interface InstantiateMsg {
  decimals: number
  initial_balances: Cw20Coin[]
  marketing?: InstantiateMarketingInfo | null
  mint?: MinterResponse | null
  name: string
  symbol: string
}
export interface Cw20Coin {
  address: string
  amount: Uint128
}
export interface InstantiateMarketingInfo {
  description?: string | null
  logo?: Logo | null
  marketing?: string | null
  project?: string | null
}
export interface MinterResponse {
  cap?: Uint128 | null
  minter: string
}
export type LogoInfo =
  | 'embedded'
  | {
      url: string
    }
export type Addr = string
export interface MarketingInfoResponse {
  description?: string | null
  logo?: LogoInfo | null
  marketing?: Addr | null
  project?: string | null
}
export type QueryMsg =
  | {
      balance: {
        address: string
      }
    }
  | {
      token_info: {}
    }
  | {
      minter: {}
    }
  | {
      allowance: {
        owner: string
        spender: string
      }
    }
  | {
      all_allowances: {
        limit?: number | null
        owner: string
        start_after?: string | null
      }
    }
  | {
      all_accounts: {
        limit?: number | null
        start_after?: string | null
      }
    }
  | {
      marketing_info: {}
    }
  | {
      download_logo: {}
    }
export interface TokenInfoResponse {
  decimals: number
  name: string
  symbol: string
  total_supply: Uint128
}
export interface Cw20ReadOnlyInterface {
  contractAddress: string
  balance: ({ address }: { address: string }) => Promise<BalanceResponse>
  tokenInfo: () => Promise<TokenInfoResponse>
  minter: () => Promise<MinterResponse>
  allowance: ({ owner, spender }: { owner: string; spender: string }) => Promise<AllowanceResponse>
  allAllowances: ({
    limit,
    owner,
    startAfter,
  }: {
    limit?: number
    owner: string
    startAfter?: string
  }) => Promise<AllAllowancesResponse>
  allAccounts: ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }) => Promise<AllAccountsResponse>
  marketingInfo: () => Promise<MarketingInfoResponse>
  downloadLogo: () => Promise<DownloadLogoResponse>
}
export class Cw20QueryClient implements Cw20ReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.balance = this.balance.bind(this)
    this.tokenInfo = this.tokenInfo.bind(this)
    this.minter = this.minter.bind(this)
    this.allowance = this.allowance.bind(this)
    this.allAllowances = this.allAllowances.bind(this)
    this.allAccounts = this.allAccounts.bind(this)
    this.marketingInfo = this.marketingInfo.bind(this)
    this.downloadLogo = this.downloadLogo.bind(this)
  }

  balance = async ({ address }: { address: string }): Promise<BalanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balance: {
        address,
      },
    })
  }
  tokenInfo = async (): Promise<TokenInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      token_info: {},
    })
  }
  minter = async (): Promise<MinterResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      minter: {},
    })
  }
  allowance = async ({
    owner,
    spender,
  }: {
    owner: string
    spender: string
  }): Promise<AllowanceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      allowance: {
        owner,
        spender,
      },
    })
  }
  allAllowances = async ({
    limit,
    owner,
    startAfter,
  }: {
    limit?: number
    owner: string
    startAfter?: string
  }): Promise<AllAllowancesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_allowances: {
        limit,
        owner,
        start_after: startAfter,
      },
    })
  }
  allAccounts = async ({
    limit,
    startAfter,
  }: {
    limit?: number
    startAfter?: string
  }): Promise<AllAccountsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      all_accounts: {
        limit,
        start_after: startAfter,
      },
    })
  }
  marketingInfo = async (): Promise<MarketingInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      marketing_info: {},
    })
  }
  downloadLogo = async (): Promise<DownloadLogoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      download_logo: {},
    })
  }
}
export interface Cw20Interface extends Cw20ReadOnlyInterface {
  contractAddress: string
  sender: string
  transfer: (
    {
      amount,
      recipient,
    }: {
      amount: string
      recipient: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  burn: (
    {
      amount,
    }: {
      amount: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  send: (
    {
      amount,
      contract,
      msg,
    }: {
      amount: string
      contract: string
      msg: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  increaseAllowance: (
    {
      amount,
      expires,
      spender,
    }: {
      amount: string
      expires?: Expiration
      spender: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  decreaseAllowance: (
    {
      amount,
      expires,
      spender,
    }: {
      amount: string
      expires?: Expiration
      spender: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  transferFrom: (
    {
      amount,
      owner,
      recipient,
    }: {
      amount: string
      owner: string
      recipient: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  sendFrom: (
    {
      amount,
      contract,
      msg,
      owner,
    }: {
      amount: string
      contract: string
      msg: string
      owner: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  burnFrom: (
    {
      amount,
      owner,
    }: {
      amount: string
      owner: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  mint: (
    {
      amount,
      recipient,
    }: {
      amount: string
      recipient: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  updateMinter: (
    {
      newMinter,
    }: {
      newMinter: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  updateMarketing: (
    {
      description,
      marketing,
      project,
    }: {
      description?: string
      marketing?: string
      project?: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  uploadLogo: (
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
}
export class Cw20Client extends Cw20QueryClient implements Cw20Interface {
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.transfer = this.transfer.bind(this)
    this.burn = this.burn.bind(this)
    this.send = this.send.bind(this)
    this.increaseAllowance = this.increaseAllowance.bind(this)
    this.decreaseAllowance = this.decreaseAllowance.bind(this)
    this.transferFrom = this.transferFrom.bind(this)
    this.sendFrom = this.sendFrom.bind(this)
    this.burnFrom = this.burnFrom.bind(this)
    this.mint = this.mint.bind(this)
    this.updateMinter = this.updateMinter.bind(this)
    this.updateMarketing = this.updateMarketing.bind(this)
    this.uploadLogo = this.uploadLogo.bind(this)
  }

  transfer = async (
    {
      amount,
      recipient,
    }: {
      amount: string
      recipient: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        transfer: {
          amount,
          recipient,
        },
      },
      fee,
      memo,
      funds
    )
  }
  burn = async (
    {
      amount,
    }: {
      amount: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        burn: {
          amount,
        },
      },
      fee,
      memo,
      funds
    )
  }
  send = async (
    {
      amount,
      contract,
      msg,
    }: {
      amount: string
      contract: string
      msg: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        send: {
          amount,
          contract,
          msg,
        },
      },
      fee,
      memo,
      funds
    )
  }
  increaseAllowance = async (
    {
      amount,
      expires,
      spender,
    }: {
      amount: string
      expires?: Expiration
      spender: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        increase_allowance: {
          amount,
          expires,
          spender,
        },
      },
      fee,
      memo,
      funds
    )
  }
  decreaseAllowance = async (
    {
      amount,
      expires,
      spender,
    }: {
      amount: string
      expires?: Expiration
      spender: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        decrease_allowance: {
          amount,
          expires,
          spender,
        },
      },
      fee,
      memo,
      funds
    )
  }
  transferFrom = async (
    {
      amount,
      owner,
      recipient,
    }: {
      amount: string
      owner: string
      recipient: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        transfer_from: {
          amount,
          owner,
          recipient,
        },
      },
      fee,
      memo,
      funds
    )
  }
  sendFrom = async (
    {
      amount,
      contract,
      msg,
      owner,
    }: {
      amount: string
      contract: string
      msg: string
      owner: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        send_from: {
          amount,
          contract,
          msg,
          owner,
        },
      },
      fee,
      memo,
      funds
    )
  }
  burnFrom = async (
    {
      amount,
      owner,
    }: {
      amount: string
      owner: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        burn_from: {
          amount,
          owner,
        },
      },
      fee,
      memo,
      funds
    )
  }
  mint = async (
    {
      amount,
      recipient,
    }: {
      amount: string
      recipient: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        mint: {
          amount,
          recipient,
        },
      },
      fee,
      memo,
      funds
    )
  }
  updateMinter = async (
    {
      newMinter,
    }: {
      newMinter: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_minter: {
          new_minter: newMinter,
        },
      },
      fee,
      memo,
      funds
    )
  }
  updateMarketing = async (
    {
      description,
      marketing,
      project,
    }: {
      description?: string
      marketing?: string
      project?: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        update_marketing: {
          description,
          marketing,
          project,
        },
      },
      fee,
      memo,
      funds
    )
  }
  uploadLogo = async (
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        upload_logo: {},
      },
      fee,
      memo,
      funds
    )
  }
}
