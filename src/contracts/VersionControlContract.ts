/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.2.15.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
export type Addr = string
export interface ApiAddressResponse {
  address: Addr
  info: ContractVersion
}
export interface ContractVersion {
  contract: string
  version: string
}
export interface ApiAddressesResponse {
  api_addresses: [ContractVersion, string][]
}
export type Uint64 = string
export interface CodeIdResponse {
  code_id: Uint64
  info: ContractVersion
}
export interface CodeIdsResponse {
  module_code_ids: [ContractVersion, number][]
}
export interface ConfigResponse {
  admin: string
  factory: string
}
export interface InstantiateMsg {}
export interface ModuleInfo {
  name: string
  version?: string | null
}
export interface OsCoreResponse {
  os_core: Core
}
export interface Core {
  manager: Addr
  proxy: Addr
}
export interface VersionControlReadOnlyInterface {
  contractAddress: string
  osCore: ({ osId }: { osId: number }) => Promise<OsCoreResponse>
  codeId: ({ module }: { module: ModuleInfo }) => Promise<CodeIdResponse>
  apiAddress: ({ module }: { module: ModuleInfo }) => Promise<ApiAddressResponse>
  config: () => Promise<ConfigResponse>
  codeIds: ({
    iterLimit,
    lastModule,
  }: {
    iterLimit?: number
    lastModule?: ContractVersion
  }) => Promise<CodeIdsResponse>
  apiAddresses: ({
    iterLimit,
    lastApiModule,
  }: {
    iterLimit?: number
    lastApiModule?: ContractVersion
  }) => Promise<ApiAddressesResponse>
}
export class VersionControlQueryClient implements VersionControlReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.osCore = this.osCore.bind(this)
    this.codeId = this.codeId.bind(this)
    this.apiAddress = this.apiAddress.bind(this)
    this.config = this.config.bind(this)
    this.codeIds = this.codeIds.bind(this)
    this.apiAddresses = this.apiAddresses.bind(this)
  }

  osCore = async ({ osId }: { osId: number }): Promise<OsCoreResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      os_core: {
        os_id: osId,
      },
    })
  }
  codeId = async ({ module }: { module: ModuleInfo }): Promise<CodeIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      code_id: {
        module,
      },
    })
  }
  apiAddress = async ({ module }: { module: ModuleInfo }): Promise<ApiAddressResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      api_address: {
        module,
      },
    })
  }
  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {},
    })
  }
  codeIds = async ({
    iterLimit,
    lastModule,
  }: {
    iterLimit?: number
    lastModule?: ContractVersion
  }): Promise<CodeIdsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      code_ids: {
        iter_limit: iterLimit,
        last_module: lastModule,
      },
    })
  }
  apiAddresses = async ({
    iterLimit,
    lastApiModule,
  }: {
    iterLimit?: number
    lastApiModule?: ContractVersion
  }): Promise<ApiAddressesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      api_addresses: {
        iter_limit: iterLimit,
        last_api_module: lastApiModule,
      },
    })
  }
}
export interface VersionControlInterface extends VersionControlReadOnlyInterface {
  contractAddress: string
  sender: string
  addCodeId: (
    {
      codeId,
      module,
      version,
    }: {
      codeId: number
      module: string
      version: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  removeCodeId: (
    {
      module,
      version,
    }: {
      module: string
      version: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  addApi: (
    {
      address,
      module,
      version,
    }: {
      address: string
      module: string
      version: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  removeApi: (
    {
      module,
      version,
    }: {
      module: string
      version: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  addOs: (
    {
      managerAddress,
      osId,
      proxyAddress,
    }: {
      managerAddress: string
      osId: number
      proxyAddress: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  setAdmin: (
    {
      newAdmin,
    }: {
      newAdmin: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
  setFactory: (
    {
      newFactory,
    }: {
      newFactory: string
    },
    fee?: number | StdFee | 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ) => Promise<ExecuteResult>
}
export class VersionControlClient
  extends VersionControlQueryClient
  implements VersionControlInterface
{
  client: SigningCosmWasmClient
  sender: string
  contractAddress: string

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress)
    this.client = client
    this.sender = sender
    this.contractAddress = contractAddress
    this.addCodeId = this.addCodeId.bind(this)
    this.removeCodeId = this.removeCodeId.bind(this)
    this.addApi = this.addApi.bind(this)
    this.removeApi = this.removeApi.bind(this)
    this.addOs = this.addOs.bind(this)
    this.setAdmin = this.setAdmin.bind(this)
    this.setFactory = this.setFactory.bind(this)
  }

  addCodeId = async (
    {
      codeId,
      module,
      version,
    }: {
      codeId: number
      module: string
      version: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_code_id: {
          code_id: codeId,
          module,
          version,
        },
      },
      fee,
      memo,
      funds
    )
  }
  removeCodeId = async (
    {
      module,
      version,
    }: {
      module: string
      version: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_code_id: {
          module,
          version,
        },
      },
      fee,
      memo,
      funds
    )
  }
  addApi = async (
    {
      address,
      module,
      version,
    }: {
      address: string
      module: string
      version: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_api: {
          address,
          module,
          version,
        },
      },
      fee,
      memo,
      funds
    )
  }
  removeApi = async (
    {
      module,
      version,
    }: {
      module: string
      version: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        remove_api: {
          module,
          version,
        },
      },
      fee,
      memo,
      funds
    )
  }
  addOs = async (
    {
      managerAddress,
      osId,
      proxyAddress,
    }: {
      managerAddress: string
      osId: number
      proxyAddress: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        add_os: {
          manager_address: managerAddress,
          os_id: osId,
          proxy_address: proxyAddress,
        },
      },
      fee,
      memo,
      funds
    )
  }
  setAdmin = async (
    {
      newAdmin,
    }: {
      newAdmin: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_admin: {
          new_admin: newAdmin,
        },
      },
      fee,
      memo,
      funds
    )
  }
  setFactory = async (
    {
      newFactory,
    }: {
      newFactory: string
    },
    fee: number | StdFee | 'auto' = 'auto',
    memo?: string,
    funds?: readonly Coin[]
  ): Promise<ExecuteResult> => {
    return await this.client.execute(
      this.sender,
      this.contractAddress,
      {
        set_factory: {
          new_factory: newFactory,
        },
      },
      fee,
      memo,
      funds
    )
  }
}
