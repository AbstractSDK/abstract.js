/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.4.2.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate'
export type AssetInfoBase_for_Addr =
  | {
      cw20: Addr
    }
  | {
      native: string
    }
export type Addr = string
export interface AssetListResponse {
  assets: [string, AssetInfoBase_for_Addr][]
}
export interface AssetsResponse {
  assets: [string, AssetInfoBase_for_Addr][]
}
export interface ContractListResponse {
  contracts: [string, string][]
}
export interface ContractsResponse {
  contracts: [string, string][]
}
export interface InstantiateMsg {}
export type QueryMsg =
  | {
      assets: {
        names: string[]
      }
    }
  | {
      contracts: {
        names: string[]
      }
    }
  | {
      contract_list: {
        iter_limit?: number | null
        last_contract_name?: string | null
      }
    }
  | {
      asset_list: {
        iter_limit?: number | null
        last_asset_name?: string | null
      }
    }
export interface MemoryReadOnlyInterface {
  contractAddress: string
  assets: ({ names }: { names: string[] }) => Promise<AssetsResponse>
  contracts: ({ names }: { names: string[] }) => Promise<ContractsResponse>
  contractList: ({
    iterLimit,
    lastContractName,
  }: {
    iterLimit?: number
    lastContractName?: string
  }) => Promise<ContractListResponse>
  assetList: ({
    iterLimit,
    lastAssetName,
  }: {
    iterLimit?: number
    lastAssetName?: string
  }) => Promise<AssetListResponse>
}
export class MemoryQueryClient implements MemoryReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.assets = this.assets.bind(this)
    this.contracts = this.contracts.bind(this)
    this.contractList = this.contractList.bind(this)
    this.assetList = this.assetList.bind(this)
  }

  assets = async ({ names }: { names: string[] }): Promise<AssetsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      assets: {
        names,
      },
    })
  }
  contracts = async ({ names }: { names: string[] }): Promise<ContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contracts: {
        names,
      },
    })
  }
  contractList = async ({
    iterLimit,
    lastContractName,
  }: {
    iterLimit?: number
    lastContractName?: string
  }): Promise<ContractListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      contract_list: {
        iter_limit: iterLimit,
        last_contract_name: lastContractName,
      },
    })
  }
  assetList = async ({
    iterLimit,
    lastAssetName,
  }: {
    iterLimit?: number
    lastAssetName?: string
  }): Promise<AssetListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      asset_list: {
        iter_limit: iterLimit,
        last_asset_name: lastAssetName,
      },
    })
  }
}
