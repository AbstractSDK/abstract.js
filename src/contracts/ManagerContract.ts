/**
 * This file was automatically generated by cosmwasm-typescript-gen@0.2.15.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the cosmwasm-typescript-gen generate command to regenerate this file.
 */

import { CosmWasmClient, ExecuteResult, SigningCosmWasmClient } from '@cosmjs/cosmwasm-stargate'
import { Coin, StdFee } from '@cosmjs/amino'
export interface InstantiateMsg {
  module_factory_address: string
  os_id: number
  root_user: string
  subscription_address?: string | null
  version_control_address: string
  [k: string]: unknown
}
export interface QueryEnabledModulesResponse {
  modules: string[]
  [k: string]: unknown
}
export interface QueryModulesResponse {
  modules: [string, string][]
  [k: string]: unknown
}
export type Uint64 = string
export interface QueryOsConfigResponse {
  module_factory_address: string
  os_id: Uint64
  root: string
  version_control_address: string
  [k: string]: unknown
}
export interface QueryVersionsResponse {
  versions: ContractVersion[]
  [k: string]: unknown
}
export interface ContractVersion {
  contract: string
  version: string
  [k: string]: unknown
}
export interface ManagerReadOnlyInterface {
  contractAddress: string
  queryVersions: ({ names }: { names: string[] }) => Promise<QueryVersionsResponse>
  queryModules: ({ names }: { names: string[] }) => Promise<QueryModulesResponse>
  queryEnabledModules: () => Promise<QueryEnabledModulesResponse>
  queryOsConfig: () => Promise<QueryOsConfigResponse>
}
export class ManagerQueryClient implements ManagerReadOnlyInterface {
  client: CosmWasmClient
  contractAddress: string

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client
    this.contractAddress = contractAddress
    this.queryVersions = this.queryVersions.bind(this)
    this.queryModules = this.queryModules.bind(this)
    this.queryEnabledModules = this.queryEnabledModules.bind(this)
    this.queryOsConfig = this.queryOsConfig.bind(this)
  }

  queryVersions = async ({ names }: { names: string[] }): Promise<QueryVersionsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_versions: {
        names,
      },
    })
  }
  queryModules = async ({ names }: { names: string[] }): Promise<QueryModulesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_modules: {
        names,
      },
    })
  }
  queryEnabledModules = async (): Promise<QueryEnabledModulesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_enabled_modules: {},
    })
  }
  queryOsConfig = async (): Promise<QueryOsConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_os_config: {},
    })
  }
}
